SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/CipherFactory/../result_noax/sk_CipherFactoryTests/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 15
[SATBackend] MAX FUNC INLINING  = 2
estimated size of main__Wrapper_CipherFactoryTests
stmt cnt: 2
callee main_CipherFactoryTests : 86

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_CipherFactoryTests
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/CipherFactory/../result_noax/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/CipherFactory/../result_noax/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 2 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/result_noax/tmp/sk_CipherFactoryTests/solution0-0 /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/result_noax/tmp/sk_CipherFactoryTests/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1520018024
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch4/test/axioms/examples/CipherFactory/result_noax/tmp/sk_CipherFactoryTests/input0.tmp
CREATING main__Wrapper_CipherFactoryTests
size = 4
after ba size = 4
CREATING main__WrapperNospec_CipherFactoryTests
size = 0
after ba size = 0
CREATING main_CipherFactoryTests
size = 650
after ba size = 650
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 76
after ba size = 76
CREATING CryptoManager_meta
size = 3
after ba size = 3
CREATING CryptoManager_CryptoManager_CryptoManager
size = 391
after ba size = 391
CREATING String_meta
size = 3
after ba size = 3
CREATING String_String_char_int_int_String
size = 397
after ba size = 397
CREATING encrypt_String_CryptoManager
Found Cycle of size 11; Breaking.
size = 1190
after ba size = 1190
CREATING decrypt_String_CryptoManager
Found Cycle of size 15; Breaking.
size = 1362
after ba size = 1362
CREATING equals_Object_String
Found Cycle of size 6; Breaking.
size = 589
after ba size = 589
CREATING DefaultCipherFactory_meta
size = 3
after ba size = 3
CREATING DefaultCipherFactory_DefaultCipherFactory_DefaultCipherFactory
size = 436
after ba size = 436
CREATING getCharset_CryptoManager
size = 83
after ba size = 83
CREATING encode_String_String_CryptoManager
size = 102
after ba size = 102
CREATING getCipherFactory_CryptoManager
size = 83
after ba size = 83
CREATING ConfigurableCipherFactory_meta
size = 3
after ba size = 3
CREATING encryptionCipher_DefaultCipherFactory
size = 161
after ba size = 161
CREATING decryptionCipher_DefaultCipherFactory
size = 161
after ba size = 161
CREATING readEncoded_String_CryptoManager
size = 91
after ba size = 91
CREATING isEncryptedByte_byte_CryptoManager
size = 97
after ba size = 97
CREATING cutEncryptionMark_byte_CryptoManager
size = 400
after ba size = 400
CREATING appendEncryptionMark_byte_CryptoManager
size = 109
after ba size = 109
CREATING cryptInCipher_Cipher_byte_CryptoManager
size = 102
after ba size = 102
CREATING processEscape_byte_boolean_CryptoManager
size = 80
after ba size = 80
CREATING getBasicCharset_CryptoManager
size = 83
after ba size = 83
CREATING decode_byte_String_CryptoManager
size = 166
after ba size = 166
CREATING isEncrypted_String_CryptoManager
size = 290
after ba size = 290
CREATING length_String
size = 83
after ba size = 83
CREATING getBytes_String
size = 98
after ba size = 98
CREATING initCipher_int_DefaultCipherFactory
size = 161
after ba size = 161
CREATING getEncryptedMark_CryptoManager
size = 83
after ba size = 83
CREATING arraycopy_byte_int_byte_int_int_System
size = 306
after ba size = 306
CREATING Cipher_meta
size = 3
after ba size = 3
CREATING doFinal_byte_Cipher
size = 968
after ba size = 968
CREATING String_String_byte_String
size = 238
after ba size = 238
CREATING isUseEncryptionStrict_CryptoManager
size = 83
after ba size = 83
CREATING toString_String
size = 76
after ba size = 76
CREATING getBytes_String_String
Found Cycle of size 14; Breaking.
size = 289
after ba size = 289
CREATING obtainCipher_int_DefaultCipherFactory
size = 404
after ba size = 404
CREATING SecretKeySpec_meta
size = 3
after ba size = 3
CREATING getEncoded_SecretKeySpec
size = 85
after ba size = 85
CREATING KerberosKey_meta
size = 3
after ba size = 3
CREATING getEncoded_KerberosKey
size = 85
after ba size = 85
CREATING charAt_int_String
size = 113
after ba size = 113
CREATING key_DefaultCipherFactory
size = 102
after ba size = 102
CREATING getAlgorithm_DefaultCipherFactory
size = 83
after ba size = 83
CREATING SecretKeySpec_SecretKeySpec_byte_String_SecretKeySpec
size = 87
after ba size = 87
CREATING getPadding_DefaultCipherFactory
size = 83
after ba size = 83
CREATING getInstance_String_Cipher
size = 158
after ba size = 158
CREATING init_int_Key_Cipher
size = 86
after ba size = 86
CREATING getKey_DefaultCipherFactory
size = 83
after ba size = 83
CREATING Cipher_Cipher_String_Cipher
size = 88
after ba size = 88
* before  EVERYTHING: main__WrapperNospec_CipherFactoryTests::SPEC nodes = 0	 main__Wrapper_CipherFactoryTests::SKETCH nodes = 4
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 2
 Inlining functions in the sketch.
inlined 1 new size =555
Found Cycle of size 25; Breaking.
inlined 18 new size =3075
Found Cycle of size 29; Breaking.
Found Cycle of size 52; Breaking.
inlined 59 new size =4353
Found Cycle of size 56; Breaking.
Found Cycle of size 51; Breaking.
Found Cycle of size 150; Breaking.
Found Cycle of size 117; Breaking.
inlined 49 new size =8657
Found Cycle of size 137; Breaking.
Found Cycle of size 134; Breaking.
Found Cycle of size 131; Breaking.
Found Cycle of size 187; Breaking.
Found Cycle of size 182; Breaking.
Found Cycle of size 176; Breaking.
Found Cycle of size 67; Breaking.
inlined 42 new size =12146
Found Cycle of size 201; Breaking.
Found Cycle of size 198; Breaking.
Found Cycle of size 133; Breaking.
inlined 135 new size =12008
Found Cycle of size 25; Breaking.
inlined 103 new size =11512
Found Cycle of size 44; Breaking.
Found Cycle of size 41; Breaking.
inlined 39 new size =12525
inlined 134 new size =14157
inlined 18 new size =14365
inlined 0 new size =14365
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 14325
* Final Problem size: Problem nodes = 14325
  # OF CONTROLS:    36
 control_ints = 0 	 control_bits = 36
inputSize = 0	ctrlSize = 36
Random seeds = 1
!+ 111000101100001010000010100110001100
!+ H__1_308:1
H__2_308:1
H__0_308:1
H__3_308:0
H__9_308:0
H__2_308_307:0
H__1_308_307:1
H__3_308_307:0
H__4_308:1
H__5_308:1
H__6_308:0
H__7_308:0
H__0_308_307:0
H__4_308_307:0
H__5_308_307:1
H__6_308_307:0
H__7_308_307:1
H__9_320:0
H__3_320_307:0
H__1_320:0
H__2_320:0
H__3_320:0
H__1_320_307:1
H__2_320_307:0
H__0_320:1
H__4_320:0
H__5_320:0
H__6_320:1
H__7_320:1
H__0_320_307:0
H__4_320_307:0
H__9_308_307_308_307:0
H__5_320_307:1
H__6_320_307:1
H__7_320_307:0
H__9_320_307_320_307:0

BEG CHECK
 * After optims it became = 0 was 14325
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 0.021
 *GOT THE CORRECT ANSWER IN 1 iterations.
 *FIND TIME 0 CHECK TIME 0.021 TOTAL TIME 0.021
VALUES H__0_308: 1, H__0_308_307: 0, H__0_320: 1, H__0_320_307: 0, H__1_308: 1, H__1_308_307: 1, H__1_320: 0, H__1_320_307: 1, H__2_308: 1, H__2_308_307: 0, H__2_320: 0, H__2_320_307: 0, H__3_308: 0, H__3_308_307: 0, H__3_320: 0, H__3_320_307: 0, H__4_308: 1, H__4_308_307: 0, H__4_320: 0, H__4_320_307: 0, H__5_308: 1, H__5_308_307: 1, H__5_320: 0, H__5_320_307: 1, H__6_308: 0, H__6_308_307: 0, H__6_320: 1, H__6_320_307: 1, H__7_308: 0, H__7_308_307: 1, H__7_320: 1, H__7_320_307: 0, H__9_308: 0, H__9_308_307_308_307: 0, H__9_320: 0, H__9_320_307_320_307: 0, 
RESULT = 2  
**ROUND 0 : 0 Round time:  0.178 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  0.419
Model building time (ms): 0.226
Solution time (ms):       0.178
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 0.605
      model building time (s) ---------> 0.0
      solution time (s) ---------------> 0.0
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> 14325
      number of controls --------------> 36
      total number of control bits ----> 36

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE PrivateKey*/
package PrivateKey{
  /* END PACKAGE PrivateKey*/
}
/* BEGIN PACKAGE ICipherFactory*/
package ICipherFactory{
  /* END PACKAGE ICipherFactory*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5337 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s5336)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s5336 = 16;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s5379 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s5378)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s5378 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s5401 (ref int MAX_ARRAY_SIZE__ArrayList_s5400)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s5400 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:22*/
  
void String_String_byte (Object self, Array_char bytes, ref Object _out)/*String.sk:22*/
  {
    int len;
    len = bytes.length;
    self._value_String = new Array_char@array(length=len);
    for(int i = 0; i < len; i = i + 1)/*Canonical*/
    {
      self._value_String.A[i] = bytes.A[i];
    }
    self._count_String = len;
    _out = self;
    return;
  }
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:43*/
  {
    if((0 <= index) && (index < (self._count_String)))/*String.sk:44*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:154*/
  {
    _out = 0;
    int _out_s2558 = 0;
    String@meta(_out_s2558);
    if((obj.__cid) == _out_s2558)/*String.sk:156*/
    {
      _out = 1;
      int sLen_s2560 = 0;
      String@meta(sLen_s2560);
      int _pac_sc_s2561 = 0;
      if((obj.__cid) == sLen_s2560)/*String.sk:159*/
      {
        int sLen_s2563 = 0;
        length@String(obj, sLen_s2563);
        _pac_sc_s2561 = sLen_s2563;
      }
      else
      {
        _pac_sc_s2561 = 0;
      }
      int tLen_s2565 = 0;
      String@meta(tLen_s2565);
      int _pac_sc_s2566 = 0;
      if((self.__cid) == tLen_s2565)/*String.sk:160*/
      {
        int tLen_s2568 = 0;
        length@String(self, tLen_s2568);
        _pac_sc_s2566 = tLen_s2568;
      }
      else
      {
        _pac_sc_s2566 = 0;
      }
      if(_pac_sc_s2561 != _pac_sc_s2566)/*String.sk:161*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2561) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:163*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:214*/
  
void getBytes (Object self, ref Array_char _out)/*String.sk:214*/
  {
    int _out_s2570 = 0;
    String@meta(_out_s2570);
    Object@Object _pac_sc_s2571 = null;
    if((self.__cid) == _out_s2570)/*String.sk:215*/
    {
      Object@Object _out_s2573 = null;
      toString@String(self, _out_s2573);
      _pac_sc_s2571 = _out_s2573;
    }
    else
    {
      _pac_sc_s2571 = null;
    }
    Array_char@array _out_s2575 = null;
    getBytes_String(_pac_sc_s2571, _out_s2575)//{};
    _out = _out_s2575;
    return;
  }
  /*String.sk:218*/
  
void getBytes_String (Object str, ref Array_char _out)/*String.sk:218*/
  {
    int len_s2577 = 0;
    String@meta(len_s2577);
    int _pac_sc_s2578 = 0;
    if((str.__cid) == len_s2577)/*String.sk:219*/
    {
      int len_s2580 = 0;
      length@String(str, len_s2580);
      _pac_sc_s2578 = len_s2580;
    }
    else
    {
      _pac_sc_s2578 = 0;
    }
    _out = new Array_char@array(length=_pac_sc_s2578);
    for(int i = 0; i < _pac_sc_s2578; i = i + 1)/*Canonical*/
    {
      int _out_s2582 = 0;
      String@meta(_out_s2582);
      char _pac_sc_s2583 = '\0';
      if((str.__cid) == _out_s2582)/*String.sk:222*/
      {
        char _out_s2585 = '\0';
        charAt_int@String(str, i, _out_s2585);
        _pac_sc_s2583 = _out_s2585;
      }
      else
      {
        _pac_sc_s2583 = '\0';
      }
      _out.A[i] = _pac_sc_s2583;
    }
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref int _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /*String.sk:52*/
  
void toString (Object self, ref Object _out)/*String.sk:52*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s5391 (ref int INITIAL_CAPACITY__TreeSet_s5390)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s5390 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s5427 (ref int RESIZE_FACTOR__TreeSet_s5426)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s5426 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Collections*/
package Collections{
  /* END PACKAGE Collections*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s5389 (ref int INITIAL_CAPACITY__HashSet_s5388)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s5388 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s5425 (ref int RESIZE_FACTOR__HashSet_s5424)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s5424 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s5325 (ref char COMBINING_SPACING_MARK__Character_s5324)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s5324 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s5327 (ref char CONNECTOR_PUNCTUATION__Character_s5326)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s5326 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s5329 (ref char CONTROL__Character_s5328)/*Character.sk:71*/
  {
    CONTROL__Character_s5328 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s5331 (ref char CURRENCY_SYMBOL__Character_s5330)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s5330 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s5333 (ref char DASH_PUNCTUATION__Character_s5332)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s5332 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s5335 (ref char DECIMAL_DIGIT_NUMBER__Character_s5334)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s5334 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s5339 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s5338)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s5338 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5341 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5340)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5340 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5343 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5342)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5342 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5345 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5344)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5344 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5347 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5346)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5346 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5349 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5348)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5348 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5351 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5350)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5350 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5353 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5352)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5352 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5355 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5354)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5354 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s5357 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s5356)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s5356 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s5359 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s5358)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s5358 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5361 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5360)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5360 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5363 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5362)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5362 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5365 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5364)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5364 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5367 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5366)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5366 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5369 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5368)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5368 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5371 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5370)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5370 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5373 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5372)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5372 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s5375 (ref char DIRECTIONALITY_UNDEFINED__Character_s5374)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s5374 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s5377 (ref char DIRECTIONALITY_WHITESPACE__Character_s5376)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s5376 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s5381 (ref char ENCLOSING_MARK__Character_s5380)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s5380 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s5383 (ref char END_PUNCTUATION__Character_s5382)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s5382 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s5385 (ref char FINAL_QUOTE_PUNCTUATION__Character_s5384)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s5384 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s5387 (ref char FORMAT__Character_s5386)/*Character.sk:75*/
  {
    FORMAT__Character_s5386 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s5393 (ref char LETTER_NUMBER__Character_s5392)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s5392 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s5395 (ref char LINE_SEPARATOR__Character_s5394)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s5394 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s5397 (ref char LOWERCASE_LETTER__Character_s5396)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s5396 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s5399 (ref char MATH_SYMBOL__Character_s5398)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s5398 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s5403 (ref int MAX_RADIX__Character_s5402)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s5402 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s5405 (ref int MIN_RADIX__Character_s5404)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s5404 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s5407 (ref char MODIFIER_LETTER__Character_s5406)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s5406 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s5409 (ref char MODIFIER_SYMBOL__Character_s5408)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s5408 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s5411 (ref char NON_SPACING_MARK__Character_s5410)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s5410 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s5413 (ref char OTHER_LETTER__Character_s5412)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s5412 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s5415 (ref char OTHER_NUMBER__Character_s5414)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s5414 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s5417 (ref char OTHER_PUNCTUATION__Character_s5416)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s5416 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s5419 (ref char OTHER_SYMBOL__Character_s5418)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s5418 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s5421 (ref char PARAGRAPH_SEPARATOR__Character_s5420)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s5420 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s5423 (ref char PRIVATE_USE__Character_s5422)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s5422 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s5429 (ref char SPACE_SEPARATOR__Character_s5428)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s5428 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s5431 (ref char START_PUNCTUATION__Character_s5430)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s5430 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s5433 (ref char SURROGATE__Character_s5432)/*Character.sk:83*/
  {
    SURROGATE__Character_s5432 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s5435 (ref char TITLECASE_LETTER__Character_s5434)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s5434 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s5437 (ref char UNASSIGNED__Character_s5436)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s5436 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s5439 (ref char UPPERCASE_LETTER__Character_s5438)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s5438 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE CryptoCipherFactory*/
package CryptoCipherFactory{
  /* END PACKAGE CryptoCipherFactory*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:16*/
  
void Cipher (ref int _out)/*meta.sk:16*/
  {
    _out = 45;
    return;
  }
  /*meta.sk:20*/
  
void ConfigurableCipherFactory (ref int _out)/*meta.sk:20*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:23*/
  
void CryptoManager (ref int _out)/*meta.sk:23*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:24*/
  
void DefaultCipherFactory (ref int _out)/*meta.sk:24*/
  {
    _out = 6;
    return;
  }
  /*meta.sk:38*/
  
void KerberosKey (ref int _out)/*meta.sk:38*/
  {
    _out = 41;
    return;
  }
  /*meta.sk:48*/
  
void Object (ref int _out)/*meta.sk:48*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:55*/
  
void SecretKeySpec (ref int _out)/*meta.sk:55*/
  {
    _out = 29;
    return;
  }
  /*meta.sk:59*/
  
void String (ref int _out)/*meta.sk:59*/
  {
    _out = 10;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE FileOutputStream*/
package FileOutputStream{
  /* END PACKAGE FileOutputStream*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      int value_Integer;
      Object mode_KeyGenerator;
      Object instance_KeyStore;
      float value_Float;
      Object fname_FileWriterr;
      Array_char _value_String;
      int _count_String;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Object map_Properties;
      Object path_FileReaderr;
      Object data_FileReaderr;
      int position_FileReaderr;
      char value_Character;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Array_char key_SecretKeySpec;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      Object file_Scanner;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      Object path_FileOutputStream;
      Object CLASSES_KEY_CryptoCipherFactory;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      Object out_PrintStream;
      Object basicCharset_CryptoManager;
      Object charset_CryptoManager;
      char encryptedMark_CryptoManager;
      bit useEncryptionStrict_CryptoManager;
      Object cipherFactory_CryptoManager;
      Object ALGORITHM_DefaultCipherFactory;
      Object PADDING_DefaultCipherFactory;
      Object algorithm_DefaultCipherFactory;
      Object padding_DefaultCipherFactory;
      Object key_DefaultCipherFactory;
      bit keyBase64_DefaultCipherFactory;
      bit bool_Boolean;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
      Object reader_BufferedReader;
      Object writer_BufferedWriter;
      Object fname_File;
      int size_File;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE DefaultCipherFactory*/
package DefaultCipherFactory{
  /*Default..actory.sk:3*/
  
void DefaultCipherFactory_DefaultCipherFactory (Object self, ref Object _out)/*Default..actory.sk:3*/
  {
    int _out_s4745 = 0;
    String@meta(_out_s4745);
    Object@Object _out_s4747 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4745), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, _out_s4747)//{};
    self.ALGORITHM_DefaultCipherFactory = _out_s4747;
    int _out_s4749 = 0;
    String@meta(_out_s4749);
    Object@Object _out_s4751 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4749), new Array_char@array(length=21, A={'A','E','S','/','E','C','B','/','P','K','C','S','5','P','a','d','d','i','n','g','\0'}), 0, 20, _out_s4751)//{};
    self.PADDING_DefaultCipherFactory = _out_s4751;
    self.algorithm_DefaultCipherFactory = self.ALGORITHM_DefaultCipherFactory;
    self.padding_DefaultCipherFactory = self.PADDING_DefaultCipherFactory;
    int _out_s4753 = 0;
    String@meta(_out_s4753);
    Object@Object _out_s4755 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4753), new Array_char@array(length=4, A={'K','E','Y','\0'}), 0, 3, _out_s4755)//{};
    self.key_DefaultCipherFactory = _out_s4755;
    _out = self;
    return;
  }
  /*Default..actory.sk:16*/
  
void decryptionCipher (Object self, ref Object _out)/*Default..actory.sk:16*/
  {
    Object@Object _out_s4718 = null;
    initCipher_int@DefaultCipherFactory(self, 2, _out_s4718);
    _out = _out_s4718;
    return;
  }
  /*Default..actory.sk:12*/
  
void encryptionCipher (Object self, ref Object _out)/*Default..actory.sk:12*/
  {
    Object@Object _out_s4743 = null;
    initCipher_int@DefaultCipherFactory(self, 1, _out_s4743);
    _out = _out_s4743;
    return;
  }
  /*Default..actory.sk:39*/
  
void getAlgorithm (Object self, ref Object _out)/*Default..actory.sk:39*/
  {
    _out = self.algorithm_DefaultCipherFactory;
    return;
  }
  /*Default..actory.sk:47*/
  
void getKey (Object self, ref Object _out)/*Default..actory.sk:47*/
  {
    _out = self.key_DefaultCipherFactory;
    return;
  }
  /*Default..actory.sk:43*/
  
void getPadding (Object self, ref Object _out)/*Default..actory.sk:43*/
  {
    _out = self.padding_DefaultCipherFactory;
    return;
  }
  /*Default..actory.sk:20*/
  
void initCipher_int (Object self, int mode, ref Object _out)/*Default..actory.sk:20*/
  {
    Object@Object cipher_s4720 = null;
    obtainCipher_int@DefaultCipherFactory(self, mode, cipher_s4720);
    _out = cipher_s4720;
    return;
  }
  /*Default..actory.sk:34*/
  
void key (Object self, ref Array_char _out)/*Default..actory.sk:34*/
  {
    Object@Object k_s4736 = null;
    getKey@DefaultCipherFactory(self, k_s4736);
    int _out_s4738 = 0;
    String@meta(_out_s4738);
    Array_char@array _pac_sc_s4739 = null;
    if((k_s4736.__cid) == _out_s4738)/*Default..actory.sk:36*/
    {
      Array_char@array _out_s4741 = null;
      getBytes@String(k_s4736, _out_s4741);
      _pac_sc_s4739 = _out_s4741;
    }
    else
    {
      _pac_sc_s4739 = null;
    }
    _out = _pac_sc_s4739;
    return;
  }
  /*Default..actory.sk:26*/
  
void obtainCipher_int (Object self, int mode, ref Object _out)/*Default..actory.sk:26*/
  {
    int secretKeySpec_s4722 = 0;
    SecretKeySpec@meta(secretKeySpec_s4722);
    Array_char@array secretKeySpec_s4724 = null;
    key@DefaultCipherFactory(self, secretKeySpec_s4724);
    Object@Object secretKeySpec_s4726 = null;
    getAlgorithm@DefaultCipherFactory(self, secretKeySpec_s4726);
    Object@Object secretKeySpec_s4728 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=secretKeySpec_s4722), secretKeySpec_s4724, secretKeySpec_s4726, secretKeySpec_s4728)//{};
    Object@Object cipher_s4730 = null;
    getPadding@DefaultCipherFactory(self, cipher_s4730);
    Object@Object cipher_s4732 = null;
    getInstance_String@Cipher(cipher_s4730, cipher_s4732)//{};
    _out = cipher_s4732;
    int _out_s4734 = 0;
    Cipher@meta(_out_s4734);
    if((cipher_s4732.__cid) == _out_s4734)/*Default..actory.sk:29*/
    {
      init_int_Key@Cipher(cipher_s4732, mode, secretKeySpec_s4728);
    }
    return;
  }
  /* END PACKAGE DefaultCipherFactory*/
}
/* BEGIN PACKAGE CipherFactoryTests*/
package CipherFactoryTests{
  /*CipherF..yTests.sk:7*/
  
void _main ()/*CipherF..yTests.sk:7*/
  {
    int self_s4757 = 0;
    Object@meta(self_s4757);
    Object@Object self_s4759 = null;
    Object_Object@Object(new Object@Object(__cid=self_s4757), self_s4759)//{};
    int cm_s4761 = 0;
    CryptoManager@meta(cm_s4761);
    Object@Object cm_s4763 = null;
    CryptoManager_CryptoManager@CryptoManager(new Object@Object(__cid=cm_s4761), cm_s4763)//{};
    int m_s4765 = 0;
    String@meta(m_s4765);
    Object@Object m_s4767 = null;
    String_String_char_int_int@String(new Object@Object(__cid=m_s4765), new Array_char@array(length=15, A={'S','e','c','r','e','t',' ','m','e','s','s','a','g','e','\0'}), 0, 14, m_s4767)//{};
    int d_s4769 = 0;
    CryptoManager@meta(d_s4769);
    Object@Object _pac_sc_s4770 = null;
    if((cm_s4763.__cid) == d_s4769)/*CipherF..yTests.sk:11*/
    {
      Object@Object d_s4772 = null;
      encrypt_String@CryptoManager(cm_s4763, m_s4767, d_s4772);
      _pac_sc_s4770 = d_s4772;
    }
    else
    {
      _pac_sc_s4770 = null;
    }
    int p_s4774 = 0;
    CryptoManager@meta(p_s4774);
    Object@Object _pac_sc_s4775 = null;
    if((cm_s4763.__cid) == p_s4774)/*CipherF..yTests.sk:12*/
    {
      Object@Object p_s4777 = null;
      decrypt_String@CryptoManager(cm_s4763, _pac_sc_s4770, p_s4777);
      _pac_sc_s4775 = p_s4777;
    }
    else
    {
      _pac_sc_s4775 = null;
    }
    int _out_s4779 = 0;
    String@meta(_out_s4779);
    bit _pac_sc_s4780 = 0;
    if((_pac_sc_s4775.__cid) == _out_s4779)/*CipherF..yTests.sk:13*/
    {
      bit _out_s4782 = 0;
      equals_Object@String(_pac_sc_s4775, m_s4767, _out_s4782);
      _pac_sc_s4780 = _out_s4782;
    }
    else
    {
      _pac_sc_s4780 = 0;
    }
    assert (_pac_sc_s4780); //Assert at CipherF..yTests.sk:13 (0)
  }
  /*CipherF..yTests.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*CipherF..yTests.sk:7*/
  {
    _main();
  }
  /*CipherF..yTests.sk:7*/
  
void main__WrapperNospec ()/*CipherF..yTests.sk:7*/
  { }
  /* END PACKAGE CipherFactoryTests*/
}
/* BEGIN PACKAGE Arrays*/
package Arrays{
  /* END PACKAGE Arrays*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE AlgorithmParameterSpec*/
package AlgorithmParameterSpec{
  /* END PACKAGE AlgorithmParameterSpec*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE CryptoManager*/
package CryptoManager{
  /*CryptoManager.sk:3*/
  
void CryptoManager_CryptoManager (Object self, ref Object _out)/*CryptoManager.sk:3*/
  {
    int _out_s4914 = 0;
    String@meta(_out_s4914);
    Object@Object _out_s4916 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4914), new Array_char@array(length=9, A={'U','S','-','A','S','C','I','I','\0'}), 0, 8, _out_s4916)//{};
    self.basicCharset_CryptoManager = _out_s4916;
    int _out_s4918 = 0;
    String@meta(_out_s4918);
    Object@Object _out_s4920 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4918), new Array_char@array(length=6, A={'U','T','F','-','8','\0'}), 0, 5, _out_s4920)//{};
    self.charset_CryptoManager = _out_s4920;
    self.encryptedMark_CryptoManager = ((char)129);
    self.useEncryptionStrict_CryptoManager = 1;
    int _out_s4922 = 0;
    DefaultCipherFactory@meta(_out_s4922);
    Object@Object _out_s4924 = null;
    DefaultCipherFactory_DefaultCipherFactory@DefaultCipherFactory(new Object@Object(__cid=_out_s4922), _out_s4924)//{};
    self.cipherFactory_CryptoManager = _out_s4924;
    _out = self;
    return;
  }
  /*CryptoManager.sk:61*/
  
void appendEncryptionMark_byte (Object self, Array_char bytesArray, ref Array_char _out)/*CryptoManager.sk:61*/
  {
    _out = new Array_char@array(length=(bytesArray.length) + 1);
    char _out_s4872 = '\0';
    getEncryptedMark@CryptoManager(self, _out_s4872);
    _out.A[0] = _out_s4872;
    arraycopy_byte_int_byte_int_int@System(bytesArray, 0, _out, 1, bytesArray.length);
    return;
  }
  /*CryptoManager.sk:101*/
  
void cryptInCipher_Cipher_byte (Object self, Object cipher, Array_char data, ref Array_char _out)/*CryptoManager.sk:101*/
  {
    int _out_s4867 = 0;
    Cipher@meta(_out_s4867);
    Array_char@array _pac_sc_s4868 = null;
    if((cipher.__cid) == _out_s4867)/*CryptoManager.sk:102*/
    {
      Array_char@array _out_s4870 = null;
      doFinal_byte@Cipher(cipher, data, _out_s4870);
      _pac_sc_s4868 = _out_s4870;
    }
    else
    {
      _pac_sc_s4868 = null;
    }
    _out = _pac_sc_s4868;
    return;
  }
  /*CryptoManager.sk:68*/
  
void cutEncryptionMark_byte (Object self, Array_char bytesArray, ref Array_char _out)/*CryptoManager.sk:68*/
  {
    _out = new Array_char@array(length=(bytesArray.length) - 1);
    bit __sa26 = 1 < (bytesArray.length);
    int i = 1;
    while(__sa26)
    {
      _out.A[i - 1] = bytesArray.A[i];
      i = i + 1;
      __sa26 = i < (bytesArray.length);
    }
    return;
  }
  /*CryptoManager.sk:113*/
  
void decode_byte_String (Object self, Array_char string, Object charset, ref Object _out)/*CryptoManager.sk:113*/
  {
    int _out_s4823 = 0;
    String@meta(_out_s4823);
    Object@Object _out_s4825 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s4823), string, _out_s4825)//{};
    _out = _out_s4825;
    return;
  }
  /*CryptoManager.sk:85*/
  
void decrypt_String (Object self, Object encryptedMessage, ref Object _out)/*CryptoManager.sk:85*/
  {
    bit _out_s4815 = 0;
    isEncrypted_String@CryptoManager(self, encryptedMessage, _out_s4815);
    if(!(_out_s4815))/*CryptoManager.sk:86*/
    {
      _out = encryptedMessage;
      return;
    }
    Object@Object cipher_1 = null;
    Object@Object cipherText_s4827 = null;
    getCharset@CryptoManager(self, cipherText_s4827);
    Array_char@array cipherText_s4829 = null;
    encode_String_String@CryptoManager(self, encryptedMessage, cipherText_s4827, cipherText_s4829)//{};
    Array_char@array cipherText_s4859 = null;
    appendEncryptionMark_byte@CryptoManager(self, cipherText_s4829, cipherText_s4859);
    Array_char@array cipherText_s4861 = null;
    cryptInCipher_Cipher_byte@CryptoManager(self, cipher_1, cipherText_s4859, cipherText_s4861);
    Object@Object _out_s4819 = null;
    getCharset@CryptoManager(self, _out_s4819);
    Object@Object _out_s4821 = null;
    decode_byte_String@CryptoManager(self, cipherText_s4861, _out_s4819, _out_s4821)//{};
    _out = _out_s4821;
    return;
  }
  /*CryptoManager.sk:109*/
  
void encode_String_String (Object self, Object string, Object charset, ref Array_char _out)/*CryptoManager.sk:109*/
  {
    int _out_s4882 = 0;
    String@meta(_out_s4882);
    Array_char@array _pac_sc_s4883 = null;
    if((string.__cid) == _out_s4882)/*CryptoManager.sk:110*/
    {
      Array_char@array _out_s4885 = null;
      getBytes@String(string, _out_s4885);
      _pac_sc_s4883 = _out_s4885;
    }
    else
    {
      _pac_sc_s4883 = null;
    }
    _out = _pac_sc_s4883;
    return;
  }
  /*CryptoManager.sk:49*/
  
void encrypt_String (Object self, Object message, ref Object _out)/*CryptoManager.sk:49*/
  {
    Object@Object cipherText_s4827 = null;
    getCharset@CryptoManager(self, cipherText_s4827);
    Array_char@array cipherText_s4829 = null;
    encode_String_String@CryptoManager(self, message, cipherText_s4827, cipherText_s4829)//{};
    Object@Object cf_s4831 = null;
    getCipherFactory@CryptoManager(self, cf_s4831);
    int cipher_s4833 = 0;
    ConfigurableCipherFactory@meta(cipher_s4833);
    if((cf_s4831.__cid) == cipher_s4833)/*CryptoManager.sk:21*/
    {
      Object@Object cipher_s4836 = null;
      encryptionCipher@DefaultCipherFactory(cf_s4831, cipher_s4836);
    }
    else
    {
      int cipher_s4838 = 0;
      DefaultCipherFactory@meta(cipher_s4838);
      if((cf_s4831.__cid) == cipher_s4838)/*CryptoManager.sk:21*/
      {
        Object@Object cipher_s4841 = null;
        encryptionCipher@DefaultCipherFactory(cf_s4831, cipher_s4841);
      }
    }
    Array_char@array cipherText_s4853 = null;
    readEncoded_String@CryptoManager(self, message, cipherText_s4853);
    Array_char@array data_s4908 = cipherText_s4853;
    bit _out_s4855 = 0;
    isEncryptedByte_byte@CryptoManager(self, cipherText_s4853, _out_s4855);
    if(_out_s4855)/*CryptoManager.sk:30*/
    {
      Array_char@array cipherText_s4857 = null;
      cutEncryptionMark_byte@CryptoManager(self, cipherText_s4853, cipherText_s4857);
      data_s4908 = cipherText_s4857;
    }
    Object@Object _out_s4910 = null;
    getBasicCharset@CryptoManager(self, _out_s4910);
    Object@Object _out_s4912 = null;
    decode_byte_String@CryptoManager(self, data_s4908, _out_s4910, _out_s4912)//{};
    _out = _out_s4912;
    return;
  }
  /*CryptoManager.sk:117*/
  
void getBasicCharset (Object self, ref Object _out)/*CryptoManager.sk:117*/
  {
    _out = self.basicCharset_CryptoManager;
    return;
  }
  /*CryptoManager.sk:125*/
  
void getCharset (Object self, ref Object _out)/*CryptoManager.sk:125*/
  {
    _out = self.charset_CryptoManager;
    return;
  }
  /*CryptoManager.sk:137*/
  
void getCipherFactory (Object self, ref Object _out)/*CryptoManager.sk:137*/
  {
    _out = self.cipherFactory_CryptoManager;
    return;
  }
  /*CryptoManager.sk:133*/
  
void getEncryptedMark (Object self, ref char _out)/*CryptoManager.sk:133*/
  {
    _out = self.encryptedMark_CryptoManager;
    return;
  }
  /*CryptoManager.sk:81*/
  
void isEncryptedByte_byte (Object self, Array_char data, ref bit _out)/*CryptoManager.sk:81*/
  {
    char _out_s4874 = '\0';
    getEncryptedMark@CryptoManager(self, _out_s4874);
    _out = (data.A[0]) == _out_s4874;
    return;
  }
  /*CryptoManager.sk:93*/
  
void isEncrypted_String (Object self, Object message, ref bit _out)/*CryptoManager.sk:93*/
  {
    Object@Object cf_s4887 = null;
    getCipherFactory@CryptoManager(self, cf_s4887);
    int cipher_s4889 = 0;
    ConfigurableCipherFactory@meta(cipher_s4889);
    Object@Object _pac_sc_s4890 = null;
    if((cf_s4887.__cid) == cipher_s4889)/*CryptoManager.sk:95*/
    {
      Object@Object cipher_s4892 = null;
      decryptionCipher@DefaultCipherFactory(cf_s4887, cipher_s4892);
      _pac_sc_s4890 = cipher_s4892;
    }
    else
    {
      int cipher_s4894 = 0;
      DefaultCipherFactory@meta(cipher_s4894);
      Object@Object _pac_sc_s4895 = null;
      if((cf_s4887.__cid) == cipher_s4894)/*CryptoManager.sk:95*/
      {
        Object@Object cipher_s4897 = null;
        decryptionCipher@DefaultCipherFactory(cf_s4887, cipher_s4897);
        _pac_sc_s4895 = cipher_s4897;
      }
      else
      {
        _pac_sc_s4895 = null;
      }
      _pac_sc_s4890 = _pac_sc_s4895;
    }
    Array_char@array bytes_s4899 = null;
    readEncoded_String@CryptoManager(self, message, bytes_s4899);
    Array_char@array data_s4901 = null;
    cryptInCipher_Cipher_byte@CryptoManager(self, _pac_sc_s4890, bytes_s4899, data_s4901);
    bit _pac_sc_s4902_s4904 = 0;
    isUseEncryptionStrict@CryptoManager(self, _pac_sc_s4902_s4904);
    bit _pac_sc_s4902;
    _pac_sc_s4902 = !(_pac_sc_s4902_s4904);
    if(!(_pac_sc_s4902))/*CryptoManager.sk:98*/
    {
      bit _pac_sc_s4902_s4906 = 0;
      isEncryptedByte_byte@CryptoManager(self, data_s4901, _pac_sc_s4902_s4906);
      _pac_sc_s4902 = _pac_sc_s4902_s4906;
    }
    _out = _pac_sc_s4902;
    return;
  }
  /*CryptoManager.sk:145*/
  
void isUseEncryptionStrict (Object self, ref bit _out)/*CryptoManager.sk:145*/
  {
    _out = self.useEncryptionStrict_CryptoManager;
    return;
  }
  /*CryptoManager.sk:105*/
  
void processEscape_byte_boolean (Object self, Array_char data, bit escape, ref Array_char _out)/*CryptoManager.sk:105*/
  {
    _out = data;
    return;
  }
  /*CryptoManager.sk:76*/
  
void readEncoded_String (Object self, Object encrypted, ref Array_char _out)/*CryptoManager.sk:76*/
  {
    Object@Object bytes_s4876 = null;
    getBasicCharset@CryptoManager(self, bytes_s4876);
    Array_char@array bytes_s4878 = null;
    encode_String_String@CryptoManager(self, encrypted, bytes_s4876, bytes_s4878)//{};
    Array_char@array _out_s4880 = null;
    processEscape_byte_boolean@CryptoManager(self, bytes_s4878, 0, _out_s4880);
    _out = _out_s4880;
    return;
  }
  /* END PACKAGE CryptoManager*/
}
/* BEGIN PACKAGE CryptoCipherFactory_CipherProvider*/
package CryptoCipherFactory_CipherProvider{
  /* END PACKAGE CryptoCipherFactory_CipherProvider*/
}
/* BEGIN PACKAGE Properties*/
package Properties{
  /* END PACKAGE Properties*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /*System.sk:7*/
  
void arraycopy_byte_int_byte_int_int (Array_char src, int srcPos, Array_char dst, int dstPos, int length)/*System.sk:7*/
  {
    for(int i = srcPos; i < (srcPos + length); i = i + 1)/*Canonical*/
    {
      dst.A[dstPos + i] = src.A[i];
    }
  }
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE PrintStream*/
package PrintStream{
  /* END PACKAGE PrintStream*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE ICryptoManager*/
package ICryptoManager{
  /* END PACKAGE ICryptoManager*/
}
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE KeyStore*/
package KeyStore{
  /* END PACKAGE KeyStore*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE ConfigurableCipherFactory*/
package ConfigurableCipherFactory{
  /* END PACKAGE ConfigurableCipherFactory*/
}
/* BEGIN PACKAGE Utils*/
package Utils{
  /* END PACKAGE Utils*/
}
/* BEGIN PACKAGE BufferedReader*/
package BufferedReader{
  /* END PACKAGE BufferedReader*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    _out = self;
    return;
  }
  /*Cipher.sk:37*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Cipher.sk:37*/
  {
    int k_s5149 = 0;
    SecretKeySpec@meta(k_s5149);
    Array_char@array _pac_sc_s5150 = null;
    if((self.key_Cipher.__cid) == k_s5149)/*Cipher.sk:38*/
    {
      Array_char@array k_s5152 = null;
      getEncoded@SecretKeySpec(self.key_Cipher, k_s5152);
      _pac_sc_s5150 = k_s5152;
    }
    else
    {
      int k_s5154 = 0;
      KerberosKey@meta(k_s5154);
      Array_char@array _pac_sc_s5155 = null;
      if((self.key_Cipher.__cid) == k_s5154)/*Cipher.sk:38*/
      {
        Array_char@array k_s5157 = null;
        getEncoded@KerberosKey(self.key_Cipher, k_s5157);
        _pac_sc_s5155 = k_s5157;
      }
      else
      {
        _pac_sc_s5155 = null;
      }
      _pac_sc_s5150 = _pac_sc_s5155;
    }
    _out = new Array_char@array(length=text.length);
    if((_pac_sc_s5150.length) == 0)/*Cipher.sk:40*/
    {
      return;
    }
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:43*/
    {
      bit __sa30 = 0 < (text.length);
      int i = 0;
      while(__sa30)
      {
        _out.A[i] = (text.A[i]) + (_pac_sc_s5150.A[i % (_pac_sc_s5150.length)]);
        i = i + 1;
        __sa30 = i < (text.length);
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:48*/
      {
        bit __sa31 = 0 < (text.length);
        int i_0 = 0;
        while(__sa31)
        {
          _out.A[i_0] = (text.A[i_0]) - (_pac_sc_s5150.A[i_0 % (_pac_sc_s5150.length)]);
          i_0 = i_0 + 1;
          __sa31 = i_0 < (text.length);
        }
      }
    }
    return;
  }
  /*Cipher.sk:14*/
  
void getInstance_String (Object type, ref Object _out)/*Cipher.sk:14*/
  {
    int _out_s5159 = 0;
    Cipher@meta(_out_s5159);
    Object@Object _out_s5161 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s5159), type, _out_s5161)//{};
    _out = _out_s5161;
    return;
  }
  /*Cipher.sk:22*/
  
void init_int_Key (Object self, int opmode, Object key)/*Cipher.sk:22*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 6304
