SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/PasswordManager/../result_noax/sk_PasswordManagerTest/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 16
[SATBackend] MAX FUNC INLINING  = 2
estimated size of main__Wrapper_PasswordManagerTest
stmt cnt: 3
callee glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5461_HashMap : 1
callee main_PasswordManagerTest : 391

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_PasswordManagerTest
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/PasswordManager/../result_noax/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/PasswordManager/../result_noax/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 2 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/result_noax/tmp/sk_PasswordManagerTest/solution0-0 /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/result_noax/tmp/sk_PasswordManagerTest/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1520017186
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch4/test/axioms/examples/PasswordManager/result_noax/tmp/sk_PasswordManagerTest/input0.tmp
CREATING glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5461_HashMap
size = 3
after ba size = 3
CREATING main__Wrapper_PasswordManagerTest
size = 6
after ba size = 6
CREATING main__WrapperNospec_PasswordManagerTest
size = 0
after ba size = 0
CREATING main_PasswordManagerTest
Found Cycle of size 13; Breaking.
size = 2432
after ba size = 2432
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 76
after ba size = 76
CREATING PasswordManager_meta
size = 3
after ba size = 3
CREATING String_meta
size = 3
after ba size = 3
CREATING String_String_char_int_int_String
size = 415
after ba size = 415
CREATING PasswordManager_PasswordManager_String_PasswordManager
size = 264
after ba size = 264
CREATING addPassword_String_String_PasswordManager
size = 606
after ba size = 606
CREATING getPass_String_PasswordManager
size = 447
after ba size = 447
CREATING equals_Object_String
Found Cycle of size 5; Breaking.
size = 620
after ba size = 620
CREATING checkMasterPassword_String_PasswordManager
size = 292
after ba size = 292
CREATING Cryptographer_meta
size = 3
after ba size = 3
CREATING Cryptographer_Cryptographer_Cryptographer
size = 1281
after ba size = 1281
CREATING PasswordMap_meta
size = 3
after ba size = 3
CREATING PasswordMap_PasswordMap_PasswordMap
size = 529
after ba size = 529
CREATING encrypt_String_Cryptographer
size = 682
after ba size = 682
CREATING hash_String_Cryptographer
size = 210
after ba size = 210
CREATING add_String_String_PasswordMap
size = 263
after ba size = 263
CREATING get_String_PasswordMap
size = 103
after ba size = 103
CREATING decrypt_String_Cryptographer
size = 682
after ba size = 682
CREATING length_String
size = 83
after ba size = 83
CREATING SecureRandom_meta
size = 3
after ba size = 3
CREATING SecureRandom_SecureRandom_SecureRandom
size = 76
after ba size = 76
CREATING nextBytes_byte_SecureRandom
size = 286
after ba size = 286
CREATING SecretKeySpec_meta
size = 3
after ba size = 3
CREATING SecretKeySpec_SecretKeySpec_byte_String_SecretKeySpec
size = 87
after ba size = 87
CREATING IvParameterSpec_meta
size = 3
after ba size = 3
CREATING IvParameterSpec_IvParameterSpec_byte_IvParameterSpec
size = 79
after ba size = 79
CREATING getInstance_String_String_Cipher
size = 159
after ba size = 159
CREATING Cipher_meta
size = 3
after ba size = 3
CREATING init_int_SecretKey_IvParameterSpec_Cipher
size = 87
after ba size = 87
CREATING getInstance_String_Mac
size = 85
after ba size = 85
CREATING getBytes_String
size = 98
after ba size = 98
CREATING Mac_meta
size = 3
after ba size = 3
CREATING init_SecretKeySpec_Mac
size = 75
after ba size = 75
CREATING HashMap_meta
size = 3
after ba size = 3
CREATING HashMap_HashMap_HashMap
size = 93
after ba size = 93
CREATING doFinal_byte_Cipher
size = 1021
after ba size = 1021
CREATING String_String_byte_String
size = 246
after ba size = 246
CREATING doFinal_byte_Mac
size = 79
after ba size = 79
CREATING put_K_V_HashMap
size = 736
after ba size = 736
CREATING get_K_HashMap
Found Cycle of size 16; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 36; Breaking.
Found Cycle of size 42; Breaking.
Found Cycle of size 69; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 108; Breaking.
Found Cycle of size 122; Breaking.
Found Cycle of size 120; Breaking.
Found Cycle of size 122; Breaking.
Found Cycle of size 134; Breaking.
Found Cycle of size 133; Breaking.
Found Cycle of size 126; Breaking.
Found Cycle of size 124; Breaking.
Found Cycle of size 118; Breaking.
Found Cycle of size 116; Breaking.
Found Cycle of size 114; Breaking.
Found Cycle of size 112; Breaking.
Found Cycle of size 110; Breaking.
Found Cycle of size 103; Breaking.
Found Cycle of size 100; Breaking.
Found Cycle of size 94; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 105; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 92; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 83; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 73; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 62; Breaking.
Found Cycle of size 69; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 40; Breaking.
Found Cycle of size 38; Breaking.
Found Cycle of size 59; Breaking.
Found Cycle of size 27; Breaking.
Found Cycle of size 54; Breaking.
Found Cycle of size 22; Breaking.
Found Cycle of size 17; Breaking.
Found Cycle of size 17; Breaking.
Found Cycle of size 54; Breaking.
size = 1156
after ba size = 1156
CREATING Cipher_Cipher_String_Cipher
size = 88
after ba size = 88
CREATING Mac_Mac_Mac
size = 76
after ba size = 76
CREATING toString_String
size = 76
after ba size = 76
CREATING getBytes_String_String
Found Cycle of size 21; Breaking.
size = 301
after ba size = 301
CREATING KerberosKey_meta
size = 3
after ba size = 3
CREATING getEncoded_KerberosKey
size = 85
after ba size = 85
CREATING getEncoded_SecretKeySpec
size = 85
after ba size = 85
CREATING TreeMap_meta
size = 3
after ba size = 3
CREATING hashCode_Object
size = 77
after ba size = 77
CREATING KeyStore_meta
size = 3
after ba size = 3
CREATING FileOutputStream_meta
size = 3
after ba size = 3
CREATING Integer_meta
size = 3
after ba size = 3
CREATING hashCode_Integer
size = 83
after ba size = 83
CREATING System_meta
size = 3
after ba size = 3
CREATING BufferedWriter_meta
size = 3
after ba size = 3
CREATING HashMap_Node_meta
size = 3
after ba size = 3
CREATING LinkedList_meta
size = 3
after ba size = 3
CREATING StringBuilder_meta
size = 3
after ba size = 3
CREATING Stack_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_meta
size = 3
after ba size = 3
CREATING AbstractQueue_meta
size = 3
after ba size = 3
CREATING KeyGenerator_meta
size = 3
after ba size = 3
CREATING Arrays_meta
size = 3
after ba size = 3
CREATING BufferedReader_meta
size = 3
after ba size = 3
CREATING Collections_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING Float_meta
size = 3
after ba size = 3
CREATING Number_meta
size = 3
after ba size = 3
CREATING ArrayDeque_meta
size = 3
after ba size = 3
CREATING StringBuffer_meta
size = 3
after ba size = 3
CREATING FileReaderr_meta
size = 3
after ba size = 3
CREATING TreeSet_meta
size = 3
after ba size = 3
CREATING ArrayDeque_DequeNode_meta
size = 3
after ba size = 3
CREATING Assert_meta
size = 3
after ba size = 3
CREATING PrintStream_meta
size = 3
after ba size = 3
CREATING Properties_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_CipherProvider_meta
size = 3
after ba size = 3
CREATING hashCode_String
size = 902
after ba size = 902
CREATING HashSet_meta
size = 3
after ba size = 3
CREATING FileWriterr_meta
size = 3
after ba size = 3
CREATING Scanner_meta
size = 3
after ba size = 3
CREATING PasswordManagerTest_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING Utils_meta
size = 3
after ba size = 3
CREATING File_meta
size = 3
after ba size = 3
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING putVal_int_K_V_HashMap
size = 1254
after ba size = 1254
CREATING equals_Object_Object
size = 78
after ba size = 78
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 106
after ba size = 106
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 106
after ba size = 106
CREATING equals_Object_Float
size = 99
after ba size = 99
CREATING charAt_int_String
size = 113
after ba size = 113
CREATING resize_int_HashMap
Found Cycle of size 29; Breaking.
size = 4511
after ba size = 4511
CREATING HashMap_Node_HashMap_Node_HashMap_K_V_int_HashMap_Node
size = 90
after ba size = 90
CREATING intValue_Integer
size = 83
after ba size = 83
CREATING charValue_Character
size = 83
after ba size = 83
* before  EVERYTHING: main__WrapperNospec_PasswordManagerTest::SPEC nodes = 0	 main__Wrapper_PasswordManagerTest::SKETCH nodes = 6
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 2
 Inlining functions in the sketch.
inlined 2 new size =2145
inlined 25 new size =3918
inlined 26 new size =8028
Found Cycle of size 69; Breaking.
Found Cycle of size 114; Breaking.
Found Cycle of size 150; Breaking.
Found Cycle of size 111; Breaking.
Found Cycle of size 166; Breaking.
Found Cycle of size 168; Breaking.
Found Cycle of size 186; Breaking.
Found Cycle of size 174; Breaking.
Found Cycle of size 176; Breaking.
Found Cycle of size 184; Breaking.
Found Cycle of size 188; Breaking.
Found Cycle of size 148; Breaking.
Found Cycle of size 182; Breaking.
Found Cycle of size 142; Breaking.
Found Cycle of size 203; Breaking.
Found Cycle of size 160; Breaking.
Found Cycle of size 205; Breaking.
Found Cycle of size 144; Breaking.
Found Cycle of size 186; Breaking.
Found Cycle of size 180; Breaking.
Found Cycle of size 125; Breaking.
Found Cycle of size 119; Breaking.
Found Cycle of size 197; Breaking.
Found Cycle of size 139; Breaking.
Found Cycle of size 137; Breaking.
Found Cycle of size 167; Breaking.
Found Cycle of size 181; Breaking.
Found Cycle of size 177; Breaking.
Found Cycle of size 175; Breaking.
Found Cycle of size 173; Breaking.
Found Cycle of size 167; Breaking.
Found Cycle of size 157; Breaking.
Found Cycle of size 155; Breaking.
Found Cycle of size 153; Breaking.
Found Cycle of size 103; Breaking.
Found Cycle of size 147; Breaking.
Found Cycle of size 143; Breaking.
Found Cycle of size 93; Breaking.
Found Cycle of size 84; Breaking.
Found Cycle of size 126; Breaking.
Found Cycle of size 124; Breaking.
Found Cycle of size 122; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 109; Breaking.
Found Cycle of size 112; Breaking.
Found Cycle of size 111; Breaking.
Found Cycle of size 102; Breaking.
inlined 92 new size =16646
Found Cycle of size 147; Breaking.
Found Cycle of size 158; Breaking.
Found Cycle of size 149; Breaking.
Found Cycle of size 151; Breaking.
Found Cycle of size 173; Breaking.
Found Cycle of size 175; Breaking.
Found Cycle of size 183; Breaking.
Found Cycle of size 184; Breaking.
Found Cycle of size 177; Breaking.
Found Cycle of size 167; Breaking.
Found Cycle of size 165; Breaking.
Found Cycle of size 159; Breaking.
Found Cycle of size 153; Breaking.
Found Cycle of size 145; Breaking.
Found Cycle of size 285; Breaking.
Found Cycle of size 173; Breaking.
Found Cycle of size 87; Breaking.
Found Cycle of size 90; Breaking.
Found Cycle of size 92; Breaking.
Found Cycle of size 94; Breaking.
Found Cycle of size 96; Breaking.
Found Cycle of size 98; Breaking.
Found Cycle of size 104; Breaking.
Found Cycle of size 106; Breaking.
Found Cycle of size 113; Breaking.
Found Cycle of size 108; Breaking.
Found Cycle of size 102; Breaking.
Found Cycle of size 100; Breaking.
Found Cycle of size 86; Breaking.
Found Cycle of size 80; Breaking.
Found Cycle of size 60; Breaking.
inlined 248 new size =18699
inlined 280 new size =17955
inlined 24 new size =14624
inlined 0 new size =14624
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 14622
* Final Problem size: Problem nodes = 14622
  # OF CONTROLS:    18
 control_ints = 5 	 control_bits = 13
inputSize = 0	ctrlSize = 58
Random seeds = 1
!+ 0100000100100000100000010011010010000101000110001000000000
!+ H__4_329:0
H__3_329_328:1
H__3_329:0
H__1_329:0
H__0:72
H__2_329:8
H__1_329_328:0
H__2_329_328:89
H__3_332:1
H__4_332:0
H__3_332_328:0
H__1_332:0
H__2_332:394
H__1_332_328:0
H__2_332_328:4
H__4_329_328_329_328:0
H__4_332_328_332_328:0
H__5:0

BEG CHECK
 * After optims it became = 2 was 14622
Assert at String.sk:23 (1)
Simulation found a cex by random testing:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 0.02
!% 
!% 
BEG FIND
Level 1  intsize = 2
 * After optims it became = 14622 was 14622
 * After all optims it became = 14622
 finder  hits = 1636	 bstoreObjs=7062	 sstorePages=9
hitcount 	0	6693	2
hitcount 	1	80	2
hitcount 	2	29	3
hitcount 	3	21	2
hitcount 	4	99	1
hitcount 	5	9	2
hitcount 	6	89	2
hitcount 	7	2	1
hitcount 	8	14	3
hitcount 	9	2	3
hitcount 	10	6	3
hitcount 	11	4	1
hitcount 	12	6	3
hitcount 	13	2	2
hitcount 	15	3	2
hitcount 	19	2	1
hitcount 	31	1	3
bucketsPerDepth 	0	10
bucketsPerDepth 	1	55
bucketsPerDepth 	2	163
bucketsPerDepth 	3	287
bucketsPerDepth 	4	275
bucketsPerDepth 	5	156
bucketsPerDepth 	6	53
bucketsPerDepth 	7	21
bucketsPerDepth 	8	1
* TIME TO ADD INPUT :  0.137 ms 
DECISIONS START = 0
f# %assign: 5 clauses: 36979 learn: 9 restart: 1 decision: 1085 propagated: 12437
END FIND
!+ 1100100000000110111010000000000010010100000001100000000000
!+ H__4_329:1
H__3_329_328:1
H__3_329:0
H__1_329:0
H__0:1
H__2_329:187
H__1_329_328:0
H__2_329_328:0
H__3_332:1
H__4_332:0
H__3_332_328:0
H__1_332:1
H__2_332:2
H__1_332_328:1
H__2_332_328:1
H__4_329_328_329_328:0
H__4_332_328_332_328:0
H__5:0

BEG CHECK
 * After optims it became = 0 was 14622
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  1	ftime= 0.143	ctime= 0.022
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 0.143 CHECK TIME 0.042 TOTAL TIME 0.185
VALUES H__0: 1, H__1_329: 0, H__1_329_328: 0, H__1_332: 1, H__1_332_328: 1, H__2_329: 187, H__2_329_328: 0, H__2_332: 2, H__2_332_328: 1, H__3_329: 0, H__3_329_328: 1, H__3_332: 1, H__3_332_328: 0, H__4_329: 1, H__4_329_328_329_328: 0, H__4_332: 0, H__4_332_328_332_328: 0, H__5: 0, 
RESULT = 2  
**ROUND 0 : 0 Round time:  999.384 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  1000.02
Model building time (ms): 0.602
Solution time (ms):       999.384
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 1.219
      model building time (s) ---------> 0.0
      solution time (s) ---------------> 0.999
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE Cryptographer*/
package Cryptographer{
  /*Cryptographer.sk:3*/
  
void Cryptographer_Cryptographer (Object self, ref Object _out)/*Cryptographer.sk:3*/
  {
    int random_s139 = 0;
    SecureRandom@meta(random_s139);
    Object@Object random_s141 = null;
    SecureRandom_SecureRandom@SecureRandom(new Object@Object(__cid=random_s139), random_s141)//{};
    Array_char@array randomKey = new Array_char@array(length=16);
    int _out_s143 = 0;
    SecureRandom@meta(_out_s143);
    if((random_s141.__cid) == _out_s143)/*Cryptographer.sk:6*/
    {
      nextBytes_byte@SecureRandom(random_s141, randomKey);
    }
    int _out_s145 = 0;
    SecretKeySpec@meta(_out_s145);
    int _out_s147 = 0;
    String@meta(_out_s147);
    Object@Object _out_s149 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s147), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, _out_s149)//{};
    Object@Object _out_s151 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=_out_s145), randomKey, _out_s149, _out_s151)//{};
    self.GCMSecretKey_Cryptographer = _out_s151;
    self.randomIv_Cryptographer = new Array_char@array(length=16);
    int _out_s153 = 0;
    SecureRandom@meta(_out_s153);
    if((random_s141.__cid) == _out_s153)/*Cryptographer.sk:10*/
    {
      nextBytes_byte@SecureRandom(random_s141, self.randomIv_Cryptographer);
    }
    int _out_s155 = 0;
    IvParameterSpec@meta(_out_s155);
    Object@Object _out_s157 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=_out_s155), self.randomIv_Cryptographer, _out_s157)//{};
    self.ivParameterSpec_Cryptographer = _out_s157;
    int _out_s159 = 0;
    String@meta(_out_s159);
    Object@Object _out_s161 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s159), new Array_char@array(length=18, A={'A','E','S','/','G','C','M','/','N','o','P','a','d','d','i','n','g','\0'}), 0, 17, _out_s161)//{};
    int _out_s163 = 0;
    String@meta(_out_s163);
    Object@Object _out_s165 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s163), new Array_char@array(length=3, A={'B','C','\0'}), 0, 2, _out_s165)//{};
    Object@Object _out_s167 = null;
    getInstance_String_String@Cipher(_out_s161, _out_s165, _out_s167)//{};
    self.myCypherOut_Cryptographer = _out_s167;
    int _out_s169 = 0;
    Cipher@meta(_out_s169);
    if((self.myCypherOut_Cryptographer.__cid) == _out_s169)/*Cryptographer.sk:14*/
    {
      init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, 1, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
    }
    int secret_s171 = 0;
    String@meta(secret_s171);
    Object@Object secret_s173 = null;
    String_String_char_int_int@String(new Object@Object(__cid=secret_s171), new Array_char@array(length=7, A={'s','e','c','r','e','t','\0'}), 0, 6, secret_s173)//{};
    int _out_s175 = 0;
    String@meta(_out_s175);
    Object@Object _out_s177 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s175), new Array_char@array(length=11, A={'H','m','a','c','S','H','A','2','5','6','\0'}), 0, 10, _out_s177)//{};
    Object@Object _out_s179 = null;
    getInstance_String@Mac(_out_s177, _out_s179)//{};
    self.sha256_HMAC_Cryptographer = _out_s179;
    int _out_s181 = 0;
    SecretKeySpec@meta(_out_s181);
    int _out_s183 = 0;
    String@meta(_out_s183);
    Array_char@array _pac_sc_s184 = null;
    if((secret_s173.__cid) == _out_s183)/*Cryptographer.sk:18*/
    {
      Array_char@array _out_s186 = null;
      getBytes@String(secret_s173, _out_s186);
      _pac_sc_s184 = _out_s186;
    }
    else
    {
      _pac_sc_s184 = null;
    }
    int _out_s188 = 0;
    String@meta(_out_s188);
    Object@Object _out_s190 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s188), new Array_char@array(length=11, A={'H','m','a','c','S','H','A','2','5','6','\0'}), 0, 10, _out_s190)//{};
    Object@Object _out_s192 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=_out_s181), _pac_sc_s184, _out_s190, _out_s192)//{};
    self.Hash_secret_key_Cryptographer = _out_s192;
    int _out_s194 = 0;
    Mac@meta(_out_s194);
    if((self.sha256_HMAC_Cryptographer.__cid) == _out_s194)/*Cryptographer.sk:19*/
    {
      init_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer);
    }
    self.MAX_LENGTH_PASSWORD_Cryptographer = 16;
    _out = self;
    return;
  }
  /*Cryptographer.sk:43*/
  
void decrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:43*/
  {
    int _out_s119 = 0;
    Cipher@meta(_out_s119);
    if((self.myCypherOut_Cryptographer.__cid) == _out_s119)/*Cryptographer.sk:31*/
    {
      init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, 2, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
    }
    int cipherText_s121 = 0;
    Cipher@meta(cipherText_s121);
    Array_char@array _pac_sc_s122 = null;
    if((self.myCypherOut_Cryptographer.__cid) == cipherText_s121)/*Cryptographer.sk:33*/
    {
      int cipherText_s124 = 0;
      String@meta(cipherText_s124);
      Array_char@array _pac_sc_s125 = null;
      if((plainText.__cid) == cipherText_s124)/*Cryptographer.sk:33*/
      {
        Array_char@array cipherText_s127 = null;
        getBytes@String(plainText, cipherText_s127);
        _pac_sc_s125 = cipherText_s127;
      }
      else
      {
        _pac_sc_s125 = null;
      }
      Array_char@array cipherText_s129 = null;
      doFinal_byte@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s125, cipherText_s129)//{};
      _pac_sc_s122 = cipherText_s129;
    }
    else
    {
      _pac_sc_s122 = null;
    }
    int _out_s115 = 0;
    String@meta(_out_s115);
    Object@Object _out_s117 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s115), _pac_sc_s122, _out_s117)//{};
    _out = _out_s117;
    return;
  }
  /*Cryptographer.sk:38*/
  
void encrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:38*/
  {
    int cipherText_s121 = 0;
    Cipher@meta(cipherText_s121);
    Array_char@array _pac_sc_s122 = null;
    if((self.myCypherOut_Cryptographer.__cid) == cipherText_s121)/*Cryptographer.sk:33*/
    {
      int cipherText_s124 = 0;
      String@meta(cipherText_s124);
      Array_char@array _pac_sc_s125 = null;
      if((plainText.__cid) == cipherText_s124)/*Cryptographer.sk:33*/
      {
        Array_char@array cipherText_s127 = null;
        getBytes@String(plainText, cipherText_s127);
        _pac_sc_s125 = cipherText_s127;
      }
      else
      {
        _pac_sc_s125 = null;
      }
      Array_char@array cipherText_s129 = null;
      doFinal_byte@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s125, cipherText_s129)//{};
      _pac_sc_s122 = cipherText_s129;
    }
    else
    {
      _pac_sc_s122 = null;
    }
    int _out_s135 = 0;
    String@meta(_out_s135);
    Object@Object _out_s137 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s135), _pac_sc_s122, _out_s137)//{};
    _out = _out_s137;
    return;
  }
  /*Cryptographer.sk:25*/
  
void hash_String (Object self, Object plainTxt, ref Object _out)/*Cryptographer.sk:25*/
  {
    int _out_s99 = 0;
    String@meta(_out_s99);
    int _out_s101 = 0;
    Mac@meta(_out_s101);
    Array_char@array _pac_sc_s102 = null;
    if((self.sha256_HMAC_Cryptographer.__cid) == _out_s101)/*Cryptographer.sk:26*/
    {
      int _out_s104 = 0;
      String@meta(_out_s104);
      Array_char@array _pac_sc_s105 = null;
      if((plainTxt.__cid) == _out_s104)/*Cryptographer.sk:26*/
      {
        Array_char@array _out_s107 = null;
        getBytes@String(plainTxt, _out_s107);
        _pac_sc_s105 = _out_s107;
      }
      else
      {
        _pac_sc_s105 = null;
      }
      Array_char@array _out_s109 = null;
      doFinal_byte@Mac(self.sha256_HMAC_Cryptographer, _pac_sc_s105, _out_s109)//{};
      _pac_sc_s102 = _out_s109;
    }
    else
    {
      _pac_sc_s102 = null;
    }
    Object@Object _out_s111 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s99), _pac_sc_s102, _out_s111)//{};
    _out = _out_s111;
    return;
  }
  /* END PACKAGE Cryptographer*/
}
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE PrivateKey*/
package PrivateKey{
  /* END PACKAGE PrivateKey*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:7*/
  
void HashMap_HashMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5329)/*HashMap.sk:7*/
  {
    self.elementData_HashMap = new Array_Object@array(length=DEFAULT_INITIAL_CAPACITY__HashMap_s5329);
    self.numPairs_HashMap = 0;
    self.capacity_HashMap = DEFAULT_INITIAL_CAPACITY__HashMap_s5329;
    _out = self;
    return;
  }
  /*HashMap.sk:62*/
  
void get_K (Object self, Object key, ref Object _out)/*HashMap.sk:62*/
  {
    int hashMod_s196 = 0;
    TreeMap@meta(hashMod_s196);
    int _pac_sc_s197 = 0;
    if((key.__cid) == hashMod_s196)/*HashMap.sk:63*/
    {
      int hashMod_s199 = 0;
      hashCode@Object(key, hashMod_s199);
      _pac_sc_s197 = hashMod_s199;
    }
    else
    {
      int hashMod_s201 = 0;
      KeyStore@meta(hashMod_s201);
      int _pac_sc_s202 = 0;
      if((key.__cid) == hashMod_s201)/*HashMap.sk:63*/
      {
        int hashMod_s204 = 0;
        hashCode@Object(key, hashMod_s204);
        _pac_sc_s202 = hashMod_s204;
      }
      else
      {
        int hashMod_s206 = 0;
        FileOutputStream@meta(hashMod_s206);
        int _pac_sc_s207 = 0;
        if((key.__cid) == hashMod_s206)/*HashMap.sk:63*/
        {
          int hashMod_s209 = 0;
          hashCode@Object(key, hashMod_s209);
          _pac_sc_s207 = hashMod_s209;
        }
        else
        {
          int hashMod_s211 = 0;
          Integer@meta(hashMod_s211);
          int _pac_sc_s212 = 0;
          if((key.__cid) == hashMod_s211)/*HashMap.sk:63*/
          {
            int hashMod_s214 = 0;
            hashCode@Integer(key, hashMod_s214);
            _pac_sc_s212 = hashMod_s214;
          }
          else
          {
            int hashMod_s216 = 0;
            System@meta(hashMod_s216);
            int _pac_sc_s217 = 0;
            if((key.__cid) == hashMod_s216)/*HashMap.sk:63*/
            {
              int hashMod_s219 = 0;
              hashCode@Object(key, hashMod_s219);
              _pac_sc_s217 = hashMod_s219;
            }
            else
            {
              int hashMod_s221 = 0;
              BufferedWriter@meta(hashMod_s221);
              int _pac_sc_s222 = 0;
              if((key.__cid) == hashMod_s221)/*HashMap.sk:63*/
              {
                int hashMod_s224 = 0;
                hashCode@Object(key, hashMod_s224);
                _pac_sc_s222 = hashMod_s224;
              }
              else
              {
                int hashMod_s226 = 0;
                HashMap_Node@meta(hashMod_s226);
                int _pac_sc_s227 = 0;
                if((key.__cid) == hashMod_s226)/*HashMap.sk:63*/
                {
                  int hashMod_s229 = 0;
                  hashCode@Object(key, hashMod_s229);
                  _pac_sc_s227 = hashMod_s229;
                }
                else
                {
                  int hashMod_s231 = 0;
                  KerberosKey@meta(hashMod_s231);
                  int _pac_sc_s232 = 0;
                  if((key.__cid) == hashMod_s231)/*HashMap.sk:63*/
                  {
                    int hashMod_s234 = 0;
                    hashCode@Object(key, hashMod_s234);
                    _pac_sc_s232 = hashMod_s234;
                  }
                  else
                  {
                    int hashMod_s236 = 0;
                    LinkedList@meta(hashMod_s236);
                    int _pac_sc_s237 = 0;
                    if((key.__cid) == hashMod_s236)/*HashMap.sk:63*/
                    {
                      int hashMod_s239 = 0;
                      hashCode@Object(key, hashMod_s239);
                      _pac_sc_s237 = hashMod_s239;
                    }
                    else
                    {
                      int hashMod_s241 = 0;
                      StringBuilder@meta(hashMod_s241);
                      int _pac_sc_s242 = 0;
                      if((key.__cid) == hashMod_s241)/*HashMap.sk:63*/
                      {
                        int hashMod_s244 = 0;
                        hashCode@Object(key, hashMod_s244);
                        _pac_sc_s242 = hashMod_s244;
                      }
                      else
                      {
                        int hashMod_s246 = 0;
                        Stack@meta(hashMod_s246);
                        int _pac_sc_s247 = 0;
                        if((key.__cid) == hashMod_s246)/*HashMap.sk:63*/
                        {
                          int hashMod_s249 = 0;
                          hashCode@Object(key, hashMod_s249);
                          _pac_sc_s247 = hashMod_s249;
                        }
                        else
                        {
                          int hashMod_s251 = 0;
                          CryptoCipherFactory@meta(hashMod_s251);
                          int _pac_sc_s252 = 0;
                          if((key.__cid) == hashMod_s251)/*HashMap.sk:63*/
                          {
                            int hashMod_s254 = 0;
                            hashCode@Object(key, hashMod_s254);
                            _pac_sc_s252 = hashMod_s254;
                          }
                          else
                          {
                            int hashMod_s256 = 0;
                            IvParameterSpec@meta(hashMod_s256);
                            int _pac_sc_s257 = 0;
                            if((key.__cid) == hashMod_s256)/*HashMap.sk:63*/
                            {
                              int hashMod_s259 = 0;
                              hashCode@Object(key, hashMod_s259);
                              _pac_sc_s257 = hashMod_s259;
                            }
                            else
                            {
                              int hashMod_s261 = 0;
                              AbstractQueue@meta(hashMod_s261);
                              int _pac_sc_s262 = 0;
                              if((key.__cid) == hashMod_s261)/*HashMap.sk:63*/
                              {
                                int hashMod_s264 = 0;
                                hashCode@Object(key, hashMod_s264);
                                _pac_sc_s262 = hashMod_s264;
                              }
                              else
                              {
                                int hashMod_s266 = 0;
                                PasswordManager@meta(hashMod_s266);
                                int _pac_sc_s267 = 0;
                                if((key.__cid) == hashMod_s266)/*HashMap.sk:63*/
                                {
                                  int hashMod_s269 = 0;
                                  hashCode@Object(key, hashMod_s269);
                                  _pac_sc_s267 = hashMod_s269;
                                }
                                else
                                {
                                  int hashMod_s271 = 0;
                                  KeyGenerator@meta(hashMod_s271);
                                  int _pac_sc_s272 = 0;
                                  if((key.__cid) == hashMod_s271)/*HashMap.sk:63*/
                                  {
                                    int hashMod_s274 = 0;
                                    hashCode@Object(key, hashMod_s274);
                                    _pac_sc_s272 = hashMod_s274;
                                  }
                                  else
                                  {
                                    int hashMod_s276 = 0;
                                    PasswordMap@meta(hashMod_s276);
                                    int _pac_sc_s277 = 0;
                                    if((key.__cid) == hashMod_s276)/*HashMap.sk:63*/
                                    {
                                      int hashMod_s279 = 0;
                                      hashCode@Object(key, hashMod_s279);
                                      _pac_sc_s277 = hashMod_s279;
                                    }
                                    else
                                    {
                                      int hashMod_s281 = 0;
                                      Arrays@meta(hashMod_s281);
                                      int _pac_sc_s282 = 0;
                                      if((key.__cid) == hashMod_s281)/*HashMap.sk:63*/
                                      {
                                        int hashMod_s284 = 0;
                                        hashCode@Object(key, hashMod_s284);
                                        _pac_sc_s282 = hashMod_s284;
                                      }
                                      else
                                      {
                                        int hashMod_s286 = 0;
                                        BufferedReader@meta(hashMod_s286);
                                        int _pac_sc_s287 = 0;
                                        if((key.__cid) == hashMod_s286)/*HashMap.sk:63*/
                                        {
                                          int hashMod_s289 = 0;
                                          hashCode@Object(key, hashMod_s289);
                                          _pac_sc_s287 = hashMod_s289;
                                        }
                                        else
                                        {
                                          int hashMod_s291 = 0;
                                          Collections@meta(hashMod_s291);
                                          int _pac_sc_s292 = 0;
                                          if((key.__cid) == hashMod_s291)/*HashMap.sk:63*/
                                          {
                                            int hashMod_s294 = 0;
                                            hashCode@Object(key, hashMod_s294);
                                            _pac_sc_s292 = hashMod_s294;
                                          }
                                          else
                                          {
                                            int hashMod_s296 = 0;
                                            Mac@meta(hashMod_s296);
                                            int _pac_sc_s297 = 0;
                                            if((key.__cid) == hashMod_s296)/*HashMap.sk:63*/
                                            {
                                              int hashMod_s299 = 0;
                                              hashCode@Object(key, hashMod_s299);
                                              _pac_sc_s297 = hashMod_s299;
                                            }
                                            else
                                            {
                                              int hashMod_s301 = 0;
                                              Character@meta(hashMod_s301);
                                              int _pac_sc_s302 = 0;
                                              if((key.__cid) == hashMod_s301)/*HashMap.sk:63*/
                                              {
                                                int hashMod_s304 = 0;
                                                hashCode@Object(key, hashMod_s304);
                                                _pac_sc_s302 = hashMod_s304;
                                              }
                                              else
                                              {
                                                int hashMod_s306 = 0;
                                                Float@meta(hashMod_s306);
                                                int _pac_sc_s307 = 0;
                                                if((key.__cid) == hashMod_s306)/*HashMap.sk:63*/
                                                {
                                                  int hashMod_s309 = 0;
                                                  hashCode@Object(key, hashMod_s309);
                                                  _pac_sc_s307 = hashMod_s309;
                                                }
                                                else
                                                {
                                                  int hashMod_s311 = 0;
                                                  Number@meta(hashMod_s311);
                                                  int _pac_sc_s312 = 0;
                                                  if((key.__cid) == hashMod_s311)/*HashMap.sk:63*/
                                                  {
                                                    int hashMod_s314 = 0;
                                                    hashCode@Object(key, hashMod_s314);
                                                    _pac_sc_s312 = hashMod_s314;
                                                  }
                                                  else
                                                  {
                                                    int hashMod_s316 = 0;
                                                    ArrayDeque@meta(hashMod_s316);
                                                    int _pac_sc_s317 = 0;
                                                    if((key.__cid) == hashMod_s316)/*HashMap.sk:63*/
                                                    {
                                                      int hashMod_s319 = 0;
                                                      hashCode@Object(key, hashMod_s319);
                                                      _pac_sc_s317 = hashMod_s319;
                                                    }
                                                    else
                                                    {
                                                      int hashMod_s321 = 0;
                                                      StringBuffer@meta(hashMod_s321);
                                                      int _pac_sc_s322 = 0;
                                                      if((key.__cid) == hashMod_s321)/*HashMap.sk:63*/
                                                      {
                                                        int hashMod_s324 = 0;
                                                        hashCode@Object(key, hashMod_s324);
                                                        _pac_sc_s322 = hashMod_s324;
                                                      }
                                                      else
                                                      {
                                                        int hashMod_s326 = 0;
                                                        Cryptographer@meta(hashMod_s326);
                                                        int _pac_sc_s327 = 0;
                                                        if((key.__cid) == hashMod_s326)/*HashMap.sk:63*/
                                                        {
                                                          int hashMod_s329 = 0;
                                                          hashCode@Object(key, hashMod_s329);
                                                          _pac_sc_s327 = hashMod_s329;
                                                        }
                                                        else
                                                        {
                                                          int hashMod_s331 = 0;
                                                          FileReaderr@meta(hashMod_s331);
                                                          int _pac_sc_s332 = 0;
                                                          if((key.__cid) == hashMod_s331)/*HashMap.sk:63*/
                                                          {
                                                            int hashMod_s334 = 0;
                                                            hashCode@Object(key, hashMod_s334);
                                                            _pac_sc_s332 = hashMod_s334;
                                                          }
                                                          else
                                                          {
                                                            int hashMod_s336 = 0;
                                                            TreeSet@meta(hashMod_s336);
                                                            int _pac_sc_s337 = 0;
                                                            if((key.__cid) == hashMod_s336)/*HashMap.sk:63*/
                                                            {
                                                              int hashMod_s339 = 0;
                                                              hashCode@Object(key, hashMod_s339);
                                                              _pac_sc_s337 = hashMod_s339;
                                                            }
                                                            else
                                                            {
                                                              int hashMod_s341 = 0;
                                                              ArrayDeque_DequeNode@meta(hashMod_s341);
                                                              int _pac_sc_s342 = 0;
                                                              if((key.__cid) == hashMod_s341)/*HashMap.sk:63*/
                                                              {
                                                                int hashMod_s344 = 0;
                                                                hashCode@Object(key, hashMod_s344);
                                                                _pac_sc_s342 = hashMod_s344;
                                                              }
                                                              else
                                                              {
                                                                int hashMod_s346 = 0;
                                                                Assert@meta(hashMod_s346);
                                                                int _pac_sc_s347 = 0;
                                                                if((key.__cid) == hashMod_s346)/*HashMap.sk:63*/
                                                                {
                                                                  int hashMod_s349 = 0;
                                                                  hashCode@Object(key, hashMod_s349);
                                                                  _pac_sc_s347 = hashMod_s349;
                                                                }
                                                                else
                                                                {
                                                                  int hashMod_s351 = 0;
                                                                  PrintStream@meta(hashMod_s351);
                                                                  int _pac_sc_s352 = 0;
                                                                  if((key.__cid) == hashMod_s351)/*HashMap.sk:63*/
                                                                  {
                                                                    int hashMod_s354 = 0;
                                                                    hashCode@Object(key, hashMod_s354);
                                                                    _pac_sc_s352 = hashMod_s354;
                                                                  }
                                                                  else
                                                                  {
                                                                    int hashMod_s356 = 0;
                                                                    Properties@meta(hashMod_s356);
                                                                    int _pac_sc_s357 = 0;
                                                                    if((key.__cid) == hashMod_s356)/*HashMap.sk:63*/
                                                                    {
                                                                      int hashMod_s359 = 0;
                                                                      hashCode@Object(key, hashMod_s359);
                                                                      _pac_sc_s357 = hashMod_s359;
                                                                    }
                                                                    else
                                                                    {
                                                                      int hashMod_s361 = 0;
                                                                      CryptoCipherFactory_CipherProvider@meta(hashMod_s361);
                                                                      int _pac_sc_s362 = 0;
                                                                      if((key.__cid) == hashMod_s361)/*HashMap.sk:63*/
                                                                      {
                                                                        int hashMod_s364 = 0;
                                                                        hashCode@Object(key, hashMod_s364);
                                                                        _pac_sc_s362 = hashMod_s364;
                                                                      }
                                                                      else
                                                                      {
                                                                        int hashMod_s366 = 0;
                                                                        String@meta(hashMod_s366);
                                                                        int _pac_sc_s367 = 0;
                                                                        if((key.__cid) == hashMod_s366)/*HashMap.sk:63*/
                                                                        {
                                                                          int hashMod_s369 = 0;
                                                                          hashCode@String(key, hashMod_s369);
                                                                          _pac_sc_s367 = hashMod_s369;
                                                                        }
                                                                        else
                                                                        {
                                                                          int hashMod_s371 = 0;
                                                                          HashSet@meta(hashMod_s371);
                                                                          int _pac_sc_s372 = 0;
                                                                          if((key.__cid) == hashMod_s371)/*HashMap.sk:63*/
                                                                          {
                                                                            int hashMod_s374 = 0;
                                                                            hashCode@Object(key, hashMod_s374);
                                                                            _pac_sc_s372 = hashMod_s374;
                                                                          }
                                                                          else
                                                                          {
                                                                            int hashMod_s376 = 0;
                                                                            FileWriterr@meta(hashMod_s376);
                                                                            int _pac_sc_s377 = 0;
                                                                            if((key.__cid) == hashMod_s376)/*HashMap.sk:63*/
                                                                            {
                                                                              int hashMod_s379 = 0;
                                                                              hashCode@Object(key, hashMod_s379);
                                                                              _pac_sc_s377 = hashMod_s379;
                                                                            }
                                                                            else
                                                                            {
                                                                              int hashMod_s381 = 0;
                                                                              Scanner@meta(hashMod_s381);
                                                                              int _pac_sc_s382 = 0;
                                                                              if((key.__cid) == hashMod_s381)/*HashMap.sk:63*/
                                                                              {
                                                                                int hashMod_s384 = 0;
                                                                                hashCode@Object(key, hashMod_s384);
                                                                                _pac_sc_s382 = hashMod_s384;
                                                                              }
                                                                              else
                                                                              {
                                                                                int hashMod_s386 = 0;
                                                                                Cipher@meta(hashMod_s386);
                                                                                int _pac_sc_s387 = 0;
                                                                                if((key.__cid) == hashMod_s386)/*HashMap.sk:63*/
                                                                                {
                                                                                  int hashMod_s389 = 0;
                                                                                  hashCode@Object(key, hashMod_s389);
                                                                                  _pac_sc_s387 = hashMod_s389;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int hashMod_s391 = 0;
                                                                                  PasswordManagerTest@meta(hashMod_s391);
                                                                                  int _pac_sc_s392 = 0;
                                                                                  if((key.__cid) == hashMod_s391)/*HashMap.sk:63*/
                                                                                  {
                                                                                    int hashMod_s394 = 0;
                                                                                    hashCode@Object(key, hashMod_s394);
                                                                                    _pac_sc_s392 = hashMod_s394;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int hashMod_s396 = 0;
                                                                                    ArrayList@meta(hashMod_s396);
                                                                                    int _pac_sc_s397 = 0;
                                                                                    if((key.__cid) == hashMod_s396)/*HashMap.sk:63*/
                                                                                    {
                                                                                      int hashMod_s399 = 0;
                                                                                      hashCode@Object(key, hashMod_s399);
                                                                                      _pac_sc_s397 = hashMod_s399;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int hashMod_s401 = 0;
                                                                                      Utils@meta(hashMod_s401);
                                                                                      int _pac_sc_s402 = 0;
                                                                                      if((key.__cid) == hashMod_s401)/*HashMap.sk:63*/
                                                                                      {
                                                                                        int hashMod_s404 = 0;
                                                                                        hashCode@Object(key, hashMod_s404);
                                                                                        _pac_sc_s402 = hashMod_s404;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int hashMod_s406 = 0;
                                                                                        SecretKeySpec@meta(hashMod_s406);
                                                                                        int _pac_sc_s407 = 0;
                                                                                        if((key.__cid) == hashMod_s406)/*HashMap.sk:63*/
                                                                                        {
                                                                                          int hashMod_s409 = 0;
                                                                                          hashCode@Object(key, hashMod_s409);
                                                                                          _pac_sc_s407 = hashMod_s409;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int hashMod_s411 = 0;
                                                                                          SecureRandom@meta(hashMod_s411);
                                                                                          int _pac_sc_s412 = 0;
                                                                                          if((key.__cid) == hashMod_s411)/*HashMap.sk:63*/
                                                                                          {
                                                                                            int hashMod_s414 = 0;
                                                                                            hashCode@Object(key, hashMod_s414);
                                                                                            _pac_sc_s412 = hashMod_s414;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int hashMod_s416 = 0;
                                                                                            File@meta(hashMod_s416);
                                                                                            int _pac_sc_s417 = 0;
                                                                                            if((key.__cid) == hashMod_s416)/*HashMap.sk:63*/
                                                                                            {
                                                                                              int hashMod_s419 = 0;
                                                                                              hashCode@Object(key, hashMod_s419);
                                                                                              _pac_sc_s417 = hashMod_s419;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int hashMod_s421 = 0;
                                                                                              Boolean@meta(hashMod_s421);
                                                                                              int _pac_sc_s422 = 0;
                                                                                              if((key.__cid) == hashMod_s421)/*HashMap.sk:63*/
                                                                                              {
                                                                                                int hashMod_s424 = 0;
                                                                                                hashCode@Object(key, hashMod_s424);
                                                                                                _pac_sc_s422 = hashMod_s424;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int hashMod_s426 = 0;
                                                                                                Object@meta(hashMod_s426);
                                                                                                int _pac_sc_s427 = 0;
                                                                                                if((key.__cid) == hashMod_s426)/*HashMap.sk:63*/
                                                                                                {
                                                                                                  int hashMod_s429 = 0;
                                                                                                  hashCode@Object(key, hashMod_s429);
                                                                                                  _pac_sc_s427 = hashMod_s429;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  _pac_sc_s427 = 0;
                                                                                                }
                                                                                                _pac_sc_s422 = _pac_sc_s427;
                                                                                              }
                                                                                              _pac_sc_s417 = _pac_sc_s422;
                                                                                            }
                                                                                            _pac_sc_s412 = _pac_sc_s417;
                                                                                          }
                                                                                          _pac_sc_s407 = _pac_sc_s412;
                                                                                        }
                                                                                        _pac_sc_s402 = _pac_sc_s407;
                                                                                      }
                                                                                      _pac_sc_s397 = _pac_sc_s402;
                                                                                    }
                                                                                    _pac_sc_s392 = _pac_sc_s397;
                                                                                  }
                                                                                  _pac_sc_s387 = _pac_sc_s392;
                                                                                }
                                                                                _pac_sc_s382 = _pac_sc_s387;
                                                                              }
                                                                              _pac_sc_s377 = _pac_sc_s382;
                                                                            }
                                                                            _pac_sc_s372 = _pac_sc_s377;
                                                                          }
                                                                          _pac_sc_s367 = _pac_sc_s372;
                                                                        }
                                                                        _pac_sc_s362 = _pac_sc_s367;
                                                                      }
                                                                      _pac_sc_s357 = _pac_sc_s362;
                                                                    }
                                                                    _pac_sc_s352 = _pac_sc_s357;
                                                                  }
                                                                  _pac_sc_s347 = _pac_sc_s352;
                                                                }
                                                                _pac_sc_s342 = _pac_sc_s347;
                                                              }
                                                              _pac_sc_s337 = _pac_sc_s342;
                                                            }
                                                            _pac_sc_s332 = _pac_sc_s337;
                                                          }
                                                          _pac_sc_s327 = _pac_sc_s332;
                                                        }
                                                        _pac_sc_s322 = _pac_sc_s327;
                                                      }
                                                      _pac_sc_s317 = _pac_sc_s322;
                                                    }
                                                    _pac_sc_s312 = _pac_sc_s317;
                                                  }
                                                  _pac_sc_s307 = _pac_sc_s312;
                                                }
                                                _pac_sc_s302 = _pac_sc_s307;
                                              }
                                              _pac_sc_s297 = _pac_sc_s302;
                                            }
                                            _pac_sc_s292 = _pac_sc_s297;
                                          }
                                          _pac_sc_s287 = _pac_sc_s292;
                                        }
                                        _pac_sc_s282 = _pac_sc_s287;
                                      }
                                      _pac_sc_s277 = _pac_sc_s282;
                                    }
                                    _pac_sc_s272 = _pac_sc_s277;
                                  }
                                  _pac_sc_s267 = _pac_sc_s272;
                                }
                                _pac_sc_s262 = _pac_sc_s267;
                              }
                              _pac_sc_s257 = _pac_sc_s262;
                            }
                            _pac_sc_s252 = _pac_sc_s257;
                          }
                          _pac_sc_s247 = _pac_sc_s252;
                        }
                        _pac_sc_s242 = _pac_sc_s247;
                      }
                      _pac_sc_s237 = _pac_sc_s242;
                    }
                    _pac_sc_s232 = _pac_sc_s237;
                  }
                  _pac_sc_s227 = _pac_sc_s232;
                }
                _pac_sc_s222 = _pac_sc_s227;
              }
              _pac_sc_s217 = _pac_sc_s222;
            }
            _pac_sc_s212 = _pac_sc_s217;
          }
          _pac_sc_s207 = _pac_sc_s212;
        }
        _pac_sc_s202 = _pac_sc_s207;
      }
      _pac_sc_s197 = _pac_sc_s202;
    }
    int hashMod = _pac_sc_s197 % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:64*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:68*/
    {
      int _out_s431 = 0;
      TreeMap@meta(_out_s431);
      bit _pac_sc_s432 = 0;
      if((key.__cid) == _out_s431)/*HashMap.sk:69*/
      {
        bit _out_s434 = 0;
        equals_Object@Object(key, node.key_HashMap_Node, _out_s434);
        _pac_sc_s432 = _out_s434;
      }
      else
      {
        int _out_s436 = 0;
        KeyStore@meta(_out_s436);
        bit _pac_sc_s437 = 0;
        if((key.__cid) == _out_s436)/*HashMap.sk:69*/
        {
          bit _out_s439 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _out_s439);
          _pac_sc_s437 = _out_s439;
        }
        else
        {
          int _out_s441 = 0;
          FileOutputStream@meta(_out_s441);
          bit _pac_sc_s442 = 0;
          if((key.__cid) == _out_s441)/*HashMap.sk:69*/
          {
            bit _out_s444 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _out_s444);
            _pac_sc_s442 = _out_s444;
          }
          else
          {
            int _out_s446 = 0;
            Integer@meta(_out_s446);
            bit _pac_sc_s447 = 0;
            if((key.__cid) == _out_s446)/*HashMap.sk:69*/
            {
              bit _out_s449 = 0;
              equals_Object@Integer(key, node.key_HashMap_Node, _out_s449);
              _pac_sc_s447 = _out_s449;
            }
            else
            {
              int _out_s451 = 0;
              System@meta(_out_s451);
              bit _pac_sc_s452 = 0;
              if((key.__cid) == _out_s451)/*HashMap.sk:69*/
              {
                bit _out_s454 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _out_s454);
                _pac_sc_s452 = _out_s454;
              }
              else
              {
                int _out_s456 = 0;
                BufferedWriter@meta(_out_s456);
                bit _pac_sc_s457 = 0;
                if((key.__cid) == _out_s456)/*HashMap.sk:69*/
                {
                  bit _out_s459 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _out_s459);
                  _pac_sc_s457 = _out_s459;
                }
                else
                {
                  int _out_s461 = 0;
                  HashMap_Node@meta(_out_s461);
                  bit _pac_sc_s462 = 0;
                  if((key.__cid) == _out_s461)/*HashMap.sk:69*/
                  {
                    bit _out_s464 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _out_s464);
                    _pac_sc_s462 = _out_s464;
                  }
                  else
                  {
                    int _out_s466 = 0;
                    KerberosKey@meta(_out_s466);
                    bit _pac_sc_s467 = 0;
                    if((key.__cid) == _out_s466)/*HashMap.sk:69*/
                    {
                      bit _out_s469 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _out_s469);
                      _pac_sc_s467 = _out_s469;
                    }
                    else
                    {
                      int _out_s471 = 0;
                      LinkedList@meta(_out_s471);
                      bit _pac_sc_s472 = 0;
                      if((key.__cid) == _out_s471)/*HashMap.sk:69*/
                      {
                        bit _out_s474 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _out_s474);
                        _pac_sc_s472 = _out_s474;
                      }
                      else
                      {
                        int _out_s476 = 0;
                        StringBuilder@meta(_out_s476);
                        bit _pac_sc_s477 = 0;
                        if((key.__cid) == _out_s476)/*HashMap.sk:69*/
                        {
                          bit _out_s479 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _out_s479);
                          _pac_sc_s477 = _out_s479;
                        }
                        else
                        {
                          int _out_s481 = 0;
                          Stack@meta(_out_s481);
                          bit _pac_sc_s482 = 0;
                          if((key.__cid) == _out_s481)/*HashMap.sk:69*/
                          {
                            bit _out_s484 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _out_s484);
                            _pac_sc_s482 = _out_s484;
                          }
                          else
                          {
                            int _out_s486 = 0;
                            CryptoCipherFactory@meta(_out_s486);
                            bit _pac_sc_s487 = 0;
                            if((key.__cid) == _out_s486)/*HashMap.sk:69*/
                            {
                              bit _out_s489 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _out_s489);
                              _pac_sc_s487 = _out_s489;
                            }
                            else
                            {
                              int _out_s491 = 0;
                              IvParameterSpec@meta(_out_s491);
                              bit _pac_sc_s492 = 0;
                              if((key.__cid) == _out_s491)/*HashMap.sk:69*/
                              {
                                bit _out_s494 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _out_s494);
                                _pac_sc_s492 = _out_s494;
                              }
                              else
                              {
                                int _out_s496 = 0;
                                AbstractQueue@meta(_out_s496);
                                bit _pac_sc_s497 = 0;
                                if((key.__cid) == _out_s496)/*HashMap.sk:69*/
                                {
                                  bit _out_s499 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s499);
                                  _pac_sc_s497 = _out_s499;
                                }
                                else
                                {
                                  int _out_s501 = 0;
                                  PasswordManager@meta(_out_s501);
                                  bit _pac_sc_s502 = 0;
                                  if((key.__cid) == _out_s501)/*HashMap.sk:69*/
                                  {
                                    bit _out_s504 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s504);
                                    _pac_sc_s502 = _out_s504;
                                  }
                                  else
                                  {
                                    int _out_s506 = 0;
                                    KeyGenerator@meta(_out_s506);
                                    bit _pac_sc_s507 = 0;
                                    if((key.__cid) == _out_s506)/*HashMap.sk:69*/
                                    {
                                      bit _out_s509 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s509);
                                      _pac_sc_s507 = _out_s509;
                                    }
                                    else
                                    {
                                      int _out_s511 = 0;
                                      PasswordMap@meta(_out_s511);
                                      bit _pac_sc_s512 = 0;
                                      if((key.__cid) == _out_s511)/*HashMap.sk:69*/
                                      {
                                        bit _out_s514 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s514);
                                        _pac_sc_s512 = _out_s514;
                                      }
                                      else
                                      {
                                        int _out_s516 = 0;
                                        Arrays@meta(_out_s516);
                                        bit _pac_sc_s517 = 0;
                                        if((key.__cid) == _out_s516)/*HashMap.sk:69*/
                                        {
                                          bit _out_s519 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s519);
                                          _pac_sc_s517 = _out_s519;
                                        }
                                        else
                                        {
                                          int _out_s521 = 0;
                                          BufferedReader@meta(_out_s521);
                                          bit _pac_sc_s522 = 0;
                                          if((key.__cid) == _out_s521)/*HashMap.sk:69*/
                                          {
                                            bit _out_s524 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _out_s524);
                                            _pac_sc_s522 = _out_s524;
                                          }
                                          else
                                          {
                                            int _out_s526 = 0;
                                            Collections@meta(_out_s526);
                                            bit _pac_sc_s527 = 0;
                                            if((key.__cid) == _out_s526)/*HashMap.sk:69*/
                                            {
                                              bit _out_s529 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s529);
                                              _pac_sc_s527 = _out_s529;
                                            }
                                            else
                                            {
                                              int _out_s531 = 0;
                                              Mac@meta(_out_s531);
                                              bit _pac_sc_s532 = 0;
                                              if((key.__cid) == _out_s531)/*HashMap.sk:69*/
                                              {
                                                bit _out_s534 = 0;
                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s534);
                                                _pac_sc_s532 = _out_s534;
                                              }
                                              else
                                              {
                                                int _out_s536 = 0;
                                                Character@meta(_out_s536);
                                                bit _pac_sc_s537 = 0;
                                                if((key.__cid) == _out_s536)/*HashMap.sk:69*/
                                                {
                                                  bit _out_s539 = 0;
                                                  equals_Object@Character(key, node.key_HashMap_Node, _out_s539);
                                                  _pac_sc_s537 = _out_s539;
                                                }
                                                else
                                                {
                                                  int _out_s541 = 0;
                                                  Float@meta(_out_s541);
                                                  bit _pac_sc_s542 = 0;
                                                  if((key.__cid) == _out_s541)/*HashMap.sk:69*/
                                                  {
                                                    bit _out_s544 = 0;
                                                    equals_Object@Float(key, node.key_HashMap_Node, _out_s544);
                                                    _pac_sc_s542 = _out_s544;
                                                  }
                                                  else
                                                  {
                                                    int _out_s546 = 0;
                                                    Number@meta(_out_s546);
                                                    bit _pac_sc_s547 = 0;
                                                    if((key.__cid) == _out_s546)/*HashMap.sk:69*/
                                                    {
                                                      bit _out_s549 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s549);
                                                      _pac_sc_s547 = _out_s549;
                                                    }
                                                    else
                                                    {
                                                      int _out_s551 = 0;
                                                      ArrayDeque@meta(_out_s551);
                                                      bit _pac_sc_s552 = 0;
                                                      if((key.__cid) == _out_s551)/*HashMap.sk:69*/
                                                      {
                                                        bit _out_s554 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s554);
                                                        _pac_sc_s552 = _out_s554;
                                                      }
                                                      else
                                                      {
                                                        int _out_s556 = 0;
                                                        StringBuffer@meta(_out_s556);
                                                        bit _pac_sc_s557 = 0;
                                                        if((key.__cid) == _out_s556)/*HashMap.sk:69*/
                                                        {
                                                          bit _out_s559 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s559);
                                                          _pac_sc_s557 = _out_s559;
                                                        }
                                                        else
                                                        {
                                                          int _out_s561 = 0;
                                                          Cryptographer@meta(_out_s561);
                                                          bit _pac_sc_s562 = 0;
                                                          if((key.__cid) == _out_s561)/*HashMap.sk:69*/
                                                          {
                                                            bit _out_s564 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _out_s564);
                                                            _pac_sc_s562 = _out_s564;
                                                          }
                                                          else
                                                          {
                                                            int _out_s566 = 0;
                                                            FileReaderr@meta(_out_s566);
                                                            bit _pac_sc_s567 = 0;
                                                            if((key.__cid) == _out_s566)/*HashMap.sk:69*/
                                                            {
                                                              bit _out_s569 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s569);
                                                              _pac_sc_s567 = _out_s569;
                                                            }
                                                            else
                                                            {
                                                              int _out_s571 = 0;
                                                              TreeSet@meta(_out_s571);
                                                              bit _pac_sc_s572 = 0;
                                                              if((key.__cid) == _out_s571)/*HashMap.sk:69*/
                                                              {
                                                                bit _out_s574 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s574);
                                                                _pac_sc_s572 = _out_s574;
                                                              }
                                                              else
                                                              {
                                                                int _out_s576 = 0;
                                                                ArrayDeque_DequeNode@meta(_out_s576);
                                                                bit _pac_sc_s577 = 0;
                                                                if((key.__cid) == _out_s576)/*HashMap.sk:69*/
                                                                {
                                                                  bit _out_s579 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s579);
                                                                  _pac_sc_s577 = _out_s579;
                                                                }
                                                                else
                                                                {
                                                                  int _out_s581 = 0;
                                                                  Assert@meta(_out_s581);
                                                                  bit _pac_sc_s582 = 0;
                                                                  if((key.__cid) == _out_s581)/*HashMap.sk:69*/
                                                                  {
                                                                    bit _out_s584 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s584);
                                                                    _pac_sc_s582 = _out_s584;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _out_s586 = 0;
                                                                    PrintStream@meta(_out_s586);
                                                                    bit _pac_sc_s587 = 0;
                                                                    if((key.__cid) == _out_s586)/*HashMap.sk:69*/
                                                                    {
                                                                      bit _out_s589 = 0;
                                                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s589);
                                                                      _pac_sc_s587 = _out_s589;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _out_s591 = 0;
                                                                      Properties@meta(_out_s591);
                                                                      bit _pac_sc_s592 = 0;
                                                                      if((key.__cid) == _out_s591)/*HashMap.sk:69*/
                                                                      {
                                                                        bit _out_s594 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s594);
                                                                        _pac_sc_s592 = _out_s594;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _out_s596 = 0;
                                                                        CryptoCipherFactory_CipherProvider@meta(_out_s596);
                                                                        bit _pac_sc_s597 = 0;
                                                                        if((key.__cid) == _out_s596)/*HashMap.sk:69*/
                                                                        {
                                                                          bit _out_s599 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s599);
                                                                          _pac_sc_s597 = _out_s599;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _out_s601 = 0;
                                                                          String@meta(_out_s601);
                                                                          bit _pac_sc_s602 = 0;
                                                                          if((key.__cid) == _out_s601)/*HashMap.sk:69*/
                                                                          {
                                                                            bit _out_s604 = 0;
                                                                            equals_Object@String(key, node.key_HashMap_Node, _out_s604);
                                                                            _pac_sc_s602 = _out_s604;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _out_s606 = 0;
                                                                            HashSet@meta(_out_s606);
                                                                            bit _pac_sc_s607 = 0;
                                                                            if((key.__cid) == _out_s606)/*HashMap.sk:69*/
                                                                            {
                                                                              bit _out_s609 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s609);
                                                                              _pac_sc_s607 = _out_s609;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _out_s611 = 0;
                                                                              FileWriterr@meta(_out_s611);
                                                                              bit _pac_sc_s612 = 0;
                                                                              if((key.__cid) == _out_s611)/*HashMap.sk:69*/
                                                                              {
                                                                                bit _out_s614 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s614);
                                                                                _pac_sc_s612 = _out_s614;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _out_s616 = 0;
                                                                                Scanner@meta(_out_s616);
                                                                                bit _pac_sc_s617 = 0;
                                                                                if((key.__cid) == _out_s616)/*HashMap.sk:69*/
                                                                                {
                                                                                  bit _out_s619 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s619);
                                                                                  _pac_sc_s617 = _out_s619;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _out_s621 = 0;
                                                                                  Cipher@meta(_out_s621);
                                                                                  bit _pac_sc_s622 = 0;
                                                                                  if((key.__cid) == _out_s621)/*HashMap.sk:69*/
                                                                                  {
                                                                                    bit _out_s624 = 0;
                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s624);
                                                                                    _pac_sc_s622 = _out_s624;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int _out_s626 = 0;
                                                                                    PasswordManagerTest@meta(_out_s626);
                                                                                    bit _pac_sc_s627 = 0;
                                                                                    if((key.__cid) == _out_s626)/*HashMap.sk:69*/
                                                                                    {
                                                                                      bit _out_s629 = 0;
                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s629);
                                                                                      _pac_sc_s627 = _out_s629;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int _out_s631 = 0;
                                                                                      ArrayList@meta(_out_s631);
                                                                                      bit _pac_sc_s632 = 0;
                                                                                      if((key.__cid) == _out_s631)/*HashMap.sk:69*/
                                                                                      {
                                                                                        bit _out_s634 = 0;
                                                                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s634);
                                                                                        _pac_sc_s632 = _out_s634;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int _out_s636 = 0;
                                                                                        Utils@meta(_out_s636);
                                                                                        bit _pac_sc_s637 = 0;
                                                                                        if((key.__cid) == _out_s636)/*HashMap.sk:69*/
                                                                                        {
                                                                                          bit _out_s639 = 0;
                                                                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s639);
                                                                                          _pac_sc_s637 = _out_s639;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int _out_s641 = 0;
                                                                                          SecretKeySpec@meta(_out_s641);
                                                                                          bit _pac_sc_s642 = 0;
                                                                                          if((key.__cid) == _out_s641)/*HashMap.sk:69*/
                                                                                          {
                                                                                            bit _out_s644 = 0;
                                                                                            equals_Object@Object(key, node.key_HashMap_Node, _out_s644);
                                                                                            _pac_sc_s642 = _out_s644;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int _out_s646 = 0;
                                                                                            SecureRandom@meta(_out_s646);
                                                                                            bit _pac_sc_s647 = 0;
                                                                                            if((key.__cid) == _out_s646)/*HashMap.sk:69*/
                                                                                            {
                                                                                              bit _out_s649 = 0;
                                                                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s649);
                                                                                              _pac_sc_s647 = _out_s649;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int _out_s651 = 0;
                                                                                              File@meta(_out_s651);
                                                                                              bit _pac_sc_s652 = 0;
                                                                                              if((key.__cid) == _out_s651)/*HashMap.sk:69*/
                                                                                              {
                                                                                                bit _out_s654 = 0;
                                                                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s654);
                                                                                                _pac_sc_s652 = _out_s654;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int _out_s656 = 0;
                                                                                                Boolean@meta(_out_s656);
                                                                                                bit _pac_sc_s657 = 0;
                                                                                                if((key.__cid) == _out_s656)/*HashMap.sk:69*/
                                                                                                {
                                                                                                  bit _out_s659 = 0;
                                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s659);
                                                                                                  _pac_sc_s657 = _out_s659;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  int _out_s661 = 0;
                                                                                                  Object@meta(_out_s661);
                                                                                                  bit _pac_sc_s662 = 0;
                                                                                                  if((key.__cid) == _out_s661)/*HashMap.sk:69*/
                                                                                                  {
                                                                                                    bit _out_s664 = 0;
                                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s664);
                                                                                                    _pac_sc_s662 = _out_s664;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    _pac_sc_s662 = 0;
                                                                                                  }
                                                                                                  _pac_sc_s657 = _pac_sc_s662;
                                                                                                }
                                                                                                _pac_sc_s652 = _pac_sc_s657;
                                                                                              }
                                                                                              _pac_sc_s647 = _pac_sc_s652;
                                                                                            }
                                                                                            _pac_sc_s642 = _pac_sc_s647;
                                                                                          }
                                                                                          _pac_sc_s637 = _pac_sc_s642;
                                                                                        }
                                                                                        _pac_sc_s632 = _pac_sc_s637;
                                                                                      }
                                                                                      _pac_sc_s627 = _pac_sc_s632;
                                                                                    }
                                                                                    _pac_sc_s622 = _pac_sc_s627;
                                                                                  }
                                                                                  _pac_sc_s617 = _pac_sc_s622;
                                                                                }
                                                                                _pac_sc_s612 = _pac_sc_s617;
                                                                              }
                                                                              _pac_sc_s607 = _pac_sc_s612;
                                                                            }
                                                                            _pac_sc_s602 = _pac_sc_s607;
                                                                          }
                                                                          _pac_sc_s597 = _pac_sc_s602;
                                                                        }
                                                                        _pac_sc_s592 = _pac_sc_s597;
                                                                      }
                                                                      _pac_sc_s587 = _pac_sc_s592;
                                                                    }
                                                                    _pac_sc_s582 = _pac_sc_s587;
                                                                  }
                                                                  _pac_sc_s577 = _pac_sc_s582;
                                                                }
                                                                _pac_sc_s572 = _pac_sc_s577;
                                                              }
                                                              _pac_sc_s567 = _pac_sc_s572;
                                                            }
                                                            _pac_sc_s562 = _pac_sc_s567;
                                                          }
                                                          _pac_sc_s557 = _pac_sc_s562;
                                                        }
                                                        _pac_sc_s552 = _pac_sc_s557;
                                                      }
                                                      _pac_sc_s547 = _pac_sc_s552;
                                                    }
                                                    _pac_sc_s542 = _pac_sc_s547;
                                                  }
                                                  _pac_sc_s537 = _pac_sc_s542;
                                                }
                                                _pac_sc_s532 = _pac_sc_s537;
                                              }
                                              _pac_sc_s527 = _pac_sc_s532;
                                            }
                                            _pac_sc_s522 = _pac_sc_s527;
                                          }
                                          _pac_sc_s517 = _pac_sc_s522;
                                        }
                                        _pac_sc_s512 = _pac_sc_s517;
                                      }
                                      _pac_sc_s507 = _pac_sc_s512;
                                    }
                                    _pac_sc_s502 = _pac_sc_s507;
                                  }
                                  _pac_sc_s497 = _pac_sc_s502;
                                }
                                _pac_sc_s492 = _pac_sc_s497;
                              }
                              _pac_sc_s487 = _pac_sc_s492;
                            }
                            _pac_sc_s482 = _pac_sc_s487;
                          }
                          _pac_sc_s477 = _pac_sc_s482;
                        }
                        _pac_sc_s472 = _pac_sc_s477;
                      }
                      _pac_sc_s467 = _pac_sc_s472;
                    }
                    _pac_sc_s462 = _pac_sc_s467;
                  }
                  _pac_sc_s457 = _pac_sc_s462;
                }
                _pac_sc_s452 = _pac_sc_s457;
              }
              _pac_sc_s447 = _pac_sc_s452;
            }
            _pac_sc_s442 = _pac_sc_s447;
          }
          _pac_sc_s437 = _pac_sc_s442;
        }
        _pac_sc_s432 = _pac_sc_s437;
      }
      if(_pac_sc_s432)/*HashMap.sk:69*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
    }
    _out = null;
    return;
  }
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5461 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s5460)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s5460 = 16;
  }
  /*HashMap.sk:115*/
  
void putVal_int_K_V (Object self, int hash, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5442)/*HashMap.sk:115*/
  {
    int hashMod = hash % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:117*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:121*/
    {
      bit _pac_sc_s902 = (node.hash_HashMap_Node) != hash;
      if(!(_pac_sc_s902))/*HashMap.sk:122*/
      {
        int _pac_sc_s902_s904 = 0;
        TreeMap@meta(_pac_sc_s902_s904);
        bit _pac_sc_s905 = 0;
        if((key.__cid) == _pac_sc_s902_s904)/*HashMap.sk:122*/
        {
          bit _pac_sc_s902_s907 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s907);
          _pac_sc_s905 = _pac_sc_s902_s907;
        }
        else
        {
          int _pac_sc_s902_s909 = 0;
          KeyStore@meta(_pac_sc_s902_s909);
          bit _pac_sc_s910 = 0;
          if((key.__cid) == _pac_sc_s902_s909)/*HashMap.sk:122*/
          {
            bit _pac_sc_s902_s912 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s912);
            _pac_sc_s910 = _pac_sc_s902_s912;
          }
          else
          {
            int _pac_sc_s902_s914 = 0;
            FileOutputStream@meta(_pac_sc_s902_s914);
            bit _pac_sc_s915 = 0;
            if((key.__cid) == _pac_sc_s902_s914)/*HashMap.sk:122*/
            {
              bit _pac_sc_s902_s917 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s917);
              _pac_sc_s915 = _pac_sc_s902_s917;
            }
            else
            {
              int _pac_sc_s902_s919 = 0;
              Integer@meta(_pac_sc_s902_s919);
              bit _pac_sc_s920 = 0;
              if((key.__cid) == _pac_sc_s902_s919)/*HashMap.sk:122*/
              {
                bit _pac_sc_s902_s922 = 0;
                equals_Object@Integer(key, node.key_HashMap_Node, _pac_sc_s902_s922);
                _pac_sc_s920 = _pac_sc_s902_s922;
              }
              else
              {
                int _pac_sc_s902_s924 = 0;
                System@meta(_pac_sc_s902_s924);
                bit _pac_sc_s925 = 0;
                if((key.__cid) == _pac_sc_s902_s924)/*HashMap.sk:122*/
                {
                  bit _pac_sc_s902_s927 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s927);
                  _pac_sc_s925 = _pac_sc_s902_s927;
                }
                else
                {
                  int _pac_sc_s902_s929 = 0;
                  BufferedWriter@meta(_pac_sc_s902_s929);
                  bit _pac_sc_s930 = 0;
                  if((key.__cid) == _pac_sc_s902_s929)/*HashMap.sk:122*/
                  {
                    bit _pac_sc_s902_s932 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s932);
                    _pac_sc_s930 = _pac_sc_s902_s932;
                  }
                  else
                  {
                    int _pac_sc_s902_s934 = 0;
                    HashMap_Node@meta(_pac_sc_s902_s934);
                    bit _pac_sc_s935 = 0;
                    if((key.__cid) == _pac_sc_s902_s934)/*HashMap.sk:122*/
                    {
                      bit _pac_sc_s902_s937 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s937);
                      _pac_sc_s935 = _pac_sc_s902_s937;
                    }
                    else
                    {
                      int _pac_sc_s902_s939 = 0;
                      KerberosKey@meta(_pac_sc_s902_s939);
                      bit _pac_sc_s940 = 0;
                      if((key.__cid) == _pac_sc_s902_s939)/*HashMap.sk:122*/
                      {
                        bit _pac_sc_s902_s942 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s942);
                        _pac_sc_s940 = _pac_sc_s902_s942;
                      }
                      else
                      {
                        int _pac_sc_s902_s944 = 0;
                        LinkedList@meta(_pac_sc_s902_s944);
                        bit _pac_sc_s945 = 0;
                        if((key.__cid) == _pac_sc_s902_s944)/*HashMap.sk:122*/
                        {
                          bit _pac_sc_s902_s947 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s947);
                          _pac_sc_s945 = _pac_sc_s902_s947;
                        }
                        else
                        {
                          int _pac_sc_s902_s949 = 0;
                          StringBuilder@meta(_pac_sc_s902_s949);
                          bit _pac_sc_s950 = 0;
                          if((key.__cid) == _pac_sc_s902_s949)/*HashMap.sk:122*/
                          {
                            bit _pac_sc_s902_s952 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s952);
                            _pac_sc_s950 = _pac_sc_s902_s952;
                          }
                          else
                          {
                            int _pac_sc_s902_s954 = 0;
                            Stack@meta(_pac_sc_s902_s954);
                            bit _pac_sc_s955 = 0;
                            if((key.__cid) == _pac_sc_s902_s954)/*HashMap.sk:122*/
                            {
                              bit _pac_sc_s902_s957 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s957);
                              _pac_sc_s955 = _pac_sc_s902_s957;
                            }
                            else
                            {
                              int _pac_sc_s902_s959 = 0;
                              CryptoCipherFactory@meta(_pac_sc_s902_s959);
                              bit _pac_sc_s960 = 0;
                              if((key.__cid) == _pac_sc_s902_s959)/*HashMap.sk:122*/
                              {
                                bit _pac_sc_s902_s962 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s962);
                                _pac_sc_s960 = _pac_sc_s902_s962;
                              }
                              else
                              {
                                int _pac_sc_s902_s964 = 0;
                                IvParameterSpec@meta(_pac_sc_s902_s964);
                                bit _pac_sc_s965 = 0;
                                if((key.__cid) == _pac_sc_s902_s964)/*HashMap.sk:122*/
                                {
                                  bit _pac_sc_s902_s967 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s967);
                                  _pac_sc_s965 = _pac_sc_s902_s967;
                                }
                                else
                                {
                                  int _pac_sc_s902_s969 = 0;
                                  AbstractQueue@meta(_pac_sc_s902_s969);
                                  bit _pac_sc_s970 = 0;
                                  if((key.__cid) == _pac_sc_s902_s969)/*HashMap.sk:122*/
                                  {
                                    bit _pac_sc_s902_s972 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s972);
                                    _pac_sc_s970 = _pac_sc_s902_s972;
                                  }
                                  else
                                  {
                                    int _pac_sc_s902_s974 = 0;
                                    PasswordManager@meta(_pac_sc_s902_s974);
                                    bit _pac_sc_s975 = 0;
                                    if((key.__cid) == _pac_sc_s902_s974)/*HashMap.sk:122*/
                                    {
                                      bit _pac_sc_s902_s977 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s977);
                                      _pac_sc_s975 = _pac_sc_s902_s977;
                                    }
                                    else
                                    {
                                      int _pac_sc_s902_s979 = 0;
                                      KeyGenerator@meta(_pac_sc_s902_s979);
                                      bit _pac_sc_s980 = 0;
                                      if((key.__cid) == _pac_sc_s902_s979)/*HashMap.sk:122*/
                                      {
                                        bit _pac_sc_s902_s982 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s982);
                                        _pac_sc_s980 = _pac_sc_s902_s982;
                                      }
                                      else
                                      {
                                        int _pac_sc_s902_s984 = 0;
                                        PasswordMap@meta(_pac_sc_s902_s984);
                                        bit _pac_sc_s985 = 0;
                                        if((key.__cid) == _pac_sc_s902_s984)/*HashMap.sk:122*/
                                        {
                                          bit _pac_sc_s902_s987 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s987);
                                          _pac_sc_s985 = _pac_sc_s902_s987;
                                        }
                                        else
                                        {
                                          int _pac_sc_s902_s989 = 0;
                                          Arrays@meta(_pac_sc_s902_s989);
                                          bit _pac_sc_s990 = 0;
                                          if((key.__cid) == _pac_sc_s902_s989)/*HashMap.sk:122*/
                                          {
                                            bit _pac_sc_s902_s992 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s992);
                                            _pac_sc_s990 = _pac_sc_s902_s992;
                                          }
                                          else
                                          {
                                            int _pac_sc_s902_s994 = 0;
                                            BufferedReader@meta(_pac_sc_s902_s994);
                                            bit _pac_sc_s995 = 0;
                                            if((key.__cid) == _pac_sc_s902_s994)/*HashMap.sk:122*/
                                            {
                                              bit _pac_sc_s902_s997 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s997);
                                              _pac_sc_s995 = _pac_sc_s902_s997;
                                            }
                                            else
                                            {
                                              int _pac_sc_s902_s999 = 0;
                                              Collections@meta(_pac_sc_s902_s999);
                                              bit _pac_sc_s1000 = 0;
                                              if((key.__cid) == _pac_sc_s902_s999)/*HashMap.sk:122*/
                                              {
                                                bit _pac_sc_s902_s1002 = 0;
                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1002);
                                                _pac_sc_s1000 = _pac_sc_s902_s1002;
                                              }
                                              else
                                              {
                                                int _pac_sc_s902_s1004 = 0;
                                                Mac@meta(_pac_sc_s902_s1004);
                                                bit _pac_sc_s1005 = 0;
                                                if((key.__cid) == _pac_sc_s902_s1004)/*HashMap.sk:122*/
                                                {
                                                  bit _pac_sc_s902_s1007 = 0;
                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1007);
                                                  _pac_sc_s1005 = _pac_sc_s902_s1007;
                                                }
                                                else
                                                {
                                                  int _pac_sc_s902_s1009 = 0;
                                                  Character@meta(_pac_sc_s902_s1009);
                                                  bit _pac_sc_s1010 = 0;
                                                  if((key.__cid) == _pac_sc_s902_s1009)/*HashMap.sk:122*/
                                                  {
                                                    bit _pac_sc_s902_s1012 = 0;
                                                    equals_Object@Character(key, node.key_HashMap_Node, _pac_sc_s902_s1012);
                                                    _pac_sc_s1010 = _pac_sc_s902_s1012;
                                                  }
                                                  else
                                                  {
                                                    int _pac_sc_s902_s1014 = 0;
                                                    Float@meta(_pac_sc_s902_s1014);
                                                    bit _pac_sc_s1015 = 0;
                                                    if((key.__cid) == _pac_sc_s902_s1014)/*HashMap.sk:122*/
                                                    {
                                                      bit _pac_sc_s902_s1017 = 0;
                                                      equals_Object@Float(key, node.key_HashMap_Node, _pac_sc_s902_s1017);
                                                      _pac_sc_s1015 = _pac_sc_s902_s1017;
                                                    }
                                                    else
                                                    {
                                                      int _pac_sc_s902_s1019 = 0;
                                                      Number@meta(_pac_sc_s902_s1019);
                                                      bit _pac_sc_s1020 = 0;
                                                      if((key.__cid) == _pac_sc_s902_s1019)/*HashMap.sk:122*/
                                                      {
                                                        bit _pac_sc_s902_s1022 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1022);
                                                        _pac_sc_s1020 = _pac_sc_s902_s1022;
                                                      }
                                                      else
                                                      {
                                                        int _pac_sc_s902_s1024 = 0;
                                                        ArrayDeque@meta(_pac_sc_s902_s1024);
                                                        bit _pac_sc_s1025 = 0;
                                                        if((key.__cid) == _pac_sc_s902_s1024)/*HashMap.sk:122*/
                                                        {
                                                          bit _pac_sc_s902_s1027 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1027);
                                                          _pac_sc_s1025 = _pac_sc_s902_s1027;
                                                        }
                                                        else
                                                        {
                                                          int _pac_sc_s902_s1029 = 0;
                                                          StringBuffer@meta(_pac_sc_s902_s1029);
                                                          bit _pac_sc_s1030 = 0;
                                                          if((key.__cid) == _pac_sc_s902_s1029)/*HashMap.sk:122*/
                                                          {
                                                            bit _pac_sc_s902_s1032 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1032);
                                                            _pac_sc_s1030 = _pac_sc_s902_s1032;
                                                          }
                                                          else
                                                          {
                                                            int _pac_sc_s902_s1034 = 0;
                                                            Cryptographer@meta(_pac_sc_s902_s1034);
                                                            bit _pac_sc_s1035 = 0;
                                                            if((key.__cid) == _pac_sc_s902_s1034)/*HashMap.sk:122*/
                                                            {
                                                              bit _pac_sc_s902_s1037 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1037);
                                                              _pac_sc_s1035 = _pac_sc_s902_s1037;
                                                            }
                                                            else
                                                            {
                                                              int _pac_sc_s902_s1039 = 0;
                                                              FileReaderr@meta(_pac_sc_s902_s1039);
                                                              bit _pac_sc_s1040 = 0;
                                                              if((key.__cid) == _pac_sc_s902_s1039)/*HashMap.sk:122*/
                                                              {
                                                                bit _pac_sc_s902_s1042 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1042);
                                                                _pac_sc_s1040 = _pac_sc_s902_s1042;
                                                              }
                                                              else
                                                              {
                                                                int _pac_sc_s902_s1044 = 0;
                                                                TreeSet@meta(_pac_sc_s902_s1044);
                                                                bit _pac_sc_s1045 = 0;
                                                                if((key.__cid) == _pac_sc_s902_s1044)/*HashMap.sk:122*/
                                                                {
                                                                  bit _pac_sc_s902_s1047 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1047);
                                                                  _pac_sc_s1045 = _pac_sc_s902_s1047;
                                                                }
                                                                else
                                                                {
                                                                  int _pac_sc_s902_s1049 = 0;
                                                                  ArrayDeque_DequeNode@meta(_pac_sc_s902_s1049);
                                                                  bit _pac_sc_s1050 = 0;
                                                                  if((key.__cid) == _pac_sc_s902_s1049)/*HashMap.sk:122*/
                                                                  {
                                                                    bit _pac_sc_s902_s1052 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1052);
                                                                    _pac_sc_s1050 = _pac_sc_s902_s1052;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _pac_sc_s902_s1054 = 0;
                                                                    Assert@meta(_pac_sc_s902_s1054);
                                                                    bit _pac_sc_s1055 = 0;
                                                                    if((key.__cid) == _pac_sc_s902_s1054)/*HashMap.sk:122*/
                                                                    {
                                                                      bit _pac_sc_s902_s1057 = 0;
                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1057);
                                                                      _pac_sc_s1055 = _pac_sc_s902_s1057;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _pac_sc_s902_s1059 = 0;
                                                                      PrintStream@meta(_pac_sc_s902_s1059);
                                                                      bit _pac_sc_s1060 = 0;
                                                                      if((key.__cid) == _pac_sc_s902_s1059)/*HashMap.sk:122*/
                                                                      {
                                                                        bit _pac_sc_s902_s1062 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1062);
                                                                        _pac_sc_s1060 = _pac_sc_s902_s1062;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _pac_sc_s902_s1064 = 0;
                                                                        Properties@meta(_pac_sc_s902_s1064);
                                                                        bit _pac_sc_s1065 = 0;
                                                                        if((key.__cid) == _pac_sc_s902_s1064)/*HashMap.sk:122*/
                                                                        {
                                                                          bit _pac_sc_s902_s1067 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1067);
                                                                          _pac_sc_s1065 = _pac_sc_s902_s1067;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _pac_sc_s902_s1069 = 0;
                                                                          CryptoCipherFactory_CipherProvider@meta(_pac_sc_s902_s1069);
                                                                          bit _pac_sc_s1070 = 0;
                                                                          if((key.__cid) == _pac_sc_s902_s1069)/*HashMap.sk:122*/
                                                                          {
                                                                            bit _pac_sc_s902_s1072 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1072);
                                                                            _pac_sc_s1070 = _pac_sc_s902_s1072;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _pac_sc_s902_s1074 = 0;
                                                                            String@meta(_pac_sc_s902_s1074);
                                                                            bit _pac_sc_s1075 = 0;
                                                                            if((key.__cid) == _pac_sc_s902_s1074)/*HashMap.sk:122*/
                                                                            {
                                                                              bit _pac_sc_s902_s1077 = 0;
                                                                              equals_Object@String(key, node.key_HashMap_Node, _pac_sc_s902_s1077);
                                                                              _pac_sc_s1075 = _pac_sc_s902_s1077;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _pac_sc_s902_s1079 = 0;
                                                                              HashSet@meta(_pac_sc_s902_s1079);
                                                                              bit _pac_sc_s1080 = 0;
                                                                              if((key.__cid) == _pac_sc_s902_s1079)/*HashMap.sk:122*/
                                                                              {
                                                                                bit _pac_sc_s902_s1082 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1082);
                                                                                _pac_sc_s1080 = _pac_sc_s902_s1082;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _pac_sc_s902_s1084 = 0;
                                                                                FileWriterr@meta(_pac_sc_s902_s1084);
                                                                                bit _pac_sc_s1085 = 0;
                                                                                if((key.__cid) == _pac_sc_s902_s1084)/*HashMap.sk:122*/
                                                                                {
                                                                                  bit _pac_sc_s902_s1087 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1087);
                                                                                  _pac_sc_s1085 = _pac_sc_s902_s1087;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _pac_sc_s902_s1089 = 0;
                                                                                  Scanner@meta(_pac_sc_s902_s1089);
                                                                                  bit _pac_sc_s1090 = 0;
                                                                                  if((key.__cid) == _pac_sc_s902_s1089)/*HashMap.sk:122*/
                                                                                  {
                                                                                    bit _pac_sc_s902_s1092 = 0;
                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1092);
                                                                                    _pac_sc_s1090 = _pac_sc_s902_s1092;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int _pac_sc_s902_s1094 = 0;
                                                                                    Cipher@meta(_pac_sc_s902_s1094);
                                                                                    bit _pac_sc_s1095 = 0;
                                                                                    if((key.__cid) == _pac_sc_s902_s1094)/*HashMap.sk:122*/
                                                                                    {
                                                                                      bit _pac_sc_s902_s1097 = 0;
                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1097);
                                                                                      _pac_sc_s1095 = _pac_sc_s902_s1097;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int _pac_sc_s902_s1099 = 0;
                                                                                      PasswordManagerTest@meta(_pac_sc_s902_s1099);
                                                                                      bit _pac_sc_s1100 = 0;
                                                                                      if((key.__cid) == _pac_sc_s902_s1099)/*HashMap.sk:122*/
                                                                                      {
                                                                                        bit _pac_sc_s902_s1102 = 0;
                                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1102);
                                                                                        _pac_sc_s1100 = _pac_sc_s902_s1102;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int _pac_sc_s902_s1104 = 0;
                                                                                        ArrayList@meta(_pac_sc_s902_s1104);
                                                                                        bit _pac_sc_s1105 = 0;
                                                                                        if((key.__cid) == _pac_sc_s902_s1104)/*HashMap.sk:122*/
                                                                                        {
                                                                                          bit _pac_sc_s902_s1107 = 0;
                                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1107);
                                                                                          _pac_sc_s1105 = _pac_sc_s902_s1107;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int _pac_sc_s902_s1109 = 0;
                                                                                          Utils@meta(_pac_sc_s902_s1109);
                                                                                          bit _pac_sc_s1110 = 0;
                                                                                          if((key.__cid) == _pac_sc_s902_s1109)/*HashMap.sk:122*/
                                                                                          {
                                                                                            bit _pac_sc_s902_s1112 = 0;
                                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1112);
                                                                                            _pac_sc_s1110 = _pac_sc_s902_s1112;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int _pac_sc_s902_s1114 = 0;
                                                                                            SecretKeySpec@meta(_pac_sc_s902_s1114);
                                                                                            bit _pac_sc_s1115 = 0;
                                                                                            if((key.__cid) == _pac_sc_s902_s1114)/*HashMap.sk:122*/
                                                                                            {
                                                                                              bit _pac_sc_s902_s1117 = 0;
                                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1117);
                                                                                              _pac_sc_s1115 = _pac_sc_s902_s1117;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int _pac_sc_s902_s1119 = 0;
                                                                                              SecureRandom@meta(_pac_sc_s902_s1119);
                                                                                              bit _pac_sc_s1120 = 0;
                                                                                              if((key.__cid) == _pac_sc_s902_s1119)/*HashMap.sk:122*/
                                                                                              {
                                                                                                bit _pac_sc_s902_s1122 = 0;
                                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1122);
                                                                                                _pac_sc_s1120 = _pac_sc_s902_s1122;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int _pac_sc_s902_s1124 = 0;
                                                                                                File@meta(_pac_sc_s902_s1124);
                                                                                                bit _pac_sc_s1125 = 0;
                                                                                                if((key.__cid) == _pac_sc_s902_s1124)/*HashMap.sk:122*/
                                                                                                {
                                                                                                  bit _pac_sc_s902_s1127 = 0;
                                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1127);
                                                                                                  _pac_sc_s1125 = _pac_sc_s902_s1127;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  int _pac_sc_s902_s1129 = 0;
                                                                                                  Boolean@meta(_pac_sc_s902_s1129);
                                                                                                  bit _pac_sc_s1130 = 0;
                                                                                                  if((key.__cid) == _pac_sc_s902_s1129)/*HashMap.sk:122*/
                                                                                                  {
                                                                                                    bit _pac_sc_s902_s1132 = 0;
                                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1132);
                                                                                                    _pac_sc_s1130 = _pac_sc_s902_s1132;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    int _pac_sc_s902_s1134 = 0;
                                                                                                    Object@meta(_pac_sc_s902_s1134);
                                                                                                    bit _pac_sc_s1135 = 0;
                                                                                                    if((key.__cid) == _pac_sc_s902_s1134)/*HashMap.sk:122*/
                                                                                                    {
                                                                                                      bit _pac_sc_s902_s1137 = 0;
                                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s902_s1137);
                                                                                                      _pac_sc_s1135 = _pac_sc_s902_s1137;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      _pac_sc_s1135 = 0;
                                                                                                    }
                                                                                                    _pac_sc_s1130 = _pac_sc_s1135;
                                                                                                  }
                                                                                                  _pac_sc_s1125 = _pac_sc_s1130;
                                                                                                }
                                                                                                _pac_sc_s1120 = _pac_sc_s1125;
                                                                                              }
                                                                                              _pac_sc_s1115 = _pac_sc_s1120;
                                                                                            }
                                                                                            _pac_sc_s1110 = _pac_sc_s1115;
                                                                                          }
                                                                                          _pac_sc_s1105 = _pac_sc_s1110;
                                                                                        }
                                                                                        _pac_sc_s1100 = _pac_sc_s1105;
                                                                                      }
                                                                                      _pac_sc_s1095 = _pac_sc_s1100;
                                                                                    }
                                                                                    _pac_sc_s1090 = _pac_sc_s1095;
                                                                                  }
                                                                                  _pac_sc_s1085 = _pac_sc_s1090;
                                                                                }
                                                                                _pac_sc_s1080 = _pac_sc_s1085;
                                                                              }
                                                                              _pac_sc_s1075 = _pac_sc_s1080;
                                                                            }
                                                                            _pac_sc_s1070 = _pac_sc_s1075;
                                                                          }
                                                                          _pac_sc_s1065 = _pac_sc_s1070;
                                                                        }
                                                                        _pac_sc_s1060 = _pac_sc_s1065;
                                                                      }
                                                                      _pac_sc_s1055 = _pac_sc_s1060;
                                                                    }
                                                                    _pac_sc_s1050 = _pac_sc_s1055;
                                                                  }
                                                                  _pac_sc_s1045 = _pac_sc_s1050;
                                                                }
                                                                _pac_sc_s1040 = _pac_sc_s1045;
                                                              }
                                                              _pac_sc_s1035 = _pac_sc_s1040;
                                                            }
                                                            _pac_sc_s1030 = _pac_sc_s1035;
                                                          }
                                                          _pac_sc_s1025 = _pac_sc_s1030;
                                                        }
                                                        _pac_sc_s1020 = _pac_sc_s1025;
                                                      }
                                                      _pac_sc_s1015 = _pac_sc_s1020;
                                                    }
                                                    _pac_sc_s1010 = _pac_sc_s1015;
                                                  }
                                                  _pac_sc_s1005 = _pac_sc_s1010;
                                                }
                                                _pac_sc_s1000 = _pac_sc_s1005;
                                              }
                                              _pac_sc_s995 = _pac_sc_s1000;
                                            }
                                            _pac_sc_s990 = _pac_sc_s995;
                                          }
                                          _pac_sc_s985 = _pac_sc_s990;
                                        }
                                        _pac_sc_s980 = _pac_sc_s985;
                                      }
                                      _pac_sc_s975 = _pac_sc_s980;
                                    }
                                    _pac_sc_s970 = _pac_sc_s975;
                                  }
                                  _pac_sc_s965 = _pac_sc_s970;
                                }
                                _pac_sc_s960 = _pac_sc_s965;
                              }
                              _pac_sc_s955 = _pac_sc_s960;
                            }
                            _pac_sc_s950 = _pac_sc_s955;
                          }
                          _pac_sc_s945 = _pac_sc_s950;
                        }
                        _pac_sc_s940 = _pac_sc_s945;
                      }
                      _pac_sc_s935 = _pac_sc_s940;
                    }
                    _pac_sc_s930 = _pac_sc_s935;
                  }
                  _pac_sc_s925 = _pac_sc_s930;
                }
                _pac_sc_s920 = _pac_sc_s925;
              }
              _pac_sc_s915 = _pac_sc_s920;
            }
            _pac_sc_s910 = _pac_sc_s915;
          }
          _pac_sc_s905 = _pac_sc_s910;
        }
        _pac_sc_s902 = !(_pac_sc_s905);
      }
      if(_pac_sc_s902)/*HashMap.sk:122*/
      {
        resize_int@HashMap(self, hash + 1, self0__HashMap_Node_s5442);
        hashMod = hash % (self.capacity_HashMap);
        if(hashMod < 0)/*HashMap.sk:125*/
        {
          hashMod = hashMod + (self.capacity_HashMap);
        }
        node = self.elementData_HashMap.A[hashMod];
        self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
      }
      int _out_s1139 = 0;
      HashMap_Node@meta(_out_s1139);
      Object@Object _out_s1141 = null;
      HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s1139), self, key, value, hash, _out_s1141, self0__HashMap_Node_s5442)//{};
      self.elementData_HashMap.A[hashMod] = _out_s1141;
      if(node != (null))/*HashMap.sk:132*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
      else
      {
        _out = null;
        return;
      }
    }
    int _out_s1143 = 0;
    HashMap_Node@meta(_out_s1143);
    Object@Object _out_s1145 = null;
    HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s1143), self, key, value, hash, _out_s1145, self0__HashMap_Node_s5442)//{};
    self.elementData_HashMap.A[hashMod] = _out_s1145;
    self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
    _out = null;
    return;
  }
  /*HashMap.sk:95*/
  
void put_K_V (Object self, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5434)/*HashMap.sk:95*/
  {
    int h_s666 = 0;
    TreeMap@meta(h_s666);
    int _pac_sc_s667 = 0;
    if((key.__cid) == h_s666)/*HashMap.sk:96*/
    {
      int h_s669 = 0;
      hashCode@Object(key, h_s669);
      _pac_sc_s667 = h_s669;
    }
    else
    {
      int h_s671 = 0;
      KeyStore@meta(h_s671);
      int _pac_sc_s672 = 0;
      if((key.__cid) == h_s671)/*HashMap.sk:96*/
      {
        int h_s674 = 0;
        hashCode@Object(key, h_s674);
        _pac_sc_s672 = h_s674;
      }
      else
      {
        int h_s676 = 0;
        FileOutputStream@meta(h_s676);
        int _pac_sc_s677 = 0;
        if((key.__cid) == h_s676)/*HashMap.sk:96*/
        {
          int h_s679 = 0;
          hashCode@Object(key, h_s679);
          _pac_sc_s677 = h_s679;
        }
        else
        {
          int h_s681 = 0;
          Integer@meta(h_s681);
          int _pac_sc_s682 = 0;
          if((key.__cid) == h_s681)/*HashMap.sk:96*/
          {
            int h_s684 = 0;
            hashCode@Integer(key, h_s684);
            _pac_sc_s682 = h_s684;
          }
          else
          {
            int h_s686 = 0;
            System@meta(h_s686);
            int _pac_sc_s687 = 0;
            if((key.__cid) == h_s686)/*HashMap.sk:96*/
            {
              int h_s689 = 0;
              hashCode@Object(key, h_s689);
              _pac_sc_s687 = h_s689;
            }
            else
            {
              int h_s691 = 0;
              BufferedWriter@meta(h_s691);
              int _pac_sc_s692 = 0;
              if((key.__cid) == h_s691)/*HashMap.sk:96*/
              {
                int h_s694 = 0;
                hashCode@Object(key, h_s694);
                _pac_sc_s692 = h_s694;
              }
              else
              {
                int h_s696 = 0;
                HashMap_Node@meta(h_s696);
                int _pac_sc_s697 = 0;
                if((key.__cid) == h_s696)/*HashMap.sk:96*/
                {
                  int h_s699 = 0;
                  hashCode@Object(key, h_s699);
                  _pac_sc_s697 = h_s699;
                }
                else
                {
                  int h_s701 = 0;
                  KerberosKey@meta(h_s701);
                  int _pac_sc_s702 = 0;
                  if((key.__cid) == h_s701)/*HashMap.sk:96*/
                  {
                    int h_s704 = 0;
                    hashCode@Object(key, h_s704);
                    _pac_sc_s702 = h_s704;
                  }
                  else
                  {
                    int h_s706 = 0;
                    LinkedList@meta(h_s706);
                    int _pac_sc_s707 = 0;
                    if((key.__cid) == h_s706)/*HashMap.sk:96*/
                    {
                      int h_s709 = 0;
                      hashCode@Object(key, h_s709);
                      _pac_sc_s707 = h_s709;
                    }
                    else
                    {
                      int h_s711 = 0;
                      StringBuilder@meta(h_s711);
                      int _pac_sc_s712 = 0;
                      if((key.__cid) == h_s711)/*HashMap.sk:96*/
                      {
                        int h_s714 = 0;
                        hashCode@Object(key, h_s714);
                        _pac_sc_s712 = h_s714;
                      }
                      else
                      {
                        int h_s716 = 0;
                        Stack@meta(h_s716);
                        int _pac_sc_s717 = 0;
                        if((key.__cid) == h_s716)/*HashMap.sk:96*/
                        {
                          int h_s719 = 0;
                          hashCode@Object(key, h_s719);
                          _pac_sc_s717 = h_s719;
                        }
                        else
                        {
                          int h_s721 = 0;
                          CryptoCipherFactory@meta(h_s721);
                          int _pac_sc_s722 = 0;
                          if((key.__cid) == h_s721)/*HashMap.sk:96*/
                          {
                            int h_s724 = 0;
                            hashCode@Object(key, h_s724);
                            _pac_sc_s722 = h_s724;
                          }
                          else
                          {
                            int h_s726 = 0;
                            IvParameterSpec@meta(h_s726);
                            int _pac_sc_s727 = 0;
                            if((key.__cid) == h_s726)/*HashMap.sk:96*/
                            {
                              int h_s729 = 0;
                              hashCode@Object(key, h_s729);
                              _pac_sc_s727 = h_s729;
                            }
                            else
                            {
                              int h_s731 = 0;
                              AbstractQueue@meta(h_s731);
                              int _pac_sc_s732 = 0;
                              if((key.__cid) == h_s731)/*HashMap.sk:96*/
                              {
                                int h_s734 = 0;
                                hashCode@Object(key, h_s734);
                                _pac_sc_s732 = h_s734;
                              }
                              else
                              {
                                int h_s736 = 0;
                                PasswordManager@meta(h_s736);
                                int _pac_sc_s737 = 0;
                                if((key.__cid) == h_s736)/*HashMap.sk:96*/
                                {
                                  int h_s739 = 0;
                                  hashCode@Object(key, h_s739);
                                  _pac_sc_s737 = h_s739;
                                }
                                else
                                {
                                  int h_s741 = 0;
                                  KeyGenerator@meta(h_s741);
                                  int _pac_sc_s742 = 0;
                                  if((key.__cid) == h_s741)/*HashMap.sk:96*/
                                  {
                                    int h_s744 = 0;
                                    hashCode@Object(key, h_s744);
                                    _pac_sc_s742 = h_s744;
                                  }
                                  else
                                  {
                                    int h_s746 = 0;
                                    PasswordMap@meta(h_s746);
                                    int _pac_sc_s747 = 0;
                                    if((key.__cid) == h_s746)/*HashMap.sk:96*/
                                    {
                                      int h_s749 = 0;
                                      hashCode@Object(key, h_s749);
                                      _pac_sc_s747 = h_s749;
                                    }
                                    else
                                    {
                                      int h_s751 = 0;
                                      Arrays@meta(h_s751);
                                      int _pac_sc_s752 = 0;
                                      if((key.__cid) == h_s751)/*HashMap.sk:96*/
                                      {
                                        int h_s754 = 0;
                                        hashCode@Object(key, h_s754);
                                        _pac_sc_s752 = h_s754;
                                      }
                                      else
                                      {
                                        int h_s756 = 0;
                                        BufferedReader@meta(h_s756);
                                        int _pac_sc_s757 = 0;
                                        if((key.__cid) == h_s756)/*HashMap.sk:96*/
                                        {
                                          int h_s759 = 0;
                                          hashCode@Object(key, h_s759);
                                          _pac_sc_s757 = h_s759;
                                        }
                                        else
                                        {
                                          int h_s761 = 0;
                                          Collections@meta(h_s761);
                                          int _pac_sc_s762 = 0;
                                          if((key.__cid) == h_s761)/*HashMap.sk:96*/
                                          {
                                            int h_s764 = 0;
                                            hashCode@Object(key, h_s764);
                                            _pac_sc_s762 = h_s764;
                                          }
                                          else
                                          {
                                            int h_s766 = 0;
                                            Mac@meta(h_s766);
                                            int _pac_sc_s767 = 0;
                                            if((key.__cid) == h_s766)/*HashMap.sk:96*/
                                            {
                                              int h_s769 = 0;
                                              hashCode@Object(key, h_s769);
                                              _pac_sc_s767 = h_s769;
                                            }
                                            else
                                            {
                                              int h_s771 = 0;
                                              Character@meta(h_s771);
                                              int _pac_sc_s772 = 0;
                                              if((key.__cid) == h_s771)/*HashMap.sk:96*/
                                              {
                                                int h_s774 = 0;
                                                hashCode@Object(key, h_s774);
                                                _pac_sc_s772 = h_s774;
                                              }
                                              else
                                              {
                                                int h_s776 = 0;
                                                Float@meta(h_s776);
                                                int _pac_sc_s777 = 0;
                                                if((key.__cid) == h_s776)/*HashMap.sk:96*/
                                                {
                                                  int h_s779 = 0;
                                                  hashCode@Object(key, h_s779);
                                                  _pac_sc_s777 = h_s779;
                                                }
                                                else
                                                {
                                                  int h_s781 = 0;
                                                  Number@meta(h_s781);
                                                  int _pac_sc_s782 = 0;
                                                  if((key.__cid) == h_s781)/*HashMap.sk:96*/
                                                  {
                                                    int h_s784 = 0;
                                                    hashCode@Object(key, h_s784);
                                                    _pac_sc_s782 = h_s784;
                                                  }
                                                  else
                                                  {
                                                    int h_s786 = 0;
                                                    ArrayDeque@meta(h_s786);
                                                    int _pac_sc_s787 = 0;
                                                    if((key.__cid) == h_s786)/*HashMap.sk:96*/
                                                    {
                                                      int h_s789 = 0;
                                                      hashCode@Object(key, h_s789);
                                                      _pac_sc_s787 = h_s789;
                                                    }
                                                    else
                                                    {
                                                      int h_s791 = 0;
                                                      StringBuffer@meta(h_s791);
                                                      int _pac_sc_s792 = 0;
                                                      if((key.__cid) == h_s791)/*HashMap.sk:96*/
                                                      {
                                                        int h_s794 = 0;
                                                        hashCode@Object(key, h_s794);
                                                        _pac_sc_s792 = h_s794;
                                                      }
                                                      else
                                                      {
                                                        int h_s796 = 0;
                                                        Cryptographer@meta(h_s796);
                                                        int _pac_sc_s797 = 0;
                                                        if((key.__cid) == h_s796)/*HashMap.sk:96*/
                                                        {
                                                          int h_s799 = 0;
                                                          hashCode@Object(key, h_s799);
                                                          _pac_sc_s797 = h_s799;
                                                        }
                                                        else
                                                        {
                                                          int h_s801 = 0;
                                                          FileReaderr@meta(h_s801);
                                                          int _pac_sc_s802 = 0;
                                                          if((key.__cid) == h_s801)/*HashMap.sk:96*/
                                                          {
                                                            int h_s804 = 0;
                                                            hashCode@Object(key, h_s804);
                                                            _pac_sc_s802 = h_s804;
                                                          }
                                                          else
                                                          {
                                                            int h_s806 = 0;
                                                            TreeSet@meta(h_s806);
                                                            int _pac_sc_s807 = 0;
                                                            if((key.__cid) == h_s806)/*HashMap.sk:96*/
                                                            {
                                                              int h_s809 = 0;
                                                              hashCode@Object(key, h_s809);
                                                              _pac_sc_s807 = h_s809;
                                                            }
                                                            else
                                                            {
                                                              int h_s811 = 0;
                                                              ArrayDeque_DequeNode@meta(h_s811);
                                                              int _pac_sc_s812 = 0;
                                                              if((key.__cid) == h_s811)/*HashMap.sk:96*/
                                                              {
                                                                int h_s814 = 0;
                                                                hashCode@Object(key, h_s814);
                                                                _pac_sc_s812 = h_s814;
                                                              }
                                                              else
                                                              {
                                                                int h_s816 = 0;
                                                                Assert@meta(h_s816);
                                                                int _pac_sc_s817 = 0;
                                                                if((key.__cid) == h_s816)/*HashMap.sk:96*/
                                                                {
                                                                  int h_s819 = 0;
                                                                  hashCode@Object(key, h_s819);
                                                                  _pac_sc_s817 = h_s819;
                                                                }
                                                                else
                                                                {
                                                                  int h_s821 = 0;
                                                                  PrintStream@meta(h_s821);
                                                                  int _pac_sc_s822 = 0;
                                                                  if((key.__cid) == h_s821)/*HashMap.sk:96*/
                                                                  {
                                                                    int h_s824 = 0;
                                                                    hashCode@Object(key, h_s824);
                                                                    _pac_sc_s822 = h_s824;
                                                                  }
                                                                  else
                                                                  {
                                                                    int h_s826 = 0;
                                                                    Properties@meta(h_s826);
                                                                    int _pac_sc_s827 = 0;
                                                                    if((key.__cid) == h_s826)/*HashMap.sk:96*/
                                                                    {
                                                                      int h_s829 = 0;
                                                                      hashCode@Object(key, h_s829);
                                                                      _pac_sc_s827 = h_s829;
                                                                    }
                                                                    else
                                                                    {
                                                                      int h_s831 = 0;
                                                                      CryptoCipherFactory_CipherProvider@meta(h_s831);
                                                                      int _pac_sc_s832 = 0;
                                                                      if((key.__cid) == h_s831)/*HashMap.sk:96*/
                                                                      {
                                                                        int h_s834 = 0;
                                                                        hashCode@Object(key, h_s834);
                                                                        _pac_sc_s832 = h_s834;
                                                                      }
                                                                      else
                                                                      {
                                                                        int h_s836 = 0;
                                                                        String@meta(h_s836);
                                                                        int _pac_sc_s837 = 0;
                                                                        if((key.__cid) == h_s836)/*HashMap.sk:96*/
                                                                        {
                                                                          int h_s839 = 0;
                                                                          hashCode@String(key, h_s839);
                                                                          _pac_sc_s837 = h_s839;
                                                                        }
                                                                        else
                                                                        {
                                                                          int h_s841 = 0;
                                                                          HashSet@meta(h_s841);
                                                                          int _pac_sc_s842 = 0;
                                                                          if((key.__cid) == h_s841)/*HashMap.sk:96*/
                                                                          {
                                                                            int h_s844 = 0;
                                                                            hashCode@Object(key, h_s844);
                                                                            _pac_sc_s842 = h_s844;
                                                                          }
                                                                          else
                                                                          {
                                                                            int h_s846 = 0;
                                                                            FileWriterr@meta(h_s846);
                                                                            int _pac_sc_s847 = 0;
                                                                            if((key.__cid) == h_s846)/*HashMap.sk:96*/
                                                                            {
                                                                              int h_s849 = 0;
                                                                              hashCode@Object(key, h_s849);
                                                                              _pac_sc_s847 = h_s849;
                                                                            }
                                                                            else
                                                                            {
                                                                              int h_s851 = 0;
                                                                              Scanner@meta(h_s851);
                                                                              int _pac_sc_s852 = 0;
                                                                              if((key.__cid) == h_s851)/*HashMap.sk:96*/
                                                                              {
                                                                                int h_s854 = 0;
                                                                                hashCode@Object(key, h_s854);
                                                                                _pac_sc_s852 = h_s854;
                                                                              }
                                                                              else
                                                                              {
                                                                                int h_s856 = 0;
                                                                                Cipher@meta(h_s856);
                                                                                int _pac_sc_s857 = 0;
                                                                                if((key.__cid) == h_s856)/*HashMap.sk:96*/
                                                                                {
                                                                                  int h_s859 = 0;
                                                                                  hashCode@Object(key, h_s859);
                                                                                  _pac_sc_s857 = h_s859;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int h_s861 = 0;
                                                                                  PasswordManagerTest@meta(h_s861);
                                                                                  int _pac_sc_s862 = 0;
                                                                                  if((key.__cid) == h_s861)/*HashMap.sk:96*/
                                                                                  {
                                                                                    int h_s864 = 0;
                                                                                    hashCode@Object(key, h_s864);
                                                                                    _pac_sc_s862 = h_s864;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int h_s866 = 0;
                                                                                    ArrayList@meta(h_s866);
                                                                                    int _pac_sc_s867 = 0;
                                                                                    if((key.__cid) == h_s866)/*HashMap.sk:96*/
                                                                                    {
                                                                                      int h_s869 = 0;
                                                                                      hashCode@Object(key, h_s869);
                                                                                      _pac_sc_s867 = h_s869;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int h_s871 = 0;
                                                                                      Utils@meta(h_s871);
                                                                                      int _pac_sc_s872 = 0;
                                                                                      if((key.__cid) == h_s871)/*HashMap.sk:96*/
                                                                                      {
                                                                                        int h_s874 = 0;
                                                                                        hashCode@Object(key, h_s874);
                                                                                        _pac_sc_s872 = h_s874;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int h_s876 = 0;
                                                                                        SecretKeySpec@meta(h_s876);
                                                                                        int _pac_sc_s877 = 0;
                                                                                        if((key.__cid) == h_s876)/*HashMap.sk:96*/
                                                                                        {
                                                                                          int h_s879 = 0;
                                                                                          hashCode@Object(key, h_s879);
                                                                                          _pac_sc_s877 = h_s879;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int h_s881 = 0;
                                                                                          SecureRandom@meta(h_s881);
                                                                                          int _pac_sc_s882 = 0;
                                                                                          if((key.__cid) == h_s881)/*HashMap.sk:96*/
                                                                                          {
                                                                                            int h_s884 = 0;
                                                                                            hashCode@Object(key, h_s884);
                                                                                            _pac_sc_s882 = h_s884;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int h_s886 = 0;
                                                                                            File@meta(h_s886);
                                                                                            int _pac_sc_s887 = 0;
                                                                                            if((key.__cid) == h_s886)/*HashMap.sk:96*/
                                                                                            {
                                                                                              int h_s889 = 0;
                                                                                              hashCode@Object(key, h_s889);
                                                                                              _pac_sc_s887 = h_s889;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int h_s891 = 0;
                                                                                              Boolean@meta(h_s891);
                                                                                              int _pac_sc_s892 = 0;
                                                                                              if((key.__cid) == h_s891)/*HashMap.sk:96*/
                                                                                              {
                                                                                                int h_s894 = 0;
                                                                                                hashCode@Object(key, h_s894);
                                                                                                _pac_sc_s892 = h_s894;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int h_s896 = 0;
                                                                                                Object@meta(h_s896);
                                                                                                int _pac_sc_s897 = 0;
                                                                                                if((key.__cid) == h_s896)/*HashMap.sk:96*/
                                                                                                {
                                                                                                  int h_s899 = 0;
                                                                                                  hashCode@Object(key, h_s899);
                                                                                                  _pac_sc_s897 = h_s899;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  _pac_sc_s897 = 0;
                                                                                                }
                                                                                                _pac_sc_s892 = _pac_sc_s897;
                                                                                              }
                                                                                              _pac_sc_s887 = _pac_sc_s892;
                                                                                            }
                                                                                            _pac_sc_s882 = _pac_sc_s887;
                                                                                          }
                                                                                          _pac_sc_s877 = _pac_sc_s882;
                                                                                        }
                                                                                        _pac_sc_s872 = _pac_sc_s877;
                                                                                      }
                                                                                      _pac_sc_s867 = _pac_sc_s872;
                                                                                    }
                                                                                    _pac_sc_s862 = _pac_sc_s867;
                                                                                  }
                                                                                  _pac_sc_s857 = _pac_sc_s862;
                                                                                }
                                                                                _pac_sc_s852 = _pac_sc_s857;
                                                                              }
                                                                              _pac_sc_s847 = _pac_sc_s852;
                                                                            }
                                                                            _pac_sc_s842 = _pac_sc_s847;
                                                                          }
                                                                          _pac_sc_s837 = _pac_sc_s842;
                                                                        }
                                                                        _pac_sc_s832 = _pac_sc_s837;
                                                                      }
                                                                      _pac_sc_s827 = _pac_sc_s832;
                                                                    }
                                                                    _pac_sc_s822 = _pac_sc_s827;
                                                                  }
                                                                  _pac_sc_s817 = _pac_sc_s822;
                                                                }
                                                                _pac_sc_s812 = _pac_sc_s817;
                                                              }
                                                              _pac_sc_s807 = _pac_sc_s812;
                                                            }
                                                            _pac_sc_s802 = _pac_sc_s807;
                                                          }
                                                          _pac_sc_s797 = _pac_sc_s802;
                                                        }
                                                        _pac_sc_s792 = _pac_sc_s797;
                                                      }
                                                      _pac_sc_s787 = _pac_sc_s792;
                                                    }
                                                    _pac_sc_s782 = _pac_sc_s787;
                                                  }
                                                  _pac_sc_s777 = _pac_sc_s782;
                                                }
                                                _pac_sc_s772 = _pac_sc_s777;
                                              }
                                              _pac_sc_s767 = _pac_sc_s772;
                                            }
                                            _pac_sc_s762 = _pac_sc_s767;
                                          }
                                          _pac_sc_s757 = _pac_sc_s762;
                                        }
                                        _pac_sc_s752 = _pac_sc_s757;
                                      }
                                      _pac_sc_s747 = _pac_sc_s752;
                                    }
                                    _pac_sc_s742 = _pac_sc_s747;
                                  }
                                  _pac_sc_s737 = _pac_sc_s742;
                                }
                                _pac_sc_s732 = _pac_sc_s737;
                              }
                              _pac_sc_s727 = _pac_sc_s732;
                            }
                            _pac_sc_s722 = _pac_sc_s727;
                          }
                          _pac_sc_s717 = _pac_sc_s722;
                        }
                        _pac_sc_s712 = _pac_sc_s717;
                      }
                      _pac_sc_s707 = _pac_sc_s712;
                    }
                    _pac_sc_s702 = _pac_sc_s707;
                  }
                  _pac_sc_s697 = _pac_sc_s702;
                }
                _pac_sc_s692 = _pac_sc_s697;
              }
              _pac_sc_s687 = _pac_sc_s692;
            }
            _pac_sc_s682 = _pac_sc_s687;
          }
          _pac_sc_s677 = _pac_sc_s682;
        }
        _pac_sc_s672 = _pac_sc_s677;
      }
      _pac_sc_s667 = _pac_sc_s672;
    }
    Object@Object _out_s901 = null;
    putVal_int_K_V@HashMap(self, _pac_sc_s667, key, value, _out_s901, self0__HashMap_Node_s5434);
    _out = _out_s901;
    return;
  }
  /*HashMap.sk:22*/
  
void resize_int (Object self, int newSize, ref global Object@Object self0__HashMap_Node_s5430)/*HashMap.sk:22*/
  {
    int i = 0;
    int h = 0;
    int hashMod = 0;
    Array_Object@array oldElementData = self.elementData_HashMap;
    Array_Object@array newElementData = new Array_Object@array(length=newSize);
    i = 0;
    bit __sa0 = 0 < (self.capacity_HashMap);
    Object@Object k = null;
    Object@Object v = null;
    while(__sa0)
    {
      if((oldElementData.A[i]) != (null))/*HashMap.sk:30*/
      {
        h = oldElementData.A[i].hash_HashMap_Node;
        k = oldElementData.A[i].key_HashMap_Node;
        v = oldElementData.A[i].value_HashMap_Node;
        hashMod = h % newSize;
        if(hashMod < 0)/*HashMap.sk:35*/
        {
          hashMod = hashMod + newSize;
        }
        int _out_s1147 = 0;
        HashMap_Node@meta(_out_s1147);
        Object@Object _out_s1149 = null;
        HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s1147), self, k, v, h, _out_s1149, self0__HashMap_Node_s5430)//{};
        newElementData.A[hashMod] = _out_s1149;
      }
      i = i + 1;
      __sa0 = i < (self.capacity_HashMap);
    }
    self.elementData_HashMap = newElementData;
    self.capacity_HashMap = newSize;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s5503 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s5502)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s5502 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s5525 (ref int MAX_ARRAY_SIZE__ArrayList_s5524)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s5524 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:22*/
  
void String_String_byte (Object self, Array_char bytes, ref Object _out)/*String.sk:22*/
  {
    int len;
    len = bytes.length;
    self._value_String = new Array_char@array(length=len);
    for(int i = 0; i < len; i = i + 1)/*Canonical*/
    {
      self._value_String.A[i] = bytes.A[i];
    }
    self._count_String = len;
    _out = self;
    return;
  }
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:43*/
  {
    if((0 <= index) && (index < (self._count_String)))/*String.sk:44*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:154*/
  {
    _out = 0;
    int _out_s2654 = 0;
    String@meta(_out_s2654);
    if((obj.__cid) == _out_s2654)/*String.sk:156*/
    {
      _out = 1;
      int sLen_s2656 = 0;
      String@meta(sLen_s2656);
      int _pac_sc_s2657 = 0;
      if((obj.__cid) == sLen_s2656)/*String.sk:159*/
      {
        int sLen_s2659 = 0;
        length@String(obj, sLen_s2659);
        _pac_sc_s2657 = sLen_s2659;
      }
      else
      {
        _pac_sc_s2657 = 0;
      }
      int tLen_s2661 = 0;
      String@meta(tLen_s2661);
      int _pac_sc_s2662 = 0;
      if((self.__cid) == tLen_s2661)/*String.sk:160*/
      {
        int tLen_s2664 = 0;
        length@String(self, tLen_s2664);
        _pac_sc_s2662 = tLen_s2664;
      }
      else
      {
        _pac_sc_s2662 = 0;
      }
      if(_pac_sc_s2657 != _pac_sc_s2662)/*String.sk:161*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2657) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:163*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:214*/
  
void getBytes (Object self, ref Array_char _out)/*String.sk:214*/
  {
    int _out_s2666 = 0;
    String@meta(_out_s2666);
    Object@Object _pac_sc_s2667 = null;
    if((self.__cid) == _out_s2666)/*String.sk:215*/
    {
      Object@Object _out_s2669 = null;
      toString@String(self, _out_s2669);
      _pac_sc_s2667 = _out_s2669;
    }
    else
    {
      _pac_sc_s2667 = null;
    }
    Array_char@array _out_s2671 = null;
    getBytes_String(_pac_sc_s2667, _out_s2671)//{};
    _out = _out_s2671;
    return;
  }
  /*String.sk:218*/
  
void getBytes_String (Object str, ref Array_char _out)/*String.sk:218*/
  {
    int len_s2673 = 0;
    String@meta(len_s2673);
    int _pac_sc_s2674 = 0;
    if((str.__cid) == len_s2673)/*String.sk:219*/
    {
      int len_s2676 = 0;
      length@String(str, len_s2676);
      _pac_sc_s2674 = len_s2676;
    }
    else
    {
      _pac_sc_s2674 = 0;
    }
    _out = new Array_char@array(length=_pac_sc_s2674);
    for(int i = 0; i < _pac_sc_s2674; i = i + 1)/*Canonical*/
    {
      int _out_s2678 = 0;
      String@meta(_out_s2678);
      char _pac_sc_s2679 = '\0';
      if((str.__cid) == _out_s2678)/*String.sk:222*/
      {
        char _out_s2681 = '\0';
        charAt_int@String(str, i, _out_s2681);
        _pac_sc_s2679 = _out_s2681;
      }
      else
      {
        _pac_sc_s2679 = '\0';
      }
      _out.A[i] = _pac_sc_s2679;
    }
    return;
  }
  /*String.sk:171*/
  
void hashCode (Object self, ref int _out)/*String.sk:171*/
  {
    int n;
    int hash;
    int temp;
    n = self._count_String;
    hash = 0;
    if(n == 0)/*String.sk:173*/
    {
      _out = 0;
      return;
    }
    for(int i = 0; i < n; i = i + 1)/*Canonical*/
    {
      int temp_s2683 = 0;
      String@meta(temp_s2683);
      char _pac_sc_s2684 = '\0';
      if((self.__cid) == temp_s2683)/*String.sk:177*/
      {
        char temp_s2686 = '\0';
        charAt_int@String(self, i, temp_s2686);
        _pac_sc_s2684 = temp_s2686;
      }
      else
      {
        _pac_sc_s2684 = '\0';
      }
      temp = _pac_sc_s2684;
      for(int j = 0; j < ((n - 1) - i); j = j + 1)/*Canonical*/
      {
        temp = temp * 31;
      }
      hash = hash + temp;
    }
    _out = hash;
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref int _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /*String.sk:52*/
  
void toString (Object self, ref Object _out)/*String.sk:52*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s5515 (ref int INITIAL_CAPACITY__TreeSet_s5514)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s5514 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s5551 (ref int RESIZE_FACTOR__TreeSet_s5550)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s5550 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Collections*/
package Collections{
  /* END PACKAGE Collections*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s5513 (ref int INITIAL_CAPACITY__HashSet_s5512)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s5512 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s5549 (ref int RESIZE_FACTOR__HashSet_s5548)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s5548 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:216*/
  
void charValue (Object self, ref char _out)/*Character.sk:216*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:220*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Character.sk:220*/
  {
    int _out_s3834 = 0;
    Character@meta(_out_s3834);
    if((obj.__cid) == _out_s3834)/*Character.sk:221*/
    {
      int _out_s3836 = 0;
      Character@meta(_out_s3836);
      char _pac_sc_s3837 = '\0';
      if((obj.__cid) == _out_s3836)/*Character.sk:222*/
      {
        char _out_s3839 = '\0';
        charValue@Character(obj, _out_s3839);
        _pac_sc_s3837 = _out_s3839;
      }
      else
      {
        _pac_sc_s3837 = '\0';
      }
      _out = (self.value_Character) == _pac_sc_s3837;
      return;
    }
    _out = 0;
    return;
  }
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s5449 (ref char COMBINING_SPACING_MARK__Character_s5448)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s5448 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s5451 (ref char CONNECTOR_PUNCTUATION__Character_s5450)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s5450 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s5453 (ref char CONTROL__Character_s5452)/*Character.sk:71*/
  {
    CONTROL__Character_s5452 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s5455 (ref char CURRENCY_SYMBOL__Character_s5454)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s5454 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s5457 (ref char DASH_PUNCTUATION__Character_s5456)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s5456 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s5459 (ref char DECIMAL_DIGIT_NUMBER__Character_s5458)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s5458 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s5463 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s5462)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s5462 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5465 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5464)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5464 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5467 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5466)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5466 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5469 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5468)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5468 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5471 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5470)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5470 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5473 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5472)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5472 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5475 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5474)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5474 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5477 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5476)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5476 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5479 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5478)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5478 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s5481 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s5480)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s5480 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s5483 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s5482)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s5482 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5485 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5484)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5484 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5487 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5486)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5486 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5489 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5488)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5488 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5491 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5490)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5490 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5493 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5492)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5492 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5495 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5494)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5494 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5497 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5496)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5496 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s5499 (ref char DIRECTIONALITY_UNDEFINED__Character_s5498)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s5498 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s5501 (ref char DIRECTIONALITY_WHITESPACE__Character_s5500)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s5500 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s5505 (ref char ENCLOSING_MARK__Character_s5504)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s5504 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s5507 (ref char END_PUNCTUATION__Character_s5506)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s5506 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s5509 (ref char FINAL_QUOTE_PUNCTUATION__Character_s5508)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s5508 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s5511 (ref char FORMAT__Character_s5510)/*Character.sk:75*/
  {
    FORMAT__Character_s5510 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s5517 (ref char LETTER_NUMBER__Character_s5516)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s5516 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s5519 (ref char LINE_SEPARATOR__Character_s5518)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s5518 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s5521 (ref char LOWERCASE_LETTER__Character_s5520)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s5520 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s5523 (ref char MATH_SYMBOL__Character_s5522)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s5522 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s5527 (ref int MAX_RADIX__Character_s5526)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s5526 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s5529 (ref int MIN_RADIX__Character_s5528)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s5528 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s5531 (ref char MODIFIER_LETTER__Character_s5530)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s5530 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s5533 (ref char MODIFIER_SYMBOL__Character_s5532)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s5532 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s5535 (ref char NON_SPACING_MARK__Character_s5534)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s5534 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s5537 (ref char OTHER_LETTER__Character_s5536)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s5536 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s5539 (ref char OTHER_NUMBER__Character_s5538)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s5538 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s5541 (ref char OTHER_PUNCTUATION__Character_s5540)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s5540 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s5543 (ref char OTHER_SYMBOL__Character_s5542)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s5542 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s5545 (ref char PARAGRAPH_SEPARATOR__Character_s5544)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s5544 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s5547 (ref char PRIVATE_USE__Character_s5546)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s5546 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s5553 (ref char SPACE_SEPARATOR__Character_s5552)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s5552 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s5555 (ref char START_PUNCTUATION__Character_s5554)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s5554 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s5557 (ref char SURROGATE__Character_s5556)/*Character.sk:83*/
  {
    SURROGATE__Character_s5556 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s5559 (ref char TITLECASE_LETTER__Character_s5558)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s5558 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s5561 (ref char UNASSIGNED__Character_s5560)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s5560 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s5563 (ref char UPPERCASE_LETTER__Character_s5562)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s5562 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE PasswordManagerTest*/
package PasswordManagerTest{
  /*Passwor..erTest.sk:7*/
  
void _main (ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5423, ref global Object@Object self0__HashMap_Node_s5432)/*Passwor..erTest.sk:7*/
  {
    int self_s3841 = 0;
    Object@meta(self_s3841);
    Object@Object self_s3843 = null;
    Object_Object@Object(new Object@Object(__cid=self_s3841), self_s3843)//{};
    int pasman_s3845 = 0;
    PasswordManager@meta(pasman_s3845);
    int pasman_s3847 = 0;
    String@meta(pasman_s3847);
    Object@Object pasman_s3849 = null;
    String_String_char_int_int@String(new Object@Object(__cid=pasman_s3847), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, pasman_s3849)//{};
    Object@Object pasman_s3851 = null;
    PasswordManager_PasswordManager_String@PasswordManager(new Object@Object(__cid=pasman_s3845), pasman_s3849, pasman_s3851, DEFAULT_INITIAL_CAPACITY__HashMap_s5423)//{};
    int _out_s3853 = 0;
    PasswordManager@meta(_out_s3853);
    if((pasman_s3851.__cid) == _out_s3853)/*Passwor..erTest.sk:10*/
    {
      int _out_s3855 = 0;
      String@meta(_out_s3855);
      Object@Object _out_s3857 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3855), new Array_char@array(length=6, A={'y','a','h','o','o','\0'}), 0, 5, _out_s3857)//{};
      int _out_s3859 = 0;
      String@meta(_out_s3859);
      Object@Object _out_s3861 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3859), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3861)//{};
      addPassword_String_String@PasswordManager(pasman_s3851, _out_s3857, _out_s3861, self0__HashMap_Node_s5432)//{};
    }
    int _out_s3863 = 0;
    PasswordManager@meta(_out_s3863);
    if((pasman_s3851.__cid) == _out_s3863)/*Passwor..erTest.sk:12*/
    {
      int _out_s3865 = 0;
      String@meta(_out_s3865);
      Object@Object _out_s3867 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3865), new Array_char@array(length=7, A={'g','o','o','g','l','e','\0'}), 0, 6, _out_s3867)//{};
      int _out_s3869 = 0;
      String@meta(_out_s3869);
      Object@Object _out_s3871 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3869), new Array_char@array(length=8, A={'5','4','4','1','9','4','4','\0'}), 0, 7, _out_s3871)//{};
      addPassword_String_String@PasswordManager(pasman_s3851, _out_s3867, _out_s3871, self0__HashMap_Node_s5432)//{};
    }
    int pass1_s3873 = 0;
    PasswordManager@meta(pass1_s3873);
    Object@Object _pac_sc_s3874 = null;
    if((pasman_s3851.__cid) == pass1_s3873)/*Passwor..erTest.sk:14*/
    {
      int pass1_s3876 = 0;
      String@meta(pass1_s3876);
      Object@Object pass1_s3878 = null;
      String_String_char_int_int@String(new Object@Object(__cid=pass1_s3876), new Array_char@array(length=7, A={'g','o','o','g','l','e','\0'}), 0, 6, pass1_s3878)//{};
      Object@Object pass1_s3880 = null;
      getPass_String@PasswordManager(pasman_s3851, pass1_s3878, pass1_s3880)//{};
      _pac_sc_s3874 = pass1_s3880;
    }
    else
    {
      _pac_sc_s3874 = null;
    }
    int _out_s3882 = 0;
    String@meta(_out_s3882);
    bit _pac_sc_s3883 = 0;
    if((_pac_sc_s3874.__cid) == _out_s3882)/*Passwor..erTest.sk:15*/
    {
      int _out_s3885 = 0;
      String@meta(_out_s3885);
      Object@Object _out_s3887 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3885), new Array_char@array(length=8, A={'5','4','4','1','9','4','4','\0'}), 0, 7, _out_s3887)//{};
      bit _out_s3889 = 0;
      equals_Object@String(_pac_sc_s3874, _out_s3887, _out_s3889)//{};
      _pac_sc_s3883 = _out_s3889;
    }
    else
    {
      _pac_sc_s3883 = 0;
    }
    assert (_pac_sc_s3883); //Assert at Passwor..erTest.sk:15 (0)
    int pass2_s3891 = 0;
    PasswordManager@meta(pass2_s3891);
    Object@Object _pac_sc_s3892 = null;
    if((pasman_s3851.__cid) == pass2_s3891)/*Passwor..erTest.sk:16*/
    {
      int pass2_s3894 = 0;
      String@meta(pass2_s3894);
      Object@Object pass2_s3896 = null;
      String_String_char_int_int@String(new Object@Object(__cid=pass2_s3894), new Array_char@array(length=6, A={'y','a','h','o','o','\0'}), 0, 5, pass2_s3896)//{};
      Object@Object pass2_s3898 = null;
      getPass_String@PasswordManager(pasman_s3851, pass2_s3896, pass2_s3898)//{};
      _pac_sc_s3892 = pass2_s3898;
    }
    else
    {
      _pac_sc_s3892 = null;
    }
    int _out_s3900 = 0;
    String@meta(_out_s3900);
    bit _pac_sc_s3901 = 0;
    if((_pac_sc_s3892.__cid) == _out_s3900)/*Passwor..erTest.sk:17*/
    {
      int _out_s3903 = 0;
      String@meta(_out_s3903);
      Object@Object _out_s3905 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3903), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3905)//{};
      bit _out_s3907 = 0;
      equals_Object@String(_pac_sc_s3892, _out_s3905, _out_s3907)//{};
      _pac_sc_s3901 = _out_s3907;
    }
    else
    {
      _pac_sc_s3901 = 0;
    }
    assert (_pac_sc_s3901); //Assert at Passwor..erTest.sk:17 (0)
    int _out_s3909 = 0;
    PasswordManager@meta(_out_s3909);
    bit _pac_sc_s3910 = 0;
    if((pasman_s3851.__cid) == _out_s3909)/*Passwor..erTest.sk:18*/
    {
      int _out_s3912 = 0;
      String@meta(_out_s3912);
      Object@Object _out_s3914 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3912), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3914)//{};
      bit _out_s3916 = 0;
      checkMasterPassword_String@PasswordManager(pasman_s3851, _out_s3914, _out_s3916)//{};
      _pac_sc_s3910 = _out_s3916;
    }
    else
    {
      _pac_sc_s3910 = 0;
    }
    assert (!(_pac_sc_s3910)); //Assert at Passwor..erTest.sk:18 (0)
    int _out_s3918 = 0;
    PasswordManager@meta(_out_s3918);
    bit _pac_sc_s3919 = 0;
    if((pasman_s3851.__cid) == _out_s3918)/*Passwor..erTest.sk:19*/
    {
      int _out_s3921 = 0;
      String@meta(_out_s3921);
      Object@Object _out_s3923 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3921), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, _out_s3923)//{};
      bit _out_s3925 = 0;
      checkMasterPassword_String@PasswordManager(pasman_s3851, _out_s3923, _out_s3925)//{};
      _pac_sc_s3919 = _out_s3925;
    }
    else
    {
      _pac_sc_s3919 = 0;
    }
    assert (_pac_sc_s3919); //Assert at Passwor..erTest.sk:19 (0)
  }
  /*Passwor..erTest.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*Passwor..erTest.sk:7*/
  {
    global int DEFAULT_INITIAL_CAPACITY__HashMap_s5444 = 0;
    glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5461@HashMap(DEFAULT_INITIAL_CAPACITY__HashMap_s5444);
    global Object@Object self0__HashMap_Node_s5441 = null;
    _main(DEFAULT_INITIAL_CAPACITY__HashMap_s5444, self0__HashMap_Node_s5441);
  }
  /*Passwor..erTest.sk:7*/
  
void main__WrapperNospec ()/*Passwor..erTest.sk:7*/
  { }
  /* END PACKAGE PasswordManagerTest*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE PasswordManager*/
package PasswordManager{
  /*Passwor..anager.sk:11*/
  
void PasswordManager_PasswordManager_String (Object self, Object masterPassword, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5433)/*Passwor..anager.sk:11*/
  {
    int _out_s3964 = 0;
    Cryptographer@meta(_out_s3964);
    Object@Object _out_s3966 = null;
    Cryptographer_Cryptographer@Cryptographer(new Object@Object(__cid=_out_s3964), _out_s3966)//{};
    self.cryptographer_PasswordManager = _out_s3966;
    int _out_s3968 = 0;
    PasswordMap@meta(_out_s3968);
    Object@Object _out_s3970 = null;
    PasswordMap_PasswordMap@PasswordMap(new Object@Object(__cid=_out_s3968), _out_s3970, DEFAULT_INITIAL_CAPACITY__HashMap_s5433)//{};
    self.passMap_PasswordManager = _out_s3970;
    _out = self;
    return;
  }
  /*Passwor..anager.sk:31*/
  
void addPassword_String_String (Object self, Object domain, Object passWord, ref global Object@Object self0__HashMap_Node_s5446)/*Passwor..anager.sk:31*/
  {
    int PassEncryption_s3952 = 0;
    Cryptographer@meta(PassEncryption_s3952);
    Object@Object _pac_sc_s3953 = null;
    if((self.cryptographer_PasswordManager.__cid) == PassEncryption_s3952)/*Passwor..anager.sk:32*/
    {
      Object@Object PassEncryption_s3955 = null;
      encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord, PassEncryption_s3955);
      _pac_sc_s3953 = PassEncryption_s3955;
    }
    else
    {
      _pac_sc_s3953 = null;
    }
    int domainHash_s3957 = 0;
    Cryptographer@meta(domainHash_s3957);
    Object@Object _pac_sc_s3958 = null;
    if((self.cryptographer_PasswordManager.__cid) == domainHash_s3957)/*Passwor..anager.sk:33*/
    {
      Object@Object domainHash_s3960 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, domain, domainHash_s3960);
      _pac_sc_s3958 = domainHash_s3960;
    }
    else
    {
      _pac_sc_s3958 = null;
    }
    int _out_s3962 = 0;
    PasswordMap@meta(_out_s3962);
    if((self.passMap_PasswordManager.__cid) == _out_s3962)/*Passwor..anager.sk:34*/
    {
      add_String_String@PasswordMap(self.passMap_PasswordManager, _pac_sc_s3958, _pac_sc_s3953, self0__HashMap_Node_s5446);
    }
  }
  /*Passwor..anager.sk:23*/
  
void checkMasterPassword_String (Object self, Object masterPassword, ref bit _out)/*Passwor..anager.sk:23*/
  {
    int passHash_s3927 = 0;
    Cryptographer@meta(passHash_s3927);
    Object@Object _pac_sc_s3928 = null;
    if((self.cryptographer_PasswordManager.__cid) == passHash_s3927)/*Passwor..anager.sk:24*/
    {
      Object@Object passHash_s3930 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, masterPassword, passHash_s3930);
      _pac_sc_s3928 = passHash_s3930;
    }
    else
    {
      _pac_sc_s3928 = null;
    }
    int beq_s3932 = 0;
    String@meta(beq_s3932);
    bit _pac_sc_s3933 = 0;
    if((_pac_sc_s3928.__cid) == beq_s3932)/*Passwor..anager.sk:25*/
    {
      bit beq_s3935 = 0;
      equals_Object@String(_pac_sc_s3928, self.passMap_PasswordManager.masterHash_PasswordMap, beq_s3935);
      _pac_sc_s3933 = beq_s3935;
    }
    else
    {
      _pac_sc_s3933 = 0;
    }
    if(_pac_sc_s3933)/*Passwor..anager.sk:27*/
    {
      _out = 1;
      return;
    }
    _out = 0;
    return;
  }
  /*Passwor..anager.sk:51*/
  
void getPass_String (Object self, Object domain, ref Object _out)/*Passwor..anager.sk:51*/
  {
    int domainHash_s3937 = 0;
    Cryptographer@meta(domainHash_s3937);
    Object@Object _pac_sc_s3938 = null;
    if((self.cryptographer_PasswordManager.__cid) == domainHash_s3937)/*Passwor..anager.sk:52*/
    {
      Object@Object domainHash_s3940 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, domain, domainHash_s3940);
      _pac_sc_s3938 = domainHash_s3940;
    }
    else
    {
      _pac_sc_s3938 = null;
    }
    int PassEncryption_s3942 = 0;
    PasswordMap@meta(PassEncryption_s3942);
    Object@Object _pac_sc_s3943 = null;
    if((self.passMap_PasswordManager.__cid) == PassEncryption_s3942)/*Passwor..anager.sk:53*/
    {
      Object@Object PassEncryption_s3945 = null;
      get_String@PasswordMap(self.passMap_PasswordManager, _pac_sc_s3938, PassEncryption_s3945);
      _pac_sc_s3943 = PassEncryption_s3945;
    }
    else
    {
      _pac_sc_s3943 = null;
    }
    int _out_s3947 = 0;
    Cryptographer@meta(_out_s3947);
    Object@Object _pac_sc_s3948 = null;
    if((self.cryptographer_PasswordManager.__cid) == _out_s3947)/*Passwor..anager.sk:54*/
    {
      Object@Object _out_s3950 = null;
      decrypt_String@Cryptographer(self.cryptographer_PasswordManager, _pac_sc_s3943, _out_s3950);
      _pac_sc_s3948 = _out_s3950;
    }
    else
    {
      _pac_sc_s3948 = null;
    }
    _out = _pac_sc_s3948;
    return;
  }
  /* END PACKAGE PasswordManager*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /*SecureRandom.sk:3*/
  
void SecureRandom_SecureRandom (Object self, ref Object _out)/*SecureRandom.sk:3*/
  {
    _out = self;
    return;
  }
  /*SecureRandom.sk:7*/
  
void nextBytes_byte (Object self, Array_char buf)/*SecureRandom.sk:7*/
  {
    bit __sa19 = 0 < (buf.length);
    int i = 0;
    while(__sa19)
    {
      buf.A[i] = ((char)i);
      i = i + 1;
      __sa19 = i < (buf.length);
    }
  }
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE CryptoCipherFactory*/
package CryptoCipherFactory{
  /* END PACKAGE CryptoCipherFactory*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /*HashMap_Node.sk:10*/
  
void HashMap_Node_HashMap_Node_HashMap_K_V_int (Object self, Object self_0, Object key, Object value, int hash, ref Object _out, ref global Object@Object self0__HashMap_Node_s5394)/*HashMap_Node.sk:10*/
  {
    self0__HashMap_Node_s5394 = self_0;
    self.key_HashMap_Node = key;
    self.value_HashMap_Node = value;
    self.hash_HashMap_Node = hash;
    _out = self;
    return;
  }
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /*Mac.sk:3*/
  
void Mac_Mac (Object self, ref Object _out)/*Mac.sk:3*/
  {
    _out = self;
    return;
  }
  /*Mac.sk:14*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Mac.sk:14*/
  {
    _out = text;
    return;
  }
  /*Mac.sk:7*/
  
void getInstance_String (Object type, ref Object _out)/*Mac.sk:7*/
  {
    int _out_s4004 = 0;
    Mac@meta(_out_s4004);
    Object@Object _out_s4006 = null;
    Mac_Mac(new Object@Object(__cid=_out_s4004), _out_s4006)//{};
    _out = _out_s4006;
    return;
  }
  /*Mac.sk:11*/
  
void init_SecretKeySpec (Object self, Object key)/*Mac.sk:11*/
  { }
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /*Float.sk:29*/
  
void equals_Object (Object self, Object anotherFloat, ref bit _out)/*Float.sk:29*/
  {
    int _out_s4253 = 0;
    Float@meta(_out_s4253);
    if((anotherFloat.__cid) == _out_s4253)/*Float.sk:30*/
    {
      if((anotherFloat.value_Float) == (self.value_Float))/*Float.sk:32*/
      {
        _out = 1;
        return;
      }
    }
    _out = 0;
    return;
  }
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE PasswordMap*/
package PasswordMap{
  /*PasswordMap.sk:3*/
  
void PasswordMap_PasswordMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5437)/*PasswordMap.sk:3*/
  {
    int _out_s4273 = 0;
    HashMap@meta(_out_s4273);
    Object@Object _out_s4275 = null;
    HashMap_HashMap@HashMap(new Object@Object(__cid=_out_s4273), _out_s4275, DEFAULT_INITIAL_CAPACITY__HashMap_s5437)//{};
    self.passMap_PasswordMap = _out_s4275;
    int c_s4277 = 0;
    Cryptographer@meta(c_s4277);
    Object@Object c_s4279 = null;
    Cryptographer_Cryptographer@Cryptographer(new Object@Object(__cid=c_s4277), c_s4279)//{};
    int _out_s4281 = 0;
    Cryptographer@meta(_out_s4281);
    Object@Object _pac_sc_s4282 = null;
    if((c_s4279.__cid) == _out_s4281)/*PasswordMap.sk:6*/
    {
      int _out_s4284 = 0;
      String@meta(_out_s4284);
      Object@Object _out_s4286 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s4284), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, _out_s4286)//{};
      Object@Object _out_s4288 = null;
      hash_String@Cryptographer(c_s4279, _out_s4286, _out_s4288)//{};
      _pac_sc_s4282 = _out_s4288;
    }
    else
    {
      _pac_sc_s4282 = null;
    }
    self.masterHash_PasswordMap = _pac_sc_s4282;
    _out = self;
    return;
  }
  /*PasswordMap.sk:10*/
  
void add_String_String (Object self, Object tag, Object passEncryption, ref global Object@Object self0__HashMap_Node_s5435)/*PasswordMap.sk:10*/
  {
    int _out_s4268 = 0;
    HashMap@meta(_out_s4268);
    if((self.passMap_PasswordMap.__cid) == _out_s4268)/*PasswordMap.sk:11*/
    {
      Object@Object _out_s4271 = null;
      put_K_V@HashMap(self.passMap_PasswordMap, tag, passEncryption, _out_s4271, self0__HashMap_Node_s5435);
    }
  }
  /*PasswordMap.sk:18*/
  
void get_String (Object self, Object domainHash, ref Object _out)/*PasswordMap.sk:18*/
  {
    int _out_s4263 = 0;
    HashMap@meta(_out_s4263);
    Object@Object _pac_sc_s4264 = null;
    if((self.passMap_PasswordMap.__cid) == _out_s4263)/*PasswordMap.sk:19*/
    {
      Object@Object _out_s4266 = null;
      get_K@HashMap(self.passMap_PasswordMap, domainHash, _out_s4266);
      _pac_sc_s4264 = _out_s4266;
    }
    else
    {
      _pac_sc_s4264 = null;
    }
    _out = _pac_sc_s4264;
    return;
  }
  /* END PACKAGE PasswordMap*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:4*/
  
void AbstractQueue (ref int _out)/*meta.sk:4*/
  {
    _out = 51;
    return;
  }
  /*meta.sk:6*/
  
void ArrayDeque (ref int _out)/*meta.sk:6*/
  {
    _out = 53;
    return;
  }
  /*meta.sk:7*/
  
void ArrayDeque_DequeNode (ref int _out)/*meta.sk:7*/
  {
    _out = 54;
    return;
  }
  /*meta.sk:8*/
  
void ArrayList (ref int _out)/*meta.sk:8*/
  {
    _out = 41;
    return;
  }
  /*meta.sk:9*/
  
void Arrays (ref int _out)/*meta.sk:9*/
  {
    _out = 46;
    return;
  }
  /*meta.sk:10*/
  
void Assert (ref int _out)/*meta.sk:10*/
  {
    _out = 38;
    return;
  }
  /*meta.sk:11*/
  
void Boolean (ref int _out)/*meta.sk:11*/
  {
    _out = 33;
    return;
  }
  /*meta.sk:12*/
  
void BufferedReader (ref int _out)/*meta.sk:12*/
  {
    _out = 6;
    return;
  }
  /*meta.sk:13*/
  
void BufferedWriter (ref int _out)/*meta.sk:13*/
  {
    _out = 25;
    return;
  }
  /*meta.sk:15*/
  
void Character (ref int _out)/*meta.sk:15*/
  {
    _out = 21;
    return;
  }
  /*meta.sk:16*/
  
void Cipher (ref int _out)/*meta.sk:16*/
  {
    _out = 43;
    return;
  }
  /*meta.sk:17*/
  
void Collections (ref int _out)/*meta.sk:17*/
  {
    _out = 14;
    return;
  }
  /*meta.sk:19*/
  
void CryptoCipherFactory (ref int _out)/*meta.sk:19*/
  {
    _out = 55;
    return;
  }
  /*meta.sk:20*/
  
void CryptoCipherFactory_CipherProvider (ref int _out)/*meta.sk:20*/
  {
    _out = 56;
    return;
  }
  /*meta.sk:21*/
  
void Cryptographer (ref int _out)/*meta.sk:21*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:23*/
  
void File (ref int _out)/*meta.sk:23*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:24*/
  
void FileOutputStream (ref int _out)/*meta.sk:24*/
  {
    _out = 42;
    return;
  }
  /*meta.sk:25*/
  
void FileReaderr (ref int _out)/*meta.sk:25*/
  {
    _out = 32;
    return;
  }
  /*meta.sk:26*/
  
void FileWriterr (ref int _out)/*meta.sk:26*/
  {
    _out = 19;
    return;
  }
  /*meta.sk:27*/
  
void Float (ref int _out)/*meta.sk:27*/
  {
    _out = 23;
    return;
  }
  /*meta.sk:28*/
  
void HashMap (ref int _out)/*meta.sk:28*/
  {
    _out = 48;
    return;
  }
  /*meta.sk:29*/
  
void HashMap_Node (ref int _out)/*meta.sk:29*/
  {
    _out = 49;
    return;
  }
  /*meta.sk:30*/
  
void HashSet (ref int _out)/*meta.sk:30*/
  {
    _out = 12;
    return;
  }
  /*meta.sk:31*/
  
void Integer (ref int _out)/*meta.sk:31*/
  {
    _out = 34;
    return;
  }
  /*meta.sk:32*/
  
void IvParameterSpec (ref int _out)/*meta.sk:32*/
  {
    _out = 28;
    return;
  }
  /*meta.sk:33*/
  
void KerberosKey (ref int _out)/*meta.sk:33*/
  {
    _out = 39;
    return;
  }
  /*meta.sk:35*/
  
void KeyGenerator (ref int _out)/*meta.sk:35*/
  {
    _out = 24;
    return;
  }
  /*meta.sk:36*/
  
void KeyStore (ref int _out)/*meta.sk:36*/
  {
    _out = 52;
    return;
  }
  /*meta.sk:37*/
  
void LinkedList (ref int _out)/*meta.sk:37*/
  {
    _out = 16;
    return;
  }
  /*meta.sk:39*/
  
void Mac (ref int _out)/*meta.sk:39*/
  {
    _out = 58;
    return;
  }
  /*meta.sk:42*/
  
void Number (ref int _out)/*meta.sk:42*/
  {
    _out = 35;
    return;
  }
  /*meta.sk:43*/
  
void Object (ref int _out)/*meta.sk:43*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:44*/
  
void PasswordManager (ref int _out)/*meta.sk:44*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:45*/
  
void PasswordManagerTest (ref int _out)/*meta.sk:45*/
  {
    _out = 5;
    return;
  }
  /*meta.sk:46*/
  
void PasswordMap (ref int _out)/*meta.sk:46*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:47*/
  
void PrintStream (ref int _out)/*meta.sk:47*/
  {
    _out = 18;
    return;
  }
  /*meta.sk:49*/
  
void Properties (ref int _out)/*meta.sk:49*/
  {
    _out = 15;
    return;
  }
  /*meta.sk:51*/
  
void Scanner (ref int _out)/*meta.sk:51*/
  {
    _out = 50;
    return;
  }
  /*meta.sk:53*/
  
void SecretKeySpec (ref int _out)/*meta.sk:53*/
  {
    _out = 27;
    return;
  }
  /*meta.sk:54*/
  
void SecureRandom (ref int _out)/*meta.sk:54*/
  {
    _out = 47;
    return;
  }
  /*meta.sk:56*/
  
void Stack (ref int _out)/*meta.sk:56*/
  {
    _out = 22;
    return;
  }
  /*meta.sk:57*/
  
void String (ref int _out)/*meta.sk:57*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:58*/
  
void StringBuffer (ref int _out)/*meta.sk:58*/
  {
    _out = 13;
    return;
  }
  /*meta.sk:59*/
  
void StringBuilder (ref int _out)/*meta.sk:59*/
  {
    _out = 44;
    return;
  }
  /*meta.sk:60*/
  
void System (ref int _out)/*meta.sk:60*/
  {
    _out = 45;
    return;
  }
  /*meta.sk:61*/
  
void TreeMap (ref int _out)/*meta.sk:61*/
  {
    _out = 37;
    return;
  }
  /*meta.sk:62*/
  
void TreeSet (ref int _out)/*meta.sk:62*/
  {
    _out = 10;
    return;
  }
  /*meta.sk:63*/
  
void Utils (ref int _out)/*meta.sk:63*/
  {
    _out = 40;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE FileOutputStream*/
package FileOutputStream{
  /* END PACKAGE FileOutputStream*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      bit bool_Boolean;
      Object fname_File;
      int size_File;
      Array_char key_SecretKeySpec;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      Object file_Scanner;
      Object fname_FileWriterr;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      Array_char _value_String;
      int _count_String;
      Object map_Properties;
      Object out_PrintStream;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      Object path_FileReaderr;
      Object data_FileReaderr;
      int position_FileReaderr;
      Object GCMSecretKey_Cryptographer;
      Object Hash_secret_key_Cryptographer;
      Object sha256_HMAC_Cryptographer;
      Object myCypherOut_Cryptographer;
      Array_char randomIv_Cryptographer;
      Object ivParameterSpec_Cryptographer;
      int MAX_LENGTH_PASSWORD_Cryptographer;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      float value_Float;
      char value_Character;
      Object reader_BufferedReader;
      Object passMap_PasswordMap;
      Object masterHash_PasswordMap;
      Object mode_KeyGenerator;
      Object cryptographer_PasswordManager;
      Object passMap_PasswordManager;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Object CLASSES_KEY_CryptoCipherFactory;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Object writer_BufferedWriter;
      int value_Integer;
      Object path_FileOutputStream;
      Object instance_KeyStore;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = self;
    return;
  }
  /*Object.sk:29*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Object.sk:29*/
  {
    _out = self == obj;
    return;
  }
  /*Object.sk:33*/
  
void hashCode (Object self, ref int _out)/*Object.sk:33*/
  {
    _out = 0;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Arrays*/
package Arrays{
  /* END PACKAGE Arrays*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE AlgorithmParameterSpec*/
package AlgorithmParameterSpec{
  /* END PACKAGE AlgorithmParameterSpec*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE CryptoCipherFactory_CipherProvider*/
package CryptoCipherFactory_CipherProvider{
  /* END PACKAGE CryptoCipherFactory_CipherProvider*/
}
/* BEGIN PACKAGE Properties*/
package Properties{
  /* END PACKAGE Properties*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE PrintStream*/
package PrintStream{
  /* END PACKAGE PrintStream*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE KeyStore*/
package KeyStore{
  /* END PACKAGE KeyStore*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:32*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Integer.sk:32*/
  {
    int _out_s5171 = 0;
    Integer@meta(_out_s5171);
    if((obj.__cid) == _out_s5171)/*Integer.sk:33*/
    {
      int _out_s5173 = 0;
      Integer@meta(_out_s5173);
      int _pac_sc_s5174 = 0;
      if((obj.__cid) == _out_s5173)/*Integer.sk:34*/
      {
        int _out_s5176 = 0;
        intValue@Integer(obj, _out_s5176);
        _pac_sc_s5174 = _out_s5176;
      }
      else
      {
        _pac_sc_s5174 = 0;
      }
      _out = (self.value_Integer) == _pac_sc_s5174;
      return;
    }
    _out = 0;
    return;
  }
  /*Integer.sk:71*/
  
void hashCode (Object self, ref int _out)/*Integer.sk:71*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:20*/
  
void intValue (Object self, ref int _out)/*Integer.sk:20*/
  {
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE Utils*/
package Utils{
  /* END PACKAGE Utils*/
}
/* BEGIN PACKAGE BufferedReader*/
package BufferedReader{
  /* END PACKAGE BufferedReader*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Array_char val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    _out = self;
    return;
  }
  /*Cipher.sk:32*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Cipher.sk:32*/
  {
    int k_s5260 = 0;
    KerberosKey@meta(k_s5260);
    Array_char@array _pac_sc_s5261 = null;
    if((self.key_Cipher.__cid) == k_s5260)/*Cipher.sk:33*/
    {
      Array_char@array k_s5263 = null;
      getEncoded@KerberosKey(self.key_Cipher, k_s5263);
      _pac_sc_s5261 = k_s5263;
    }
    else
    {
      int k_s5265 = 0;
      SecretKeySpec@meta(k_s5265);
      Array_char@array _pac_sc_s5266 = null;
      if((self.key_Cipher.__cid) == k_s5265)/*Cipher.sk:33*/
      {
        Array_char@array k_s5268 = null;
        getEncoded@SecretKeySpec(self.key_Cipher, k_s5268);
        _pac_sc_s5266 = k_s5268;
      }
      else
      {
        _pac_sc_s5266 = null;
      }
      _pac_sc_s5261 = _pac_sc_s5266;
    }
    _out = new Array_char@array(length=text.length);
    if((_pac_sc_s5261.length) == 0)/*Cipher.sk:35*/
    {
      return;
    }
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:38*/
    {
      bit __sa29 = 0 < (text.length);
      int i = 0;
      while(__sa29)
      {
        _out.A[i] = (text.A[i]) + (_pac_sc_s5261.A[i % (_pac_sc_s5261.length)]);
        i = i + 1;
        __sa29 = i < (text.length);
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:43*/
      {
        bit __sa30 = 0 < (text.length);
        int i_0 = 0;
        while(__sa30)
        {
          _out.A[i_0] = (text.A[i_0]) - (_pac_sc_s5261.A[i_0 % (_pac_sc_s5261.length)]);
          i_0 = i_0 + 1;
          __sa30 = i_0 < (text.length);
        }
      }
    }
    return;
  }
  /*Cipher.sk:18*/
  
void getInstance_String_String (Object type, Object extra, ref Object _out)/*Cipher.sk:18*/
  {
    int _out_s5270 = 0;
    Cipher@meta(_out_s5270);
    Object@Object _out_s5272 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s5270), type, _out_s5272)//{};
    _out = _out_s5272;
    return;
  }
  /*Cipher.sk:27*/
  
void init_int_SecretKey_IvParameterSpec (Object self, int opmode, Object key, Object i)/*Cipher.sk:27*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 7830
