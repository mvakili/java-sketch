SKETCH version 1.7.5
Benchmark = /Users/grumpy/Research/java-sketch/test/axioms/examples/PasswordManager/PasswordManager/../result_noax/sk_PasswordManagerTest/main.sk
/* BEGIN PACKAGE Cryptographer*/
package Cryptographer{
  /*Cryptographer.sk:3*/
  
void Cryptographer_Cryptographer (Object self, ref Object _out)/*Cryptographer.sk:3*/
  {
    int random_s126 = 0;
    SecureRandom@meta(random_s126);
    Object@Object random_s128 = null;
    SecureRandom_SecureRandom@SecureRandom(new Object@Object(__cid=random_s126), random_s128);
    Array_char@array randomKey = new Array_char@array(length=16);
    int _out_s130 = 0;
    SecureRandom@meta(_out_s130);
    if((random_s128.__cid) == _out_s130)/*Cryptographer.sk:6*/
    {
      nextBytes_byte@SecureRandom(random_s128, randomKey);
    }
    int _out_s132 = 0;
    SecretKeySpec@meta(_out_s132);
    int _out_s134 = 0;
    String@meta(_out_s134);
    Object@Object _out_s136 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s134), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, _out_s136);
    Object@Object _out_s138 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=_out_s132), randomKey, _out_s136, _out_s138);
    self.GCMSecretKey_Cryptographer = _out_s138;
    self.randomIv_Cryptographer = new Array_char@array(length=16);
    int _out_s140 = 0;
    SecureRandom@meta(_out_s140);
    if((random_s128.__cid) == _out_s140)/*Cryptographer.sk:10*/
    {
      nextBytes_byte@SecureRandom(random_s128, self.randomIv_Cryptographer);
    }
    int _out_s142 = 0;
    IvParameterSpec@meta(_out_s142);
    Object@Object _out_s144 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=_out_s142), self.randomIv_Cryptographer, _out_s144);
    self.ivParameterSpec_Cryptographer = _out_s144;
    int _out_s146 = 0;
    String@meta(_out_s146);
    Object@Object _out_s148 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s146), new Array_char@array(length=18, A={'A','E','S','/','G','C','M','/','N','o','P','a','d','d','i','n','g','\0'}), 0, 17, _out_s148);
    int _out_s150 = 0;
    String@meta(_out_s150);
    Object@Object _out_s152 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s150), new Array_char@array(length=3, A={'B','C','\0'}), 0, 2, _out_s152);
    Object@Object _out_s154 = null;
    getInstance_String_String@Cipher(_out_s148, _out_s152, _out_s154);
    self.myCypherOut_Cryptographer = _out_s154;
    int _out_s156 = 0;
    Cipher@meta(_out_s156);
    if((self.myCypherOut_Cryptographer.__cid) == _out_s156)/*Cryptographer.sk:14*/
    {
      init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, 2, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
    }
    int secret_s158 = 0;
    String@meta(secret_s158);
    Object@Object secret_s160 = null;
    String_String_char_int_int@String(new Object@Object(__cid=secret_s158), new Array_char@array(length=7, A={'s','e','c','r','e','t','\0'}), 0, 6, secret_s160);
    int _out_s162 = 0;
    String@meta(_out_s162);
    Object@Object _out_s164 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s162), new Array_char@array(length=11, A={'H','m','a','c','S','H','A','2','5','6','\0'}), 0, 10, _out_s164);
    Object@Object _out_s166 = null;
    getInstance_String@Mac(_out_s164, _out_s166);
    self.sha256_HMAC_Cryptographer = _out_s166;
    int _out_s168 = 0;
    SecretKeySpec@meta(_out_s168);
    int _out_s170 = 0;
    String@meta(_out_s170);
    Array_char@array _pac_sc_s171 = null;
    if((secret_s160.__cid) == _out_s170)/*Cryptographer.sk:18*/
    {
      Array_char@array _out_s173 = null;
      getBytes@String(secret_s160, _out_s173);
      _pac_sc_s171 = _out_s173;
    }
    else
    {
      _pac_sc_s171 = null;
    }
    int _out_s175 = 0;
    String@meta(_out_s175);
    Object@Object _out_s177 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s175), new Array_char@array(length=11, A={'H','m','a','c','S','H','A','2','5','6','\0'}), 0, 10, _out_s177);
    Object@Object _out_s179 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=_out_s168), _pac_sc_s171, _out_s177, _out_s179);
    self.Hash_secret_key_Cryptographer = _out_s179;
    int _out_s181 = 0;
    Mac@meta(_out_s181);
    if((self.sha256_HMAC_Cryptographer.__cid) == _out_s181)/*Cryptographer.sk:19*/
    {
      init_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer);
    }
    self.MAX_LENGTH_PASSWORD_Cryptographer = 16;
    _out = self;
    return;
  }
  /*Cryptographer.sk:43*/
  
void decrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:43*/
  {
    int _out_s106 = 0;
    Cipher@meta(_out_s106);
    if((self.myCypherOut_Cryptographer.__cid) == _out_s106)/*Cryptographer.sk:31*/
    {
      init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, 1, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
    }
    int cipherText_s108 = 0;
    Cipher@meta(cipherText_s108);
    Array_char@array _pac_sc_s109 = null;
    if((self.myCypherOut_Cryptographer.__cid) == cipherText_s108)/*Cryptographer.sk:33*/
    {
      int cipherText_s111 = 0;
      String@meta(cipherText_s111);
      Array_char@array _pac_sc_s112 = null;
      if((plainText.__cid) == cipherText_s111)/*Cryptographer.sk:33*/
      {
        Array_char@array cipherText_s114 = null;
        getBytes@String(plainText, cipherText_s114);
        _pac_sc_s112 = cipherText_s114;
      }
      else
      {
        _pac_sc_s112 = null;
      }
      Array_char@array cipherText_s116 = null;
      doFinal_byte@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s112, cipherText_s116);
      _pac_sc_s109 = cipherText_s116;
    }
    else
    {
      _pac_sc_s109 = null;
    }
    int _out_s102 = 0;
    String@meta(_out_s102);
    Object@Object _out_s104 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s102), _pac_sc_s109, _out_s104);
    _out = _out_s104;
    return;
  }
  /*Cryptographer.sk:38*/
  
void encrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:38*/
  {
    int cipherText_s108 = 0;
    Cipher@meta(cipherText_s108);
    Array_char@array _pac_sc_s109 = null;
    if((self.myCypherOut_Cryptographer.__cid) == cipherText_s108)/*Cryptographer.sk:33*/
    {
      int cipherText_s111 = 0;
      String@meta(cipherText_s111);
      Array_char@array _pac_sc_s112 = null;
      if((plainText.__cid) == cipherText_s111)/*Cryptographer.sk:33*/
      {
        Array_char@array cipherText_s114 = null;
        getBytes@String(plainText, cipherText_s114);
        _pac_sc_s112 = cipherText_s114;
      }
      else
      {
        _pac_sc_s112 = null;
      }
      Array_char@array cipherText_s116 = null;
      doFinal_byte@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s112, cipherText_s116);
      _pac_sc_s109 = cipherText_s116;
    }
    else
    {
      _pac_sc_s109 = null;
    }
    int _out_s122 = 0;
    String@meta(_out_s122);
    Object@Object _out_s124 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s122), _pac_sc_s109, _out_s124);
    _out = _out_s124;
    return;
  }
  /*Cryptographer.sk:25*/
  
void hash_String (Object self, Object plainTxt, ref Object _out)/*Cryptographer.sk:25*/
  {
    int _out_s86 = 0;
    String@meta(_out_s86);
    int _out_s88 = 0;
    Mac@meta(_out_s88);
    Array_char@array _pac_sc_s89 = null;
    if((self.sha256_HMAC_Cryptographer.__cid) == _out_s88)/*Cryptographer.sk:26*/
    {
      int _out_s91 = 0;
      String@meta(_out_s91);
      Array_char@array _pac_sc_s92 = null;
      if((plainTxt.__cid) == _out_s91)/*Cryptographer.sk:26*/
      {
        Array_char@array _out_s94 = null;
        getBytes@String(plainTxt, _out_s94);
        _pac_sc_s92 = _out_s94;
      }
      else
      {
        _pac_sc_s92 = null;
      }
      Array_char@array _out_s96 = null;
      doFinal_byte@Mac(self.sha256_HMAC_Cryptographer, _pac_sc_s92, _out_s96);
      _pac_sc_s89 = _out_s96;
    }
    else
    {
      _pac_sc_s89 = null;
    }
    Object@Object _out_s98 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s86), _pac_sc_s89, _out_s98);
    _out = _out_s98;
    return;
  }
  /* END PACKAGE Cryptographer*/
}
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:7*/
  
void HashMap_HashMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4133)/*HashMap.sk:7*/
  {
    self.elementData_HashMap = new Array_Object@array(length=DEFAULT_INITIAL_CAPACITY__HashMap_s4133);
    self.numPairs_HashMap = 0;
    self.capacity_HashMap = DEFAULT_INITIAL_CAPACITY__HashMap_s4133;
    _out = self;
    return;
  }
  /*HashMap.sk:62*/
  
void get_K (Object self, Object key, ref Object _out)/*HashMap.sk:62*/
  {
    int hashMod_s183 = 0;
    Integer@meta(hashMod_s183);
    int _pac_sc_s184 = 0;
    if((key.__cid) == hashMod_s183)/*HashMap.sk:63*/
    {
      int hashMod_s186 = 0;
      hashCode@Integer(key, hashMod_s186);
      _pac_sc_s184 = hashMod_s186;
    }
    else
    {
      int hashMod_s188 = 0;
      Boolean@meta(hashMod_s188);
      int _pac_sc_s189 = 0;
      if((key.__cid) == hashMod_s188)/*HashMap.sk:63*/
      {
        int hashMod_s191 = 0;
        hashCode@Object(key, hashMod_s191);
        _pac_sc_s189 = hashMod_s191;
      }
      else
      {
        int hashMod_s193 = 0;
        Scanner@meta(hashMod_s193);
        int _pac_sc_s194 = 0;
        if((key.__cid) == hashMod_s193)/*HashMap.sk:63*/
        {
          int hashMod_s196 = 0;
          hashCode@Object(key, hashMod_s196);
          _pac_sc_s194 = hashMod_s196;
        }
        else
        {
          int hashMod_s198 = 0;
          KeyGenerator@meta(hashMod_s198);
          int _pac_sc_s199 = 0;
          if((key.__cid) == hashMod_s198)/*HashMap.sk:63*/
          {
            int hashMod_s201 = 0;
            hashCode@Object(key, hashMod_s201);
            _pac_sc_s199 = hashMod_s201;
          }
          else
          {
            int hashMod_s203 = 0;
            Mac@meta(hashMod_s203);
            int _pac_sc_s204 = 0;
            if((key.__cid) == hashMod_s203)/*HashMap.sk:63*/
            {
              int hashMod_s206 = 0;
              hashCode@Object(key, hashMod_s206);
              _pac_sc_s204 = hashMod_s206;
            }
            else
            {
              int hashMod_s208 = 0;
              Float@meta(hashMod_s208);
              int _pac_sc_s209 = 0;
              if((key.__cid) == hashMod_s208)/*HashMap.sk:63*/
              {
                int hashMod_s211 = 0;
                hashCode@Object(key, hashMod_s211);
                _pac_sc_s209 = hashMod_s211;
              }
              else
              {
                int hashMod_s213 = 0;
                StringBuilder@meta(hashMod_s213);
                int _pac_sc_s214 = 0;
                if((key.__cid) == hashMod_s213)/*HashMap.sk:63*/
                {
                  int hashMod_s216 = 0;
                  hashCode@Object(key, hashMod_s216);
                  _pac_sc_s214 = hashMod_s216;
                }
                else
                {
                  int hashMod_s218 = 0;
                  Assert@meta(hashMod_s218);
                  int _pac_sc_s219 = 0;
                  if((key.__cid) == hashMod_s218)/*HashMap.sk:63*/
                  {
                    int hashMod_s221 = 0;
                    hashCode@Object(key, hashMod_s221);
                    _pac_sc_s219 = hashMod_s221;
                  }
                  else
                  {
                    int hashMod_s223 = 0;
                    Stack@meta(hashMod_s223);
                    int _pac_sc_s224 = 0;
                    if((key.__cid) == hashMod_s223)/*HashMap.sk:63*/
                    {
                      int hashMod_s226 = 0;
                      hashCode@Object(key, hashMod_s226);
                      _pac_sc_s224 = hashMod_s226;
                    }
                    else
                    {
                      int hashMod_s228 = 0;
                      FileWriterr@meta(hashMod_s228);
                      int _pac_sc_s229 = 0;
                      if((key.__cid) == hashMod_s228)/*HashMap.sk:63*/
                      {
                        int hashMod_s231 = 0;
                        hashCode@Object(key, hashMod_s231);
                        _pac_sc_s229 = hashMod_s231;
                      }
                      else
                      {
                        int hashMod_s233 = 0;
                        File@meta(hashMod_s233);
                        int _pac_sc_s234 = 0;
                        if((key.__cid) == hashMod_s233)/*HashMap.sk:63*/
                        {
                          int hashMod_s236 = 0;
                          hashCode@Object(key, hashMod_s236);
                          _pac_sc_s234 = hashMod_s236;
                        }
                        else
                        {
                          int hashMod_s238 = 0;
                          PasswordManager@meta(hashMod_s238);
                          int _pac_sc_s239 = 0;
                          if((key.__cid) == hashMod_s238)/*HashMap.sk:63*/
                          {
                            int hashMod_s241 = 0;
                            hashCode@Object(key, hashMod_s241);
                            _pac_sc_s239 = hashMod_s241;
                          }
                          else
                          {
                            int hashMod_s243 = 0;
                            PasswordManagerTest@meta(hashMod_s243);
                            int _pac_sc_s244 = 0;
                            if((key.__cid) == hashMod_s243)/*HashMap.sk:63*/
                            {
                              int hashMod_s246 = 0;
                              hashCode@Object(key, hashMod_s246);
                              _pac_sc_s244 = hashMod_s246;
                            }
                            else
                            {
                              int hashMod_s248 = 0;
                              IvParameterSpec@meta(hashMod_s248);
                              int _pac_sc_s249 = 0;
                              if((key.__cid) == hashMod_s248)/*HashMap.sk:63*/
                              {
                                int hashMod_s251 = 0;
                                hashCode@Object(key, hashMod_s251);
                                _pac_sc_s249 = hashMod_s251;
                              }
                              else
                              {
                                int hashMod_s253 = 0;
                                PasswordMap@meta(hashMod_s253);
                                int _pac_sc_s254 = 0;
                                if((key.__cid) == hashMod_s253)/*HashMap.sk:63*/
                                {
                                  int hashMod_s256 = 0;
                                  hashCode@Object(key, hashMod_s256);
                                  _pac_sc_s254 = hashMod_s256;
                                }
                                else
                                {
                                  int hashMod_s258 = 0;
                                  BufferedWriter@meta(hashMod_s258);
                                  int _pac_sc_s259 = 0;
                                  if((key.__cid) == hashMod_s258)/*HashMap.sk:63*/
                                  {
                                    int hashMod_s261 = 0;
                                    hashCode@Object(key, hashMod_s261);
                                    _pac_sc_s259 = hashMod_s261;
                                  }
                                  else
                                  {
                                    int hashMod_s263 = 0;
                                    AbstractQueue@meta(hashMod_s263);
                                    int _pac_sc_s264 = 0;
                                    if((key.__cid) == hashMod_s263)/*HashMap.sk:63*/
                                    {
                                      int hashMod_s266 = 0;
                                      hashCode@Object(key, hashMod_s266);
                                      _pac_sc_s264 = hashMod_s266;
                                    }
                                    else
                                    {
                                      int hashMod_s268 = 0;
                                      HashMap_Node@meta(hashMod_s268);
                                      int _pac_sc_s269 = 0;
                                      if((key.__cid) == hashMod_s268)/*HashMap.sk:63*/
                                      {
                                        int hashMod_s271 = 0;
                                        hashCode@Object(key, hashMod_s271);
                                        _pac_sc_s269 = hashMod_s271;
                                      }
                                      else
                                      {
                                        int hashMod_s273 = 0;
                                        SecureRandom@meta(hashMod_s273);
                                        int _pac_sc_s274 = 0;
                                        if((key.__cid) == hashMod_s273)/*HashMap.sk:63*/
                                        {
                                          int hashMod_s276 = 0;
                                          hashCode@Object(key, hashMod_s276);
                                          _pac_sc_s274 = hashMod_s276;
                                        }
                                        else
                                        {
                                          int hashMod_s278 = 0;
                                          ArrayList@meta(hashMod_s278);
                                          int _pac_sc_s279 = 0;
                                          if((key.__cid) == hashMod_s278)/*HashMap.sk:63*/
                                          {
                                            int hashMod_s281 = 0;
                                            hashCode@Object(key, hashMod_s281);
                                            _pac_sc_s279 = hashMod_s281;
                                          }
                                          else
                                          {
                                            int hashMod_s283 = 0;
                                            System@meta(hashMod_s283);
                                            int _pac_sc_s284 = 0;
                                            if((key.__cid) == hashMod_s283)/*HashMap.sk:63*/
                                            {
                                              int hashMod_s286 = 0;
                                              hashCode@Object(key, hashMod_s286);
                                              _pac_sc_s284 = hashMod_s286;
                                            }
                                            else
                                            {
                                              int hashMod_s288 = 0;
                                              HashSet@meta(hashMod_s288);
                                              int _pac_sc_s289 = 0;
                                              if((key.__cid) == hashMod_s288)/*HashMap.sk:63*/
                                              {
                                                int hashMod_s291 = 0;
                                                hashCode@Object(key, hashMod_s291);
                                                _pac_sc_s289 = hashMod_s291;
                                              }
                                              else
                                              {
                                                int hashMod_s293 = 0;
                                                Cryptographer@meta(hashMod_s293);
                                                int _pac_sc_s294 = 0;
                                                if((key.__cid) == hashMod_s293)/*HashMap.sk:63*/
                                                {
                                                  int hashMod_s296 = 0;
                                                  hashCode@Object(key, hashMod_s296);
                                                  _pac_sc_s294 = hashMod_s296;
                                                }
                                                else
                                                {
                                                  int hashMod_s298 = 0;
                                                  Number@meta(hashMod_s298);
                                                  int _pac_sc_s299 = 0;
                                                  if((key.__cid) == hashMod_s298)/*HashMap.sk:63*/
                                                  {
                                                    int hashMod_s301 = 0;
                                                    hashCode@Object(key, hashMod_s301);
                                                    _pac_sc_s299 = hashMod_s301;
                                                  }
                                                  else
                                                  {
                                                    int hashMod_s303 = 0;
                                                    ArrayDeque_DequeNode@meta(hashMod_s303);
                                                    int _pac_sc_s304 = 0;
                                                    if((key.__cid) == hashMod_s303)/*HashMap.sk:63*/
                                                    {
                                                      int hashMod_s306 = 0;
                                                      hashCode@Object(key, hashMod_s306);
                                                      _pac_sc_s304 = hashMod_s306;
                                                    }
                                                    else
                                                    {
                                                      int hashMod_s308 = 0;
                                                      KerberosKey@meta(hashMod_s308);
                                                      int _pac_sc_s309 = 0;
                                                      if((key.__cid) == hashMod_s308)/*HashMap.sk:63*/
                                                      {
                                                        int hashMod_s311 = 0;
                                                        hashCode@Object(key, hashMod_s311);
                                                        _pac_sc_s309 = hashMod_s311;
                                                      }
                                                      else
                                                      {
                                                        int hashMod_s313 = 0;
                                                        Character@meta(hashMod_s313);
                                                        int _pac_sc_s314 = 0;
                                                        if((key.__cid) == hashMod_s313)/*HashMap.sk:63*/
                                                        {
                                                          int hashMod_s316 = 0;
                                                          hashCode@Object(key, hashMod_s316);
                                                          _pac_sc_s314 = hashMod_s316;
                                                        }
                                                        else
                                                        {
                                                          int hashMod_s318 = 0;
                                                          LinkedList@meta(hashMod_s318);
                                                          int _pac_sc_s319 = 0;
                                                          if((key.__cid) == hashMod_s318)/*HashMap.sk:63*/
                                                          {
                                                            int hashMod_s321 = 0;
                                                            hashCode@Object(key, hashMod_s321);
                                                            _pac_sc_s319 = hashMod_s321;
                                                          }
                                                          else
                                                          {
                                                            int hashMod_s323 = 0;
                                                            String@meta(hashMod_s323);
                                                            int _pac_sc_s324 = 0;
                                                            if((key.__cid) == hashMod_s323)/*HashMap.sk:63*/
                                                            {
                                                              int hashMod_s326 = 0;
                                                              hashCode@String(key, hashMod_s326);
                                                              _pac_sc_s324 = hashMod_s326;
                                                            }
                                                            else
                                                            {
                                                              int hashMod_s328 = 0;
                                                              Cipher@meta(hashMod_s328);
                                                              int _pac_sc_s329 = 0;
                                                              if((key.__cid) == hashMod_s328)/*HashMap.sk:63*/
                                                              {
                                                                int hashMod_s331 = 0;
                                                                hashCode@Object(key, hashMod_s331);
                                                                _pac_sc_s329 = hashMod_s331;
                                                              }
                                                              else
                                                              {
                                                                int hashMod_s333 = 0;
                                                                FileReaderr@meta(hashMod_s333);
                                                                int _pac_sc_s334 = 0;
                                                                if((key.__cid) == hashMod_s333)/*HashMap.sk:63*/
                                                                {
                                                                  int hashMod_s336 = 0;
                                                                  hashCode@Object(key, hashMod_s336);
                                                                  _pac_sc_s334 = hashMod_s336;
                                                                }
                                                                else
                                                                {
                                                                  int hashMod_s338 = 0;
                                                                  TreeSet@meta(hashMod_s338);
                                                                  int _pac_sc_s339 = 0;
                                                                  if((key.__cid) == hashMod_s338)/*HashMap.sk:63*/
                                                                  {
                                                                    int hashMod_s341 = 0;
                                                                    hashCode@Object(key, hashMod_s341);
                                                                    _pac_sc_s339 = hashMod_s341;
                                                                  }
                                                                  else
                                                                  {
                                                                    int hashMod_s343 = 0;
                                                                    HashMap@meta(hashMod_s343);
                                                                    int _pac_sc_s344 = 0;
                                                                    if((key.__cid) == hashMod_s343)/*HashMap.sk:63*/
                                                                    {
                                                                      int hashMod_s346 = 0;
                                                                      hashCode@Object(key, hashMod_s346);
                                                                      _pac_sc_s344 = hashMod_s346;
                                                                    }
                                                                    else
                                                                    {
                                                                      int hashMod_s348 = 0;
                                                                      ArrayDeque@meta(hashMod_s348);
                                                                      int _pac_sc_s349 = 0;
                                                                      if((key.__cid) == hashMod_s348)/*HashMap.sk:63*/
                                                                      {
                                                                        int hashMod_s351 = 0;
                                                                        hashCode@Object(key, hashMod_s351);
                                                                        _pac_sc_s349 = hashMod_s351;
                                                                      }
                                                                      else
                                                                      {
                                                                        int hashMod_s353 = 0;
                                                                        SecretKeySpec@meta(hashMod_s353);
                                                                        int _pac_sc_s354 = 0;
                                                                        if((key.__cid) == hashMod_s353)/*HashMap.sk:63*/
                                                                        {
                                                                          int hashMod_s356 = 0;
                                                                          hashCode@Object(key, hashMod_s356);
                                                                          _pac_sc_s354 = hashMod_s356;
                                                                        }
                                                                        else
                                                                        {
                                                                          int hashMod_s358 = 0;
                                                                          TreeMap@meta(hashMod_s358);
                                                                          int _pac_sc_s359 = 0;
                                                                          if((key.__cid) == hashMod_s358)/*HashMap.sk:63*/
                                                                          {
                                                                            int hashMod_s361 = 0;
                                                                            hashCode@Object(key, hashMod_s361);
                                                                            _pac_sc_s359 = hashMod_s361;
                                                                          }
                                                                          else
                                                                          {
                                                                            int hashMod_s363 = 0;
                                                                            StringBuffer@meta(hashMod_s363);
                                                                            int _pac_sc_s364 = 0;
                                                                            if((key.__cid) == hashMod_s363)/*HashMap.sk:63*/
                                                                            {
                                                                              int hashMod_s366 = 0;
                                                                              hashCode@Object(key, hashMod_s366);
                                                                              _pac_sc_s364 = hashMod_s366;
                                                                            }
                                                                            else
                                                                            {
                                                                              int hashMod_s368 = 0;
                                                                              Object@meta(hashMod_s368);
                                                                              int _pac_sc_s369 = 0;
                                                                              if((key.__cid) == hashMod_s368)/*HashMap.sk:63*/
                                                                              {
                                                                                int hashMod_s371 = 0;
                                                                                hashCode@Object(key, hashMod_s371);
                                                                                _pac_sc_s369 = hashMod_s371;
                                                                              }
                                                                              else
                                                                              {
                                                                                _pac_sc_s369 = 0;
                                                                              }
                                                                              _pac_sc_s364 = _pac_sc_s369;
                                                                            }
                                                                            _pac_sc_s359 = _pac_sc_s364;
                                                                          }
                                                                          _pac_sc_s354 = _pac_sc_s359;
                                                                        }
                                                                        _pac_sc_s349 = _pac_sc_s354;
                                                                      }
                                                                      _pac_sc_s344 = _pac_sc_s349;
                                                                    }
                                                                    _pac_sc_s339 = _pac_sc_s344;
                                                                  }
                                                                  _pac_sc_s334 = _pac_sc_s339;
                                                                }
                                                                _pac_sc_s329 = _pac_sc_s334;
                                                              }
                                                              _pac_sc_s324 = _pac_sc_s329;
                                                            }
                                                            _pac_sc_s319 = _pac_sc_s324;
                                                          }
                                                          _pac_sc_s314 = _pac_sc_s319;
                                                        }
                                                        _pac_sc_s309 = _pac_sc_s314;
                                                      }
                                                      _pac_sc_s304 = _pac_sc_s309;
                                                    }
                                                    _pac_sc_s299 = _pac_sc_s304;
                                                  }
                                                  _pac_sc_s294 = _pac_sc_s299;
                                                }
                                                _pac_sc_s289 = _pac_sc_s294;
                                              }
                                              _pac_sc_s284 = _pac_sc_s289;
                                            }
                                            _pac_sc_s279 = _pac_sc_s284;
                                          }
                                          _pac_sc_s274 = _pac_sc_s279;
                                        }
                                        _pac_sc_s269 = _pac_sc_s274;
                                      }
                                      _pac_sc_s264 = _pac_sc_s269;
                                    }
                                    _pac_sc_s259 = _pac_sc_s264;
                                  }
                                  _pac_sc_s254 = _pac_sc_s259;
                                }
                                _pac_sc_s249 = _pac_sc_s254;
                              }
                              _pac_sc_s244 = _pac_sc_s249;
                            }
                            _pac_sc_s239 = _pac_sc_s244;
                          }
                          _pac_sc_s234 = _pac_sc_s239;
                        }
                        _pac_sc_s229 = _pac_sc_s234;
                      }
                      _pac_sc_s224 = _pac_sc_s229;
                    }
                    _pac_sc_s219 = _pac_sc_s224;
                  }
                  _pac_sc_s214 = _pac_sc_s219;
                }
                _pac_sc_s209 = _pac_sc_s214;
              }
              _pac_sc_s204 = _pac_sc_s209;
            }
            _pac_sc_s199 = _pac_sc_s204;
          }
          _pac_sc_s194 = _pac_sc_s199;
        }
        _pac_sc_s189 = _pac_sc_s194;
      }
      _pac_sc_s184 = _pac_sc_s189;
    }
    int hashMod = _pac_sc_s184 % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:64*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:68*/
    {
      int _out_s373 = 0;
      Integer@meta(_out_s373);
      bit _pac_sc_s374 = 0;
      if((key.__cid) == _out_s373)/*HashMap.sk:69*/
      {
        bit _out_s376 = 0;
        equals_Object@Integer(key, node.key_HashMap_Node, _out_s376);
        _pac_sc_s374 = _out_s376;
      }
      else
      {
        int _out_s378 = 0;
        Boolean@meta(_out_s378);
        bit _pac_sc_s379 = 0;
        if((key.__cid) == _out_s378)/*HashMap.sk:69*/
        {
          bit _out_s381 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _out_s381);
          _pac_sc_s379 = _out_s381;
        }
        else
        {
          int _out_s383 = 0;
          Scanner@meta(_out_s383);
          bit _pac_sc_s384 = 0;
          if((key.__cid) == _out_s383)/*HashMap.sk:69*/
          {
            bit _out_s386 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _out_s386);
            _pac_sc_s384 = _out_s386;
          }
          else
          {
            int _out_s388 = 0;
            KeyGenerator@meta(_out_s388);
            bit _pac_sc_s389 = 0;
            if((key.__cid) == _out_s388)/*HashMap.sk:69*/
            {
              bit _out_s391 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _out_s391);
              _pac_sc_s389 = _out_s391;
            }
            else
            {
              int _out_s393 = 0;
              Mac@meta(_out_s393);
              bit _pac_sc_s394 = 0;
              if((key.__cid) == _out_s393)/*HashMap.sk:69*/
              {
                bit _out_s396 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _out_s396);
                _pac_sc_s394 = _out_s396;
              }
              else
              {
                int _out_s398 = 0;
                Float@meta(_out_s398);
                bit _pac_sc_s399 = 0;
                if((key.__cid) == _out_s398)/*HashMap.sk:69*/
                {
                  bit _out_s401 = 0;
                  equals_Object@Float(key, node.key_HashMap_Node, _out_s401);
                  _pac_sc_s399 = _out_s401;
                }
                else
                {
                  int _out_s403 = 0;
                  StringBuilder@meta(_out_s403);
                  bit _pac_sc_s404 = 0;
                  if((key.__cid) == _out_s403)/*HashMap.sk:69*/
                  {
                    bit _out_s406 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _out_s406);
                    _pac_sc_s404 = _out_s406;
                  }
                  else
                  {
                    int _out_s408 = 0;
                    Assert@meta(_out_s408);
                    bit _pac_sc_s409 = 0;
                    if((key.__cid) == _out_s408)/*HashMap.sk:69*/
                    {
                      bit _out_s411 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _out_s411);
                      _pac_sc_s409 = _out_s411;
                    }
                    else
                    {
                      int _out_s413 = 0;
                      Stack@meta(_out_s413);
                      bit _pac_sc_s414 = 0;
                      if((key.__cid) == _out_s413)/*HashMap.sk:69*/
                      {
                        bit _out_s416 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _out_s416);
                        _pac_sc_s414 = _out_s416;
                      }
                      else
                      {
                        int _out_s418 = 0;
                        FileWriterr@meta(_out_s418);
                        bit _pac_sc_s419 = 0;
                        if((key.__cid) == _out_s418)/*HashMap.sk:69*/
                        {
                          bit _out_s421 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _out_s421);
                          _pac_sc_s419 = _out_s421;
                        }
                        else
                        {
                          int _out_s423 = 0;
                          File@meta(_out_s423);
                          bit _pac_sc_s424 = 0;
                          if((key.__cid) == _out_s423)/*HashMap.sk:69*/
                          {
                            bit _out_s426 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _out_s426);
                            _pac_sc_s424 = _out_s426;
                          }
                          else
                          {
                            int _out_s428 = 0;
                            PasswordManager@meta(_out_s428);
                            bit _pac_sc_s429 = 0;
                            if((key.__cid) == _out_s428)/*HashMap.sk:69*/
                            {
                              bit _out_s431 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _out_s431);
                              _pac_sc_s429 = _out_s431;
                            }
                            else
                            {
                              int _out_s433 = 0;
                              PasswordManagerTest@meta(_out_s433);
                              bit _pac_sc_s434 = 0;
                              if((key.__cid) == _out_s433)/*HashMap.sk:69*/
                              {
                                bit _out_s436 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _out_s436);
                                _pac_sc_s434 = _out_s436;
                              }
                              else
                              {
                                int _out_s438 = 0;
                                IvParameterSpec@meta(_out_s438);
                                bit _pac_sc_s439 = 0;
                                if((key.__cid) == _out_s438)/*HashMap.sk:69*/
                                {
                                  bit _out_s441 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s441);
                                  _pac_sc_s439 = _out_s441;
                                }
                                else
                                {
                                  int _out_s443 = 0;
                                  PasswordMap@meta(_out_s443);
                                  bit _pac_sc_s444 = 0;
                                  if((key.__cid) == _out_s443)/*HashMap.sk:69*/
                                  {
                                    bit _out_s446 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s446);
                                    _pac_sc_s444 = _out_s446;
                                  }
                                  else
                                  {
                                    int _out_s448 = 0;
                                    BufferedWriter@meta(_out_s448);
                                    bit _pac_sc_s449 = 0;
                                    if((key.__cid) == _out_s448)/*HashMap.sk:69*/
                                    {
                                      bit _out_s451 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s451);
                                      _pac_sc_s449 = _out_s451;
                                    }
                                    else
                                    {
                                      int _out_s453 = 0;
                                      AbstractQueue@meta(_out_s453);
                                      bit _pac_sc_s454 = 0;
                                      if((key.__cid) == _out_s453)/*HashMap.sk:69*/
                                      {
                                        bit _out_s456 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s456);
                                        _pac_sc_s454 = _out_s456;
                                      }
                                      else
                                      {
                                        int _out_s458 = 0;
                                        HashMap_Node@meta(_out_s458);
                                        bit _pac_sc_s459 = 0;
                                        if((key.__cid) == _out_s458)/*HashMap.sk:69*/
                                        {
                                          bit _out_s461 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s461);
                                          _pac_sc_s459 = _out_s461;
                                        }
                                        else
                                        {
                                          int _out_s463 = 0;
                                          SecureRandom@meta(_out_s463);
                                          bit _pac_sc_s464 = 0;
                                          if((key.__cid) == _out_s463)/*HashMap.sk:69*/
                                          {
                                            bit _out_s466 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _out_s466);
                                            _pac_sc_s464 = _out_s466;
                                          }
                                          else
                                          {
                                            int _out_s468 = 0;
                                            ArrayList@meta(_out_s468);
                                            bit _pac_sc_s469 = 0;
                                            if((key.__cid) == _out_s468)/*HashMap.sk:69*/
                                            {
                                              bit _out_s471 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s471);
                                              _pac_sc_s469 = _out_s471;
                                            }
                                            else
                                            {
                                              int _out_s473 = 0;
                                              System@meta(_out_s473);
                                              bit _pac_sc_s474 = 0;
                                              if((key.__cid) == _out_s473)/*HashMap.sk:69*/
                                              {
                                                bit _out_s476 = 0;
                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s476);
                                                _pac_sc_s474 = _out_s476;
                                              }
                                              else
                                              {
                                                int _out_s478 = 0;
                                                HashSet@meta(_out_s478);
                                                bit _pac_sc_s479 = 0;
                                                if((key.__cid) == _out_s478)/*HashMap.sk:69*/
                                                {
                                                  bit _out_s481 = 0;
                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s481);
                                                  _pac_sc_s479 = _out_s481;
                                                }
                                                else
                                                {
                                                  int _out_s483 = 0;
                                                  Cryptographer@meta(_out_s483);
                                                  bit _pac_sc_s484 = 0;
                                                  if((key.__cid) == _out_s483)/*HashMap.sk:69*/
                                                  {
                                                    bit _out_s486 = 0;
                                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s486);
                                                    _pac_sc_s484 = _out_s486;
                                                  }
                                                  else
                                                  {
                                                    int _out_s488 = 0;
                                                    Number@meta(_out_s488);
                                                    bit _pac_sc_s489 = 0;
                                                    if((key.__cid) == _out_s488)/*HashMap.sk:69*/
                                                    {
                                                      bit _out_s491 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s491);
                                                      _pac_sc_s489 = _out_s491;
                                                    }
                                                    else
                                                    {
                                                      int _out_s493 = 0;
                                                      ArrayDeque_DequeNode@meta(_out_s493);
                                                      bit _pac_sc_s494 = 0;
                                                      if((key.__cid) == _out_s493)/*HashMap.sk:69*/
                                                      {
                                                        bit _out_s496 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s496);
                                                        _pac_sc_s494 = _out_s496;
                                                      }
                                                      else
                                                      {
                                                        int _out_s498 = 0;
                                                        KerberosKey@meta(_out_s498);
                                                        bit _pac_sc_s499 = 0;
                                                        if((key.__cid) == _out_s498)/*HashMap.sk:69*/
                                                        {
                                                          bit _out_s501 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s501);
                                                          _pac_sc_s499 = _out_s501;
                                                        }
                                                        else
                                                        {
                                                          int _out_s503 = 0;
                                                          Character@meta(_out_s503);
                                                          bit _pac_sc_s504 = 0;
                                                          if((key.__cid) == _out_s503)/*HashMap.sk:69*/
                                                          {
                                                            bit _out_s506 = 0;
                                                            equals_Object@Character(key, node.key_HashMap_Node, _out_s506);
                                                            _pac_sc_s504 = _out_s506;
                                                          }
                                                          else
                                                          {
                                                            int _out_s508 = 0;
                                                            LinkedList@meta(_out_s508);
                                                            bit _pac_sc_s509 = 0;
                                                            if((key.__cid) == _out_s508)/*HashMap.sk:69*/
                                                            {
                                                              bit _out_s511 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s511);
                                                              _pac_sc_s509 = _out_s511;
                                                            }
                                                            else
                                                            {
                                                              int _out_s513 = 0;
                                                              String@meta(_out_s513);
                                                              bit _pac_sc_s514 = 0;
                                                              if((key.__cid) == _out_s513)/*HashMap.sk:69*/
                                                              {
                                                                bit _out_s516 = 0;
                                                                equals_Object@String(key, node.key_HashMap_Node, _out_s516);
                                                                _pac_sc_s514 = _out_s516;
                                                              }
                                                              else
                                                              {
                                                                int _out_s518 = 0;
                                                                Cipher@meta(_out_s518);
                                                                bit _pac_sc_s519 = 0;
                                                                if((key.__cid) == _out_s518)/*HashMap.sk:69*/
                                                                {
                                                                  bit _out_s521 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s521);
                                                                  _pac_sc_s519 = _out_s521;
                                                                }
                                                                else
                                                                {
                                                                  int _out_s523 = 0;
                                                                  FileReaderr@meta(_out_s523);
                                                                  bit _pac_sc_s524 = 0;
                                                                  if((key.__cid) == _out_s523)/*HashMap.sk:69*/
                                                                  {
                                                                    bit _out_s526 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _out_s526);
                                                                    _pac_sc_s524 = _out_s526;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _out_s528 = 0;
                                                                    TreeSet@meta(_out_s528);
                                                                    bit _pac_sc_s529 = 0;
                                                                    if((key.__cid) == _out_s528)/*HashMap.sk:69*/
                                                                    {
                                                                      bit _out_s531 = 0;
                                                                      equals_Object@Object(key, node.key_HashMap_Node, _out_s531);
                                                                      _pac_sc_s529 = _out_s531;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _out_s533 = 0;
                                                                      HashMap@meta(_out_s533);
                                                                      bit _pac_sc_s534 = 0;
                                                                      if((key.__cid) == _out_s533)/*HashMap.sk:69*/
                                                                      {
                                                                        bit _out_s536 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _out_s536);
                                                                        _pac_sc_s534 = _out_s536;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _out_s538 = 0;
                                                                        ArrayDeque@meta(_out_s538);
                                                                        bit _pac_sc_s539 = 0;
                                                                        if((key.__cid) == _out_s538)/*HashMap.sk:69*/
                                                                        {
                                                                          bit _out_s541 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _out_s541);
                                                                          _pac_sc_s539 = _out_s541;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _out_s543 = 0;
                                                                          SecretKeySpec@meta(_out_s543);
                                                                          bit _pac_sc_s544 = 0;
                                                                          if((key.__cid) == _out_s543)/*HashMap.sk:69*/
                                                                          {
                                                                            bit _out_s546 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _out_s546);
                                                                            _pac_sc_s544 = _out_s546;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _out_s548 = 0;
                                                                            TreeMap@meta(_out_s548);
                                                                            bit _pac_sc_s549 = 0;
                                                                            if((key.__cid) == _out_s548)/*HashMap.sk:69*/
                                                                            {
                                                                              bit _out_s551 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _out_s551);
                                                                              _pac_sc_s549 = _out_s551;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _out_s553 = 0;
                                                                              StringBuffer@meta(_out_s553);
                                                                              bit _pac_sc_s554 = 0;
                                                                              if((key.__cid) == _out_s553)/*HashMap.sk:69*/
                                                                              {
                                                                                bit _out_s556 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _out_s556);
                                                                                _pac_sc_s554 = _out_s556;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _out_s558 = 0;
                                                                                Object@meta(_out_s558);
                                                                                bit _pac_sc_s559 = 0;
                                                                                if((key.__cid) == _out_s558)/*HashMap.sk:69*/
                                                                                {
                                                                                  bit _out_s561 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _out_s561);
                                                                                  _pac_sc_s559 = _out_s561;
                                                                                }
                                                                                else
                                                                                {
                                                                                  _pac_sc_s559 = 0;
                                                                                }
                                                                                _pac_sc_s554 = _pac_sc_s559;
                                                                              }
                                                                              _pac_sc_s549 = _pac_sc_s554;
                                                                            }
                                                                            _pac_sc_s544 = _pac_sc_s549;
                                                                          }
                                                                          _pac_sc_s539 = _pac_sc_s544;
                                                                        }
                                                                        _pac_sc_s534 = _pac_sc_s539;
                                                                      }
                                                                      _pac_sc_s529 = _pac_sc_s534;
                                                                    }
                                                                    _pac_sc_s524 = _pac_sc_s529;
                                                                  }
                                                                  _pac_sc_s519 = _pac_sc_s524;
                                                                }
                                                                _pac_sc_s514 = _pac_sc_s519;
                                                              }
                                                              _pac_sc_s509 = _pac_sc_s514;
                                                            }
                                                            _pac_sc_s504 = _pac_sc_s509;
                                                          }
                                                          _pac_sc_s499 = _pac_sc_s504;
                                                        }
                                                        _pac_sc_s494 = _pac_sc_s499;
                                                      }
                                                      _pac_sc_s489 = _pac_sc_s494;
                                                    }
                                                    _pac_sc_s484 = _pac_sc_s489;
                                                  }
                                                  _pac_sc_s479 = _pac_sc_s484;
                                                }
                                                _pac_sc_s474 = _pac_sc_s479;
                                              }
                                              _pac_sc_s469 = _pac_sc_s474;
                                            }
                                            _pac_sc_s464 = _pac_sc_s469;
                                          }
                                          _pac_sc_s459 = _pac_sc_s464;
                                        }
                                        _pac_sc_s454 = _pac_sc_s459;
                                      }
                                      _pac_sc_s449 = _pac_sc_s454;
                                    }
                                    _pac_sc_s444 = _pac_sc_s449;
                                  }
                                  _pac_sc_s439 = _pac_sc_s444;
                                }
                                _pac_sc_s434 = _pac_sc_s439;
                              }
                              _pac_sc_s429 = _pac_sc_s434;
                            }
                            _pac_sc_s424 = _pac_sc_s429;
                          }
                          _pac_sc_s419 = _pac_sc_s424;
                        }
                        _pac_sc_s414 = _pac_sc_s419;
                      }
                      _pac_sc_s409 = _pac_sc_s414;
                    }
                    _pac_sc_s404 = _pac_sc_s409;
                  }
                  _pac_sc_s399 = _pac_sc_s404;
                }
                _pac_sc_s394 = _pac_sc_s399;
              }
              _pac_sc_s389 = _pac_sc_s394;
            }
            _pac_sc_s384 = _pac_sc_s389;
          }
          _pac_sc_s379 = _pac_sc_s384;
        }
        _pac_sc_s374 = _pac_sc_s379;
      }
      if(_pac_sc_s374)/*HashMap.sk:69*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
    }
    _out = null;
    return;
  }
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s4287 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s4286)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s4286 = 16;
  }
  /*HashMap.sk:115*/
  
void putVal_int_K_V (Object self, int hash, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s4268)/*HashMap.sk:115*/
  {
    int hashMod = hash % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:117*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:121*/
    {
      bit _pac_sc_s754 = (node.hash_HashMap_Node) != hash;
      if(!(_pac_sc_s754))/*HashMap.sk:122*/
      {
        int _pac_sc_s754_s756 = 0;
        Integer@meta(_pac_sc_s754_s756);
        bit _pac_sc_s757 = 0;
        if((key.__cid) == _pac_sc_s754_s756)/*HashMap.sk:122*/
        {
          bit _pac_sc_s754_s759 = 0;
          equals_Object@Integer(key, node.key_HashMap_Node, _pac_sc_s754_s759);
          _pac_sc_s757 = _pac_sc_s754_s759;
        }
        else
        {
          int _pac_sc_s754_s761 = 0;
          Boolean@meta(_pac_sc_s754_s761);
          bit _pac_sc_s762 = 0;
          if((key.__cid) == _pac_sc_s754_s761)/*HashMap.sk:122*/
          {
            bit _pac_sc_s754_s764 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s764);
            _pac_sc_s762 = _pac_sc_s754_s764;
          }
          else
          {
            int _pac_sc_s754_s766 = 0;
            Scanner@meta(_pac_sc_s754_s766);
            bit _pac_sc_s767 = 0;
            if((key.__cid) == _pac_sc_s754_s766)/*HashMap.sk:122*/
            {
              bit _pac_sc_s754_s769 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s769);
              _pac_sc_s767 = _pac_sc_s754_s769;
            }
            else
            {
              int _pac_sc_s754_s771 = 0;
              KeyGenerator@meta(_pac_sc_s754_s771);
              bit _pac_sc_s772 = 0;
              if((key.__cid) == _pac_sc_s754_s771)/*HashMap.sk:122*/
              {
                bit _pac_sc_s754_s774 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s774);
                _pac_sc_s772 = _pac_sc_s754_s774;
              }
              else
              {
                int _pac_sc_s754_s776 = 0;
                Mac@meta(_pac_sc_s754_s776);
                bit _pac_sc_s777 = 0;
                if((key.__cid) == _pac_sc_s754_s776)/*HashMap.sk:122*/
                {
                  bit _pac_sc_s754_s779 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s779);
                  _pac_sc_s777 = _pac_sc_s754_s779;
                }
                else
                {
                  int _pac_sc_s754_s781 = 0;
                  Float@meta(_pac_sc_s754_s781);
                  bit _pac_sc_s782 = 0;
                  if((key.__cid) == _pac_sc_s754_s781)/*HashMap.sk:122*/
                  {
                    bit _pac_sc_s754_s784 = 0;
                    equals_Object@Float(key, node.key_HashMap_Node, _pac_sc_s754_s784);
                    _pac_sc_s782 = _pac_sc_s754_s784;
                  }
                  else
                  {
                    int _pac_sc_s754_s786 = 0;
                    StringBuilder@meta(_pac_sc_s754_s786);
                    bit _pac_sc_s787 = 0;
                    if((key.__cid) == _pac_sc_s754_s786)/*HashMap.sk:122*/
                    {
                      bit _pac_sc_s754_s789 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s789);
                      _pac_sc_s787 = _pac_sc_s754_s789;
                    }
                    else
                    {
                      int _pac_sc_s754_s791 = 0;
                      Assert@meta(_pac_sc_s754_s791);
                      bit _pac_sc_s792 = 0;
                      if((key.__cid) == _pac_sc_s754_s791)/*HashMap.sk:122*/
                      {
                        bit _pac_sc_s754_s794 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s794);
                        _pac_sc_s792 = _pac_sc_s754_s794;
                      }
                      else
                      {
                        int _pac_sc_s754_s796 = 0;
                        Stack@meta(_pac_sc_s754_s796);
                        bit _pac_sc_s797 = 0;
                        if((key.__cid) == _pac_sc_s754_s796)/*HashMap.sk:122*/
                        {
                          bit _pac_sc_s754_s799 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s799);
                          _pac_sc_s797 = _pac_sc_s754_s799;
                        }
                        else
                        {
                          int _pac_sc_s754_s801 = 0;
                          FileWriterr@meta(_pac_sc_s754_s801);
                          bit _pac_sc_s802 = 0;
                          if((key.__cid) == _pac_sc_s754_s801)/*HashMap.sk:122*/
                          {
                            bit _pac_sc_s754_s804 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s804);
                            _pac_sc_s802 = _pac_sc_s754_s804;
                          }
                          else
                          {
                            int _pac_sc_s754_s806 = 0;
                            File@meta(_pac_sc_s754_s806);
                            bit _pac_sc_s807 = 0;
                            if((key.__cid) == _pac_sc_s754_s806)/*HashMap.sk:122*/
                            {
                              bit _pac_sc_s754_s809 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s809);
                              _pac_sc_s807 = _pac_sc_s754_s809;
                            }
                            else
                            {
                              int _pac_sc_s754_s811 = 0;
                              PasswordManager@meta(_pac_sc_s754_s811);
                              bit _pac_sc_s812 = 0;
                              if((key.__cid) == _pac_sc_s754_s811)/*HashMap.sk:122*/
                              {
                                bit _pac_sc_s754_s814 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s814);
                                _pac_sc_s812 = _pac_sc_s754_s814;
                              }
                              else
                              {
                                int _pac_sc_s754_s816 = 0;
                                PasswordManagerTest@meta(_pac_sc_s754_s816);
                                bit _pac_sc_s817 = 0;
                                if((key.__cid) == _pac_sc_s754_s816)/*HashMap.sk:122*/
                                {
                                  bit _pac_sc_s754_s819 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s819);
                                  _pac_sc_s817 = _pac_sc_s754_s819;
                                }
                                else
                                {
                                  int _pac_sc_s754_s821 = 0;
                                  IvParameterSpec@meta(_pac_sc_s754_s821);
                                  bit _pac_sc_s822 = 0;
                                  if((key.__cid) == _pac_sc_s754_s821)/*HashMap.sk:122*/
                                  {
                                    bit _pac_sc_s754_s824 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s824);
                                    _pac_sc_s822 = _pac_sc_s754_s824;
                                  }
                                  else
                                  {
                                    int _pac_sc_s754_s826 = 0;
                                    PasswordMap@meta(_pac_sc_s754_s826);
                                    bit _pac_sc_s827 = 0;
                                    if((key.__cid) == _pac_sc_s754_s826)/*HashMap.sk:122*/
                                    {
                                      bit _pac_sc_s754_s829 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s829);
                                      _pac_sc_s827 = _pac_sc_s754_s829;
                                    }
                                    else
                                    {
                                      int _pac_sc_s754_s831 = 0;
                                      BufferedWriter@meta(_pac_sc_s754_s831);
                                      bit _pac_sc_s832 = 0;
                                      if((key.__cid) == _pac_sc_s754_s831)/*HashMap.sk:122*/
                                      {
                                        bit _pac_sc_s754_s834 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s834);
                                        _pac_sc_s832 = _pac_sc_s754_s834;
                                      }
                                      else
                                      {
                                        int _pac_sc_s754_s836 = 0;
                                        AbstractQueue@meta(_pac_sc_s754_s836);
                                        bit _pac_sc_s837 = 0;
                                        if((key.__cid) == _pac_sc_s754_s836)/*HashMap.sk:122*/
                                        {
                                          bit _pac_sc_s754_s839 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s839);
                                          _pac_sc_s837 = _pac_sc_s754_s839;
                                        }
                                        else
                                        {
                                          int _pac_sc_s754_s841 = 0;
                                          HashMap_Node@meta(_pac_sc_s754_s841);
                                          bit _pac_sc_s842 = 0;
                                          if((key.__cid) == _pac_sc_s754_s841)/*HashMap.sk:122*/
                                          {
                                            bit _pac_sc_s754_s844 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s844);
                                            _pac_sc_s842 = _pac_sc_s754_s844;
                                          }
                                          else
                                          {
                                            int _pac_sc_s754_s846 = 0;
                                            SecureRandom@meta(_pac_sc_s754_s846);
                                            bit _pac_sc_s847 = 0;
                                            if((key.__cid) == _pac_sc_s754_s846)/*HashMap.sk:122*/
                                            {
                                              bit _pac_sc_s754_s849 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s849);
                                              _pac_sc_s847 = _pac_sc_s754_s849;
                                            }
                                            else
                                            {
                                              int _pac_sc_s754_s851 = 0;
                                              ArrayList@meta(_pac_sc_s754_s851);
                                              bit _pac_sc_s852 = 0;
                                              if((key.__cid) == _pac_sc_s754_s851)/*HashMap.sk:122*/
                                              {
                                                bit _pac_sc_s754_s854 = 0;
                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s854);
                                                _pac_sc_s852 = _pac_sc_s754_s854;
                                              }
                                              else
                                              {
                                                int _pac_sc_s754_s856 = 0;
                                                System@meta(_pac_sc_s754_s856);
                                                bit _pac_sc_s857 = 0;
                                                if((key.__cid) == _pac_sc_s754_s856)/*HashMap.sk:122*/
                                                {
                                                  bit _pac_sc_s754_s859 = 0;
                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s859);
                                                  _pac_sc_s857 = _pac_sc_s754_s859;
                                                }
                                                else
                                                {
                                                  int _pac_sc_s754_s861 = 0;
                                                  HashSet@meta(_pac_sc_s754_s861);
                                                  bit _pac_sc_s862 = 0;
                                                  if((key.__cid) == _pac_sc_s754_s861)/*HashMap.sk:122*/
                                                  {
                                                    bit _pac_sc_s754_s864 = 0;
                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s864);
                                                    _pac_sc_s862 = _pac_sc_s754_s864;
                                                  }
                                                  else
                                                  {
                                                    int _pac_sc_s754_s866 = 0;
                                                    Cryptographer@meta(_pac_sc_s754_s866);
                                                    bit _pac_sc_s867 = 0;
                                                    if((key.__cid) == _pac_sc_s754_s866)/*HashMap.sk:122*/
                                                    {
                                                      bit _pac_sc_s754_s869 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s869);
                                                      _pac_sc_s867 = _pac_sc_s754_s869;
                                                    }
                                                    else
                                                    {
                                                      int _pac_sc_s754_s871 = 0;
                                                      Number@meta(_pac_sc_s754_s871);
                                                      bit _pac_sc_s872 = 0;
                                                      if((key.__cid) == _pac_sc_s754_s871)/*HashMap.sk:122*/
                                                      {
                                                        bit _pac_sc_s754_s874 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s874);
                                                        _pac_sc_s872 = _pac_sc_s754_s874;
                                                      }
                                                      else
                                                      {
                                                        int _pac_sc_s754_s876 = 0;
                                                        ArrayDeque_DequeNode@meta(_pac_sc_s754_s876);
                                                        bit _pac_sc_s877 = 0;
                                                        if((key.__cid) == _pac_sc_s754_s876)/*HashMap.sk:122*/
                                                        {
                                                          bit _pac_sc_s754_s879 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s879);
                                                          _pac_sc_s877 = _pac_sc_s754_s879;
                                                        }
                                                        else
                                                        {
                                                          int _pac_sc_s754_s881 = 0;
                                                          KerberosKey@meta(_pac_sc_s754_s881);
                                                          bit _pac_sc_s882 = 0;
                                                          if((key.__cid) == _pac_sc_s754_s881)/*HashMap.sk:122*/
                                                          {
                                                            bit _pac_sc_s754_s884 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s884);
                                                            _pac_sc_s882 = _pac_sc_s754_s884;
                                                          }
                                                          else
                                                          {
                                                            int _pac_sc_s754_s886 = 0;
                                                            Character@meta(_pac_sc_s754_s886);
                                                            bit _pac_sc_s887 = 0;
                                                            if((key.__cid) == _pac_sc_s754_s886)/*HashMap.sk:122*/
                                                            {
                                                              bit _pac_sc_s754_s889 = 0;
                                                              equals_Object@Character(key, node.key_HashMap_Node, _pac_sc_s754_s889);
                                                              _pac_sc_s887 = _pac_sc_s754_s889;
                                                            }
                                                            else
                                                            {
                                                              int _pac_sc_s754_s891 = 0;
                                                              LinkedList@meta(_pac_sc_s754_s891);
                                                              bit _pac_sc_s892 = 0;
                                                              if((key.__cid) == _pac_sc_s754_s891)/*HashMap.sk:122*/
                                                              {
                                                                bit _pac_sc_s754_s894 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s894);
                                                                _pac_sc_s892 = _pac_sc_s754_s894;
                                                              }
                                                              else
                                                              {
                                                                int _pac_sc_s754_s896 = 0;
                                                                String@meta(_pac_sc_s754_s896);
                                                                bit _pac_sc_s897 = 0;
                                                                if((key.__cid) == _pac_sc_s754_s896)/*HashMap.sk:122*/
                                                                {
                                                                  bit _pac_sc_s754_s899 = 0;
                                                                  equals_Object@String(key, node.key_HashMap_Node, _pac_sc_s754_s899);
                                                                  _pac_sc_s897 = _pac_sc_s754_s899;
                                                                }
                                                                else
                                                                {
                                                                  int _pac_sc_s754_s901 = 0;
                                                                  Cipher@meta(_pac_sc_s754_s901);
                                                                  bit _pac_sc_s902 = 0;
                                                                  if((key.__cid) == _pac_sc_s754_s901)/*HashMap.sk:122*/
                                                                  {
                                                                    bit _pac_sc_s754_s904 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s904);
                                                                    _pac_sc_s902 = _pac_sc_s754_s904;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _pac_sc_s754_s906 = 0;
                                                                    FileReaderr@meta(_pac_sc_s754_s906);
                                                                    bit _pac_sc_s907 = 0;
                                                                    if((key.__cid) == _pac_sc_s754_s906)/*HashMap.sk:122*/
                                                                    {
                                                                      bit _pac_sc_s754_s909 = 0;
                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s909);
                                                                      _pac_sc_s907 = _pac_sc_s754_s909;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _pac_sc_s754_s911 = 0;
                                                                      TreeSet@meta(_pac_sc_s754_s911);
                                                                      bit _pac_sc_s912 = 0;
                                                                      if((key.__cid) == _pac_sc_s754_s911)/*HashMap.sk:122*/
                                                                      {
                                                                        bit _pac_sc_s754_s914 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s914);
                                                                        _pac_sc_s912 = _pac_sc_s754_s914;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _pac_sc_s754_s916 = 0;
                                                                        HashMap@meta(_pac_sc_s754_s916);
                                                                        bit _pac_sc_s917 = 0;
                                                                        if((key.__cid) == _pac_sc_s754_s916)/*HashMap.sk:122*/
                                                                        {
                                                                          bit _pac_sc_s754_s919 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s919);
                                                                          _pac_sc_s917 = _pac_sc_s754_s919;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _pac_sc_s754_s921 = 0;
                                                                          ArrayDeque@meta(_pac_sc_s754_s921);
                                                                          bit _pac_sc_s922 = 0;
                                                                          if((key.__cid) == _pac_sc_s754_s921)/*HashMap.sk:122*/
                                                                          {
                                                                            bit _pac_sc_s754_s924 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s924);
                                                                            _pac_sc_s922 = _pac_sc_s754_s924;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _pac_sc_s754_s926 = 0;
                                                                            SecretKeySpec@meta(_pac_sc_s754_s926);
                                                                            bit _pac_sc_s927 = 0;
                                                                            if((key.__cid) == _pac_sc_s754_s926)/*HashMap.sk:122*/
                                                                            {
                                                                              bit _pac_sc_s754_s929 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s929);
                                                                              _pac_sc_s927 = _pac_sc_s754_s929;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _pac_sc_s754_s931 = 0;
                                                                              TreeMap@meta(_pac_sc_s754_s931);
                                                                              bit _pac_sc_s932 = 0;
                                                                              if((key.__cid) == _pac_sc_s754_s931)/*HashMap.sk:122*/
                                                                              {
                                                                                bit _pac_sc_s754_s934 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s934);
                                                                                _pac_sc_s932 = _pac_sc_s754_s934;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _pac_sc_s754_s936 = 0;
                                                                                StringBuffer@meta(_pac_sc_s754_s936);
                                                                                bit _pac_sc_s937 = 0;
                                                                                if((key.__cid) == _pac_sc_s754_s936)/*HashMap.sk:122*/
                                                                                {
                                                                                  bit _pac_sc_s754_s939 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s939);
                                                                                  _pac_sc_s937 = _pac_sc_s754_s939;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _pac_sc_s754_s941 = 0;
                                                                                  Object@meta(_pac_sc_s754_s941);
                                                                                  bit _pac_sc_s942 = 0;
                                                                                  if((key.__cid) == _pac_sc_s754_s941)/*HashMap.sk:122*/
                                                                                  {
                                                                                    bit _pac_sc_s754_s944 = 0;
                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s754_s944);
                                                                                    _pac_sc_s942 = _pac_sc_s754_s944;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    _pac_sc_s942 = 0;
                                                                                  }
                                                                                  _pac_sc_s937 = _pac_sc_s942;
                                                                                }
                                                                                _pac_sc_s932 = _pac_sc_s937;
                                                                              }
                                                                              _pac_sc_s927 = _pac_sc_s932;
                                                                            }
                                                                            _pac_sc_s922 = _pac_sc_s927;
                                                                          }
                                                                          _pac_sc_s917 = _pac_sc_s922;
                                                                        }
                                                                        _pac_sc_s912 = _pac_sc_s917;
                                                                      }
                                                                      _pac_sc_s907 = _pac_sc_s912;
                                                                    }
                                                                    _pac_sc_s902 = _pac_sc_s907;
                                                                  }
                                                                  _pac_sc_s897 = _pac_sc_s902;
                                                                }
                                                                _pac_sc_s892 = _pac_sc_s897;
                                                              }
                                                              _pac_sc_s887 = _pac_sc_s892;
                                                            }
                                                            _pac_sc_s882 = _pac_sc_s887;
                                                          }
                                                          _pac_sc_s877 = _pac_sc_s882;
                                                        }
                                                        _pac_sc_s872 = _pac_sc_s877;
                                                      }
                                                      _pac_sc_s867 = _pac_sc_s872;
                                                    }
                                                    _pac_sc_s862 = _pac_sc_s867;
                                                  }
                                                  _pac_sc_s857 = _pac_sc_s862;
                                                }
                                                _pac_sc_s852 = _pac_sc_s857;
                                              }
                                              _pac_sc_s847 = _pac_sc_s852;
                                            }
                                            _pac_sc_s842 = _pac_sc_s847;
                                          }
                                          _pac_sc_s837 = _pac_sc_s842;
                                        }
                                        _pac_sc_s832 = _pac_sc_s837;
                                      }
                                      _pac_sc_s827 = _pac_sc_s832;
                                    }
                                    _pac_sc_s822 = _pac_sc_s827;
                                  }
                                  _pac_sc_s817 = _pac_sc_s822;
                                }
                                _pac_sc_s812 = _pac_sc_s817;
                              }
                              _pac_sc_s807 = _pac_sc_s812;
                            }
                            _pac_sc_s802 = _pac_sc_s807;
                          }
                          _pac_sc_s797 = _pac_sc_s802;
                        }
                        _pac_sc_s792 = _pac_sc_s797;
                      }
                      _pac_sc_s787 = _pac_sc_s792;
                    }
                    _pac_sc_s782 = _pac_sc_s787;
                  }
                  _pac_sc_s777 = _pac_sc_s782;
                }
                _pac_sc_s772 = _pac_sc_s777;
              }
              _pac_sc_s767 = _pac_sc_s772;
            }
            _pac_sc_s762 = _pac_sc_s767;
          }
          _pac_sc_s757 = _pac_sc_s762;
        }
        _pac_sc_s754 = !(_pac_sc_s757);
      }
      if(_pac_sc_s754)/*HashMap.sk:122*/
      {
        resize_int@HashMap(self, hash + 1, self0__HashMap_Node_s4268);
        hashMod = hash % (self.capacity_HashMap);
        if(hashMod < 0)/*HashMap.sk:125*/
        {
          hashMod = hashMod + (self.capacity_HashMap);
        }
        node = self.elementData_HashMap.A[hashMod];
        self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
      }
      int _out_s946 = 0;
      HashMap_Node@meta(_out_s946);
      Object@Object _out_s948 = null;
      HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s946), self, key, value, hash, _out_s948, self0__HashMap_Node_s4268);
      self.elementData_HashMap.A[hashMod] = _out_s948;
      if(node != (null))/*HashMap.sk:132*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
      else
      {
        _out = null;
        return;
      }
    }
    int _out_s950 = 0;
    HashMap_Node@meta(_out_s950);
    Object@Object _out_s952 = null;
    HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s950), self, key, value, hash, _out_s952, self0__HashMap_Node_s4268);
    self.elementData_HashMap.A[hashMod] = _out_s952;
    self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
    _out = null;
    return;
  }
  /*HashMap.sk:95*/
  
void put_K_V (Object self, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s4270)/*HashMap.sk:95*/
  {
    int h_s563 = 0;
    Integer@meta(h_s563);
    int _pac_sc_s564 = 0;
    if((key.__cid) == h_s563)/*HashMap.sk:96*/
    {
      int h_s566 = 0;
      hashCode@Integer(key, h_s566);
      _pac_sc_s564 = h_s566;
    }
    else
    {
      int h_s568 = 0;
      Boolean@meta(h_s568);
      int _pac_sc_s569 = 0;
      if((key.__cid) == h_s568)/*HashMap.sk:96*/
      {
        int h_s571 = 0;
        hashCode@Object(key, h_s571);
        _pac_sc_s569 = h_s571;
      }
      else
      {
        int h_s573 = 0;
        Scanner@meta(h_s573);
        int _pac_sc_s574 = 0;
        if((key.__cid) == h_s573)/*HashMap.sk:96*/
        {
          int h_s576 = 0;
          hashCode@Object(key, h_s576);
          _pac_sc_s574 = h_s576;
        }
        else
        {
          int h_s578 = 0;
          KeyGenerator@meta(h_s578);
          int _pac_sc_s579 = 0;
          if((key.__cid) == h_s578)/*HashMap.sk:96*/
          {
            int h_s581 = 0;
            hashCode@Object(key, h_s581);
            _pac_sc_s579 = h_s581;
          }
          else
          {
            int h_s583 = 0;
            Mac@meta(h_s583);
            int _pac_sc_s584 = 0;
            if((key.__cid) == h_s583)/*HashMap.sk:96*/
            {
              int h_s586 = 0;
              hashCode@Object(key, h_s586);
              _pac_sc_s584 = h_s586;
            }
            else
            {
              int h_s588 = 0;
              Float@meta(h_s588);
              int _pac_sc_s589 = 0;
              if((key.__cid) == h_s588)/*HashMap.sk:96*/
              {
                int h_s591 = 0;
                hashCode@Object(key, h_s591);
                _pac_sc_s589 = h_s591;
              }
              else
              {
                int h_s593 = 0;
                StringBuilder@meta(h_s593);
                int _pac_sc_s594 = 0;
                if((key.__cid) == h_s593)/*HashMap.sk:96*/
                {
                  int h_s596 = 0;
                  hashCode@Object(key, h_s596);
                  _pac_sc_s594 = h_s596;
                }
                else
                {
                  int h_s598 = 0;
                  Assert@meta(h_s598);
                  int _pac_sc_s599 = 0;
                  if((key.__cid) == h_s598)/*HashMap.sk:96*/
                  {
                    int h_s601 = 0;
                    hashCode@Object(key, h_s601);
                    _pac_sc_s599 = h_s601;
                  }
                  else
                  {
                    int h_s603 = 0;
                    Stack@meta(h_s603);
                    int _pac_sc_s604 = 0;
                    if((key.__cid) == h_s603)/*HashMap.sk:96*/
                    {
                      int h_s606 = 0;
                      hashCode@Object(key, h_s606);
                      _pac_sc_s604 = h_s606;
                    }
                    else
                    {
                      int h_s608 = 0;
                      FileWriterr@meta(h_s608);
                      int _pac_sc_s609 = 0;
                      if((key.__cid) == h_s608)/*HashMap.sk:96*/
                      {
                        int h_s611 = 0;
                        hashCode@Object(key, h_s611);
                        _pac_sc_s609 = h_s611;
                      }
                      else
                      {
                        int h_s613 = 0;
                        File@meta(h_s613);
                        int _pac_sc_s614 = 0;
                        if((key.__cid) == h_s613)/*HashMap.sk:96*/
                        {
                          int h_s616 = 0;
                          hashCode@Object(key, h_s616);
                          _pac_sc_s614 = h_s616;
                        }
                        else
                        {
                          int h_s618 = 0;
                          PasswordManager@meta(h_s618);
                          int _pac_sc_s619 = 0;
                          if((key.__cid) == h_s618)/*HashMap.sk:96*/
                          {
                            int h_s621 = 0;
                            hashCode@Object(key, h_s621);
                            _pac_sc_s619 = h_s621;
                          }
                          else
                          {
                            int h_s623 = 0;
                            PasswordManagerTest@meta(h_s623);
                            int _pac_sc_s624 = 0;
                            if((key.__cid) == h_s623)/*HashMap.sk:96*/
                            {
                              int h_s626 = 0;
                              hashCode@Object(key, h_s626);
                              _pac_sc_s624 = h_s626;
                            }
                            else
                            {
                              int h_s628 = 0;
                              IvParameterSpec@meta(h_s628);
                              int _pac_sc_s629 = 0;
                              if((key.__cid) == h_s628)/*HashMap.sk:96*/
                              {
                                int h_s631 = 0;
                                hashCode@Object(key, h_s631);
                                _pac_sc_s629 = h_s631;
                              }
                              else
                              {
                                int h_s633 = 0;
                                PasswordMap@meta(h_s633);
                                int _pac_sc_s634 = 0;
                                if((key.__cid) == h_s633)/*HashMap.sk:96*/
                                {
                                  int h_s636 = 0;
                                  hashCode@Object(key, h_s636);
                                  _pac_sc_s634 = h_s636;
                                }
                                else
                                {
                                  int h_s638 = 0;
                                  BufferedWriter@meta(h_s638);
                                  int _pac_sc_s639 = 0;
                                  if((key.__cid) == h_s638)/*HashMap.sk:96*/
                                  {
                                    int h_s641 = 0;
                                    hashCode@Object(key, h_s641);
                                    _pac_sc_s639 = h_s641;
                                  }
                                  else
                                  {
                                    int h_s643 = 0;
                                    AbstractQueue@meta(h_s643);
                                    int _pac_sc_s644 = 0;
                                    if((key.__cid) == h_s643)/*HashMap.sk:96*/
                                    {
                                      int h_s646 = 0;
                                      hashCode@Object(key, h_s646);
                                      _pac_sc_s644 = h_s646;
                                    }
                                    else
                                    {
                                      int h_s648 = 0;
                                      HashMap_Node@meta(h_s648);
                                      int _pac_sc_s649 = 0;
                                      if((key.__cid) == h_s648)/*HashMap.sk:96*/
                                      {
                                        int h_s651 = 0;
                                        hashCode@Object(key, h_s651);
                                        _pac_sc_s649 = h_s651;
                                      }
                                      else
                                      {
                                        int h_s653 = 0;
                                        SecureRandom@meta(h_s653);
                                        int _pac_sc_s654 = 0;
                                        if((key.__cid) == h_s653)/*HashMap.sk:96*/
                                        {
                                          int h_s656 = 0;
                                          hashCode@Object(key, h_s656);
                                          _pac_sc_s654 = h_s656;
                                        }
                                        else
                                        {
                                          int h_s658 = 0;
                                          ArrayList@meta(h_s658);
                                          int _pac_sc_s659 = 0;
                                          if((key.__cid) == h_s658)/*HashMap.sk:96*/
                                          {
                                            int h_s661 = 0;
                                            hashCode@Object(key, h_s661);
                                            _pac_sc_s659 = h_s661;
                                          }
                                          else
                                          {
                                            int h_s663 = 0;
                                            System@meta(h_s663);
                                            int _pac_sc_s664 = 0;
                                            if((key.__cid) == h_s663)/*HashMap.sk:96*/
                                            {
                                              int h_s666 = 0;
                                              hashCode@Object(key, h_s666);
                                              _pac_sc_s664 = h_s666;
                                            }
                                            else
                                            {
                                              int h_s668 = 0;
                                              HashSet@meta(h_s668);
                                              int _pac_sc_s669 = 0;
                                              if((key.__cid) == h_s668)/*HashMap.sk:96*/
                                              {
                                                int h_s671 = 0;
                                                hashCode@Object(key, h_s671);
                                                _pac_sc_s669 = h_s671;
                                              }
                                              else
                                              {
                                                int h_s673 = 0;
                                                Cryptographer@meta(h_s673);
                                                int _pac_sc_s674 = 0;
                                                if((key.__cid) == h_s673)/*HashMap.sk:96*/
                                                {
                                                  int h_s676 = 0;
                                                  hashCode@Object(key, h_s676);
                                                  _pac_sc_s674 = h_s676;
                                                }
                                                else
                                                {
                                                  int h_s678 = 0;
                                                  Number@meta(h_s678);
                                                  int _pac_sc_s679 = 0;
                                                  if((key.__cid) == h_s678)/*HashMap.sk:96*/
                                                  {
                                                    int h_s681 = 0;
                                                    hashCode@Object(key, h_s681);
                                                    _pac_sc_s679 = h_s681;
                                                  }
                                                  else
                                                  {
                                                    int h_s683 = 0;
                                                    ArrayDeque_DequeNode@meta(h_s683);
                                                    int _pac_sc_s684 = 0;
                                                    if((key.__cid) == h_s683)/*HashMap.sk:96*/
                                                    {
                                                      int h_s686 = 0;
                                                      hashCode@Object(key, h_s686);
                                                      _pac_sc_s684 = h_s686;
                                                    }
                                                    else
                                                    {
                                                      int h_s688 = 0;
                                                      KerberosKey@meta(h_s688);
                                                      int _pac_sc_s689 = 0;
                                                      if((key.__cid) == h_s688)/*HashMap.sk:96*/
                                                      {
                                                        int h_s691 = 0;
                                                        hashCode@Object(key, h_s691);
                                                        _pac_sc_s689 = h_s691;
                                                      }
                                                      else
                                                      {
                                                        int h_s693 = 0;
                                                        Character@meta(h_s693);
                                                        int _pac_sc_s694 = 0;
                                                        if((key.__cid) == h_s693)/*HashMap.sk:96*/
                                                        {
                                                          int h_s696 = 0;
                                                          hashCode@Object(key, h_s696);
                                                          _pac_sc_s694 = h_s696;
                                                        }
                                                        else
                                                        {
                                                          int h_s698 = 0;
                                                          LinkedList@meta(h_s698);
                                                          int _pac_sc_s699 = 0;
                                                          if((key.__cid) == h_s698)/*HashMap.sk:96*/
                                                          {
                                                            int h_s701 = 0;
                                                            hashCode@Object(key, h_s701);
                                                            _pac_sc_s699 = h_s701;
                                                          }
                                                          else
                                                          {
                                                            int h_s703 = 0;
                                                            String@meta(h_s703);
                                                            int _pac_sc_s704 = 0;
                                                            if((key.__cid) == h_s703)/*HashMap.sk:96*/
                                                            {
                                                              int h_s706 = 0;
                                                              hashCode@String(key, h_s706);
                                                              _pac_sc_s704 = h_s706;
                                                            }
                                                            else
                                                            {
                                                              int h_s708 = 0;
                                                              Cipher@meta(h_s708);
                                                              int _pac_sc_s709 = 0;
                                                              if((key.__cid) == h_s708)/*HashMap.sk:96*/
                                                              {
                                                                int h_s711 = 0;
                                                                hashCode@Object(key, h_s711);
                                                                _pac_sc_s709 = h_s711;
                                                              }
                                                              else
                                                              {
                                                                int h_s713 = 0;
                                                                FileReaderr@meta(h_s713);
                                                                int _pac_sc_s714 = 0;
                                                                if((key.__cid) == h_s713)/*HashMap.sk:96*/
                                                                {
                                                                  int h_s716 = 0;
                                                                  hashCode@Object(key, h_s716);
                                                                  _pac_sc_s714 = h_s716;
                                                                }
                                                                else
                                                                {
                                                                  int h_s718 = 0;
                                                                  TreeSet@meta(h_s718);
                                                                  int _pac_sc_s719 = 0;
                                                                  if((key.__cid) == h_s718)/*HashMap.sk:96*/
                                                                  {
                                                                    int h_s721 = 0;
                                                                    hashCode@Object(key, h_s721);
                                                                    _pac_sc_s719 = h_s721;
                                                                  }
                                                                  else
                                                                  {
                                                                    int h_s723 = 0;
                                                                    HashMap@meta(h_s723);
                                                                    int _pac_sc_s724 = 0;
                                                                    if((key.__cid) == h_s723)/*HashMap.sk:96*/
                                                                    {
                                                                      int h_s726 = 0;
                                                                      hashCode@Object(key, h_s726);
                                                                      _pac_sc_s724 = h_s726;
                                                                    }
                                                                    else
                                                                    {
                                                                      int h_s728 = 0;
                                                                      ArrayDeque@meta(h_s728);
                                                                      int _pac_sc_s729 = 0;
                                                                      if((key.__cid) == h_s728)/*HashMap.sk:96*/
                                                                      {
                                                                        int h_s731 = 0;
                                                                        hashCode@Object(key, h_s731);
                                                                        _pac_sc_s729 = h_s731;
                                                                      }
                                                                      else
                                                                      {
                                                                        int h_s733 = 0;
                                                                        SecretKeySpec@meta(h_s733);
                                                                        int _pac_sc_s734 = 0;
                                                                        if((key.__cid) == h_s733)/*HashMap.sk:96*/
                                                                        {
                                                                          int h_s736 = 0;
                                                                          hashCode@Object(key, h_s736);
                                                                          _pac_sc_s734 = h_s736;
                                                                        }
                                                                        else
                                                                        {
                                                                          int h_s738 = 0;
                                                                          TreeMap@meta(h_s738);
                                                                          int _pac_sc_s739 = 0;
                                                                          if((key.__cid) == h_s738)/*HashMap.sk:96*/
                                                                          {
                                                                            int h_s741 = 0;
                                                                            hashCode@Object(key, h_s741);
                                                                            _pac_sc_s739 = h_s741;
                                                                          }
                                                                          else
                                                                          {
                                                                            int h_s743 = 0;
                                                                            StringBuffer@meta(h_s743);
                                                                            int _pac_sc_s744 = 0;
                                                                            if((key.__cid) == h_s743)/*HashMap.sk:96*/
                                                                            {
                                                                              int h_s746 = 0;
                                                                              hashCode@Object(key, h_s746);
                                                                              _pac_sc_s744 = h_s746;
                                                                            }
                                                                            else
                                                                            {
                                                                              int h_s748 = 0;
                                                                              Object@meta(h_s748);
                                                                              int _pac_sc_s749 = 0;
                                                                              if((key.__cid) == h_s748)/*HashMap.sk:96*/
                                                                              {
                                                                                int h_s751 = 0;
                                                                                hashCode@Object(key, h_s751);
                                                                                _pac_sc_s749 = h_s751;
                                                                              }
                                                                              else
                                                                              {
                                                                                _pac_sc_s749 = 0;
                                                                              }
                                                                              _pac_sc_s744 = _pac_sc_s749;
                                                                            }
                                                                            _pac_sc_s739 = _pac_sc_s744;
                                                                          }
                                                                          _pac_sc_s734 = _pac_sc_s739;
                                                                        }
                                                                        _pac_sc_s729 = _pac_sc_s734;
                                                                      }
                                                                      _pac_sc_s724 = _pac_sc_s729;
                                                                    }
                                                                    _pac_sc_s719 = _pac_sc_s724;
                                                                  }
                                                                  _pac_sc_s714 = _pac_sc_s719;
                                                                }
                                                                _pac_sc_s709 = _pac_sc_s714;
                                                              }
                                                              _pac_sc_s704 = _pac_sc_s709;
                                                            }
                                                            _pac_sc_s699 = _pac_sc_s704;
                                                          }
                                                          _pac_sc_s694 = _pac_sc_s699;
                                                        }
                                                        _pac_sc_s689 = _pac_sc_s694;
                                                      }
                                                      _pac_sc_s684 = _pac_sc_s689;
                                                    }
                                                    _pac_sc_s679 = _pac_sc_s684;
                                                  }
                                                  _pac_sc_s674 = _pac_sc_s679;
                                                }
                                                _pac_sc_s669 = _pac_sc_s674;
                                              }
                                              _pac_sc_s664 = _pac_sc_s669;
                                            }
                                            _pac_sc_s659 = _pac_sc_s664;
                                          }
                                          _pac_sc_s654 = _pac_sc_s659;
                                        }
                                        _pac_sc_s649 = _pac_sc_s654;
                                      }
                                      _pac_sc_s644 = _pac_sc_s649;
                                    }
                                    _pac_sc_s639 = _pac_sc_s644;
                                  }
                                  _pac_sc_s634 = _pac_sc_s639;
                                }
                                _pac_sc_s629 = _pac_sc_s634;
                              }
                              _pac_sc_s624 = _pac_sc_s629;
                            }
                            _pac_sc_s619 = _pac_sc_s624;
                          }
                          _pac_sc_s614 = _pac_sc_s619;
                        }
                        _pac_sc_s609 = _pac_sc_s614;
                      }
                      _pac_sc_s604 = _pac_sc_s609;
                    }
                    _pac_sc_s599 = _pac_sc_s604;
                  }
                  _pac_sc_s594 = _pac_sc_s599;
                }
                _pac_sc_s589 = _pac_sc_s594;
              }
              _pac_sc_s584 = _pac_sc_s589;
            }
            _pac_sc_s579 = _pac_sc_s584;
          }
          _pac_sc_s574 = _pac_sc_s579;
        }
        _pac_sc_s569 = _pac_sc_s574;
      }
      _pac_sc_s564 = _pac_sc_s569;
    }
    Object@Object _out_s753 = null;
    putVal_int_K_V@HashMap(self, _pac_sc_s564, key, value, _out_s753, self0__HashMap_Node_s4270);
    _out = _out_s753;
    return;
  }
  /*HashMap.sk:22*/
  
void resize_int (Object self, int newSize, ref global Object@Object self0__HashMap_Node_s4261)/*HashMap.sk:22*/
  {
    int i = 0;
    int h = 0;
    int hashMod = 0;
    Array_Object@array oldElementData = self.elementData_HashMap;
    Array_Object@array newElementData = new Array_Object@array(length=newSize);
    i = 0;
    bit __sa0 = 0 < (self.capacity_HashMap);
    Object@Object k = null;
    Object@Object v = null;
    while(__sa0)
    {
      if((oldElementData.A[i]) != (null))/*HashMap.sk:30*/
      {
        h = oldElementData.A[i].hash_HashMap_Node;
        k = oldElementData.A[i].key_HashMap_Node;
        v = oldElementData.A[i].value_HashMap_Node;
        hashMod = h % newSize;
        if(hashMod < 0)/*HashMap.sk:35*/
        {
          hashMod = hashMod + newSize;
        }
        int _out_s954 = 0;
        HashMap_Node@meta(_out_s954);
        Object@Object _out_s956 = null;
        HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s954), self, k, v, h, _out_s956, self0__HashMap_Node_s4261);
        newElementData.A[hashMod] = _out_s956;
      }
      i = i + 1;
      __sa0 = i < (self.capacity_HashMap);
    }
    self.elementData_HashMap = newElementData;
    self.capacity_HashMap = newSize;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s4329 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s4328)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s4328 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s4351 (ref int MAX_ARRAY_SIZE__ArrayList_s4350)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s4350 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:22*/
  
void String_String_byte (Object self, Array_char bytes, ref Object _out)/*String.sk:22*/
  {
    int len;
    len = bytes.length;
    self._value_String = new Array_char@array(length=len);
    for(int i = 0; i < len; i = i + 1)/*Canonical*/
    {
      self._value_String.A[i] = bytes.A[i];
    }
    self._count_String = len;
    _out = self;
    return;
  }
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:32*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:32*/
  {
    if((0 <= index) && (index < (self._count_String)))/*String.sk:33*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:139*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:139*/
  {
    _out = 0;
    int _out_s2121 = 0;
    String@meta(_out_s2121);
    if((obj.__cid) == _out_s2121)/*String.sk:141*/
    {
      _out = 1;
      int sLen_s2123 = 0;
      String@meta(sLen_s2123);
      int _pac_sc_s2124 = 0;
      if((obj.__cid) == sLen_s2123)/*String.sk:144*/
      {
        int sLen_s2126 = 0;
        length@String(obj, sLen_s2126);
        _pac_sc_s2124 = sLen_s2126;
      }
      else
      {
        _pac_sc_s2124 = 0;
      }
      int tLen_s2128 = 0;
      String@meta(tLen_s2128);
      int _pac_sc_s2129 = 0;
      if((self.__cid) == tLen_s2128)/*String.sk:145*/
      {
        int tLen_s2131 = 0;
        length@String(self, tLen_s2131);
        _pac_sc_s2129 = tLen_s2131;
      }
      else
      {
        _pac_sc_s2129 = 0;
      }
      if(_pac_sc_s2124 != _pac_sc_s2129)/*String.sk:146*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2124) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:148*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:198*/
  
void getBytes (Object self, ref Array_char _out)/*String.sk:198*/
  {
    int _out_s2133 = 0;
    String@meta(_out_s2133);
    Object@Object _pac_sc_s2134 = null;
    if((self.__cid) == _out_s2133)/*String.sk:199*/
    {
      Object@Object _out_s2136 = null;
      toString@String(self, _out_s2136);
      _pac_sc_s2134 = _out_s2136;
    }
    else
    {
      _pac_sc_s2134 = null;
    }
    Array_char@array _out_s2138 = null;
    getBytes_String(_pac_sc_s2134, _out_s2138);
    _out = _out_s2138;
    return;
  }
  /*String.sk:202*/
  
void getBytes_String (Object str, ref Array_char _out)/*String.sk:202*/
  {
    int len_s2140 = 0;
    String@meta(len_s2140);
    int _pac_sc_s2141 = 0;
    if((str.__cid) == len_s2140)/*String.sk:203*/
    {
      int len_s2143 = 0;
      length@String(str, len_s2143);
      _pac_sc_s2141 = len_s2143;
    }
    else
    {
      _pac_sc_s2141 = 0;
    }
    _out = new Array_char@array(length=_pac_sc_s2141);
    for(int i = 0; i < _pac_sc_s2141; i = i + 1)/*Canonical*/
    {
      int _out_s2145 = 0;
      String@meta(_out_s2145);
      char _pac_sc_s2146 = '\0';
      if((str.__cid) == _out_s2145)/*String.sk:206*/
      {
        char _out_s2148 = '\0';
        charAt_int@String(str, i, _out_s2148);
        _pac_sc_s2146 = _out_s2148;
      }
      else
      {
        _pac_sc_s2146 = '\0';
      }
      _out.A[i] = _pac_sc_s2146;
    }
    return;
  }
  /*String.sk:156*/
  
void hashCode (Object self, ref int _out)/*String.sk:156*/
  {
    int n;
    int hash;
    int temp;
    n = self._count_String;
    hash = 0;
    if(n == 0)/*String.sk:158*/
    {
      _out = 0;
      return;
    }
    for(int i = 0; i < n; i = i + 1)/*Canonical*/
    {
      int temp_s2150 = 0;
      String@meta(temp_s2150);
      char _pac_sc_s2151 = '\0';
      if((self.__cid) == temp_s2150)/*String.sk:162*/
      {
        char temp_s2153 = '\0';
        charAt_int@String(self, i, temp_s2153);
        _pac_sc_s2151 = temp_s2153;
      }
      else
      {
        _pac_sc_s2151 = '\0';
      }
      temp = _pac_sc_s2151;
      for(int j = 0; j < ((n - 1) - i); j = j + 1)/*Canonical*/
      {
        temp = temp * 31;
      }
      hash = hash + temp;
    }
    _out = hash;
    return;
  }
  /*String.sk:37*/
  
void length (Object self, ref int _out)/*String.sk:37*/
  {
    _out = self._count_String;
    return;
  }
  /*String.sk:41*/
  
void toString (Object self, ref Object _out)/*String.sk:41*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s4341 (ref int INITIAL_CAPACITY__TreeSet_s4340)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s4340 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s4381 (ref int RESIZE_FACTOR__TreeSet_s4380)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s4380 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s4339 (ref int INITIAL_CAPACITY__HashSet_s4338)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s4338 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s4379 (ref int RESIZE_FACTOR__HashSet_s4378)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s4378 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:216*/
  
void charValue (Object self, ref char _out)/*Character.sk:216*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:220*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Character.sk:220*/
  {
    int _out_s3131 = 0;
    Character@meta(_out_s3131);
    if((obj.__cid) == _out_s3131)/*Character.sk:221*/
    {
      int _out_s3133 = 0;
      Character@meta(_out_s3133);
      char _pac_sc_s3134 = '\0';
      if((obj.__cid) == _out_s3133)/*Character.sk:222*/
      {
        char _out_s3136 = '\0';
        charValue@Character(obj, _out_s3136);
        _pac_sc_s3134 = _out_s3136;
      }
      else
      {
        _pac_sc_s3134 = '\0';
      }
      _out = (self.value_Character) == _pac_sc_s3134;
      return;
    }
    _out = 0;
    return;
  }
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s4275 (ref char COMBINING_SPACING_MARK__Character_s4274)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s4274 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s4277 (ref char CONNECTOR_PUNCTUATION__Character_s4276)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s4276 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s4279 (ref char CONTROL__Character_s4278)/*Character.sk:71*/
  {
    CONTROL__Character_s4278 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s4281 (ref char CURRENCY_SYMBOL__Character_s4280)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s4280 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s4283 (ref char DASH_PUNCTUATION__Character_s4282)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s4282 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s4285 (ref char DECIMAL_DIGIT_NUMBER__Character_s4284)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s4284 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s4289 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s4288)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s4288 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4291 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4290)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4290 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4293 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4292)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4292 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4295 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4294)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4294 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4297 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4296)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4296 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4299 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4298)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4298 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4301 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4300)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4300 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4303 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4302)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4302 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4305 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4304)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4304 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s4307 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s4306)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s4306 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s4309 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s4308)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s4308 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4311 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4310)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4310 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4313 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4312)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4312 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4315 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4314)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4314 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4317 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4316)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4316 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4319 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4318)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4318 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4321 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4320)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4320 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4323 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4322)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4322 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s4325 (ref char DIRECTIONALITY_UNDEFINED__Character_s4324)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s4324 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s4327 (ref char DIRECTIONALITY_WHITESPACE__Character_s4326)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s4326 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s4331 (ref char ENCLOSING_MARK__Character_s4330)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s4330 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s4333 (ref char END_PUNCTUATION__Character_s4332)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s4332 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s4335 (ref char FINAL_QUOTE_PUNCTUATION__Character_s4334)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s4334 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s4337 (ref char FORMAT__Character_s4336)/*Character.sk:75*/
  {
    FORMAT__Character_s4336 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s4343 (ref char LETTER_NUMBER__Character_s4342)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s4342 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s4345 (ref char LINE_SEPARATOR__Character_s4344)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s4344 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s4347 (ref char LOWERCASE_LETTER__Character_s4346)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s4346 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s4349 (ref char MATH_SYMBOL__Character_s4348)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s4348 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s4353 (ref int MAX_RADIX__Character_s4352)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s4352 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s4357 (ref int MIN_RADIX__Character_s4356)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s4356 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s4361 (ref char MODIFIER_LETTER__Character_s4360)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s4360 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s4363 (ref char MODIFIER_SYMBOL__Character_s4362)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s4362 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s4365 (ref char NON_SPACING_MARK__Character_s4364)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s4364 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s4367 (ref char OTHER_LETTER__Character_s4366)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s4366 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s4369 (ref char OTHER_NUMBER__Character_s4368)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s4368 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s4371 (ref char OTHER_PUNCTUATION__Character_s4370)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s4370 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s4373 (ref char OTHER_SYMBOL__Character_s4372)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s4372 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s4375 (ref char PARAGRAPH_SEPARATOR__Character_s4374)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s4374 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s4377 (ref char PRIVATE_USE__Character_s4376)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s4376 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s4383 (ref char SPACE_SEPARATOR__Character_s4382)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s4382 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s4385 (ref char START_PUNCTUATION__Character_s4384)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s4384 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s4387 (ref char SURROGATE__Character_s4386)/*Character.sk:83*/
  {
    SURROGATE__Character_s4386 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s4389 (ref char TITLECASE_LETTER__Character_s4388)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s4388 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s4391 (ref char UNASSIGNED__Character_s4390)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s4390 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s4393 (ref char UPPERCASE_LETTER__Character_s4392)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s4392 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE PasswordManagerTest*/
package PasswordManagerTest{
  /*Passwor..erTest.sk:7*/
  
void _main (ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4266, ref global Object@Object self0__HashMap_Node_s4272)/*Passwor..erTest.sk:7*/
  {
    int self_s3138 = 0;
    Object@meta(self_s3138);
    Object@Object self_s3140 = null;
    Object_Object@Object(new Object@Object(__cid=self_s3138), self_s3140);
    int pasman_s3142 = 0;
    PasswordManager@meta(pasman_s3142);
    int pasman_s3144 = 0;
    String@meta(pasman_s3144);
    Object@Object pasman_s3146 = null;
    String_String_char_int_int@String(new Object@Object(__cid=pasman_s3144), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, pasman_s3146);
    Object@Object pasman_s3148 = null;
    PasswordManager_PasswordManager_String@PasswordManager(new Object@Object(__cid=pasman_s3142), pasman_s3146, pasman_s3148, DEFAULT_INITIAL_CAPACITY__HashMap_s4266);
    int _out_s3150 = 0;
    PasswordManager@meta(_out_s3150);
    if((pasman_s3148.__cid) == _out_s3150)/*Passwor..erTest.sk:10*/
    {
      int _out_s3152 = 0;
      String@meta(_out_s3152);
      Object@Object _out_s3154 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3152), new Array_char@array(length=6, A={'y','a','h','o','o','\0'}), 0, 5, _out_s3154);
      int _out_s3156 = 0;
      String@meta(_out_s3156);
      Object@Object _out_s3158 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3156), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3158);
      addPassword_String_String@PasswordManager(pasman_s3148, _out_s3154, _out_s3158, self0__HashMap_Node_s4272);
    }
    int _out_s3160 = 0;
    PasswordManager@meta(_out_s3160);
    if((pasman_s3148.__cid) == _out_s3160)/*Passwor..erTest.sk:12*/
    {
      int _out_s3162 = 0;
      String@meta(_out_s3162);
      Object@Object _out_s3164 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3162), new Array_char@array(length=7, A={'g','o','o','g','l','e','\0'}), 0, 6, _out_s3164);
      int _out_s3166 = 0;
      String@meta(_out_s3166);
      Object@Object _out_s3168 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3166), new Array_char@array(length=8, A={'5','4','4','1','9','4','4','\0'}), 0, 7, _out_s3168);
      addPassword_String_String@PasswordManager(pasman_s3148, _out_s3164, _out_s3168, self0__HashMap_Node_s4272);
    }
    int pass1_s3170 = 0;
    PasswordManager@meta(pass1_s3170);
    Object@Object _pac_sc_s3171 = null;
    if((pasman_s3148.__cid) == pass1_s3170)/*Passwor..erTest.sk:14*/
    {
      int pass1_s3173 = 0;
      String@meta(pass1_s3173);
      Object@Object pass1_s3175 = null;
      String_String_char_int_int@String(new Object@Object(__cid=pass1_s3173), new Array_char@array(length=7, A={'g','o','o','g','l','e','\0'}), 0, 6, pass1_s3175);
      Object@Object pass1_s3177 = null;
      getPass_String@PasswordManager(pasman_s3148, pass1_s3175, pass1_s3177);
      _pac_sc_s3171 = pass1_s3177;
    }
    else
    {
      _pac_sc_s3171 = null;
    }
    int _out_s3179 = 0;
    String@meta(_out_s3179);
    bit _pac_sc_s3180 = 0;
    if((_pac_sc_s3171.__cid) == _out_s3179)/*Passwor..erTest.sk:15*/
    {
      int _out_s3182 = 0;
      String@meta(_out_s3182);
      Object@Object _out_s3184 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3182), new Array_char@array(length=8, A={'5','4','4','1','9','4','4','\0'}), 0, 7, _out_s3184);
      bit _out_s3186 = 0;
      equals_Object@String(_pac_sc_s3171, _out_s3184, _out_s3186);
      _pac_sc_s3180 = _out_s3186;
    }
    else
    {
      _pac_sc_s3180 = 0;
    }
    assert (_pac_sc_s3180); //Assert at Passwor..erTest.sk:15 (0)
    int pass2_s3188 = 0;
    PasswordManager@meta(pass2_s3188);
    Object@Object _pac_sc_s3189 = null;
    if((pasman_s3148.__cid) == pass2_s3188)/*Passwor..erTest.sk:16*/
    {
      int pass2_s3191 = 0;
      String@meta(pass2_s3191);
      Object@Object pass2_s3193 = null;
      String_String_char_int_int@String(new Object@Object(__cid=pass2_s3191), new Array_char@array(length=6, A={'y','a','h','o','o','\0'}), 0, 5, pass2_s3193);
      Object@Object pass2_s3195 = null;
      getPass_String@PasswordManager(pasman_s3148, pass2_s3193, pass2_s3195);
      _pac_sc_s3189 = pass2_s3195;
    }
    else
    {
      _pac_sc_s3189 = null;
    }
    int _out_s3197 = 0;
    String@meta(_out_s3197);
    bit _pac_sc_s3198 = 0;
    if((_pac_sc_s3189.__cid) == _out_s3197)/*Passwor..erTest.sk:17*/
    {
      int _out_s3200 = 0;
      String@meta(_out_s3200);
      Object@Object _out_s3202 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3200), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3202);
      bit _out_s3204 = 0;
      equals_Object@String(_pac_sc_s3189, _out_s3202, _out_s3204);
      _pac_sc_s3198 = _out_s3204;
    }
    else
    {
      _pac_sc_s3198 = 0;
    }
    assert (_pac_sc_s3198); //Assert at Passwor..erTest.sk:17 (0)
    int _out_s3206 = 0;
    PasswordManager@meta(_out_s3206);
    bit _pac_sc_s3207 = 0;
    if((pasman_s3148.__cid) == _out_s3206)/*Passwor..erTest.sk:18*/
    {
      int _out_s3209 = 0;
      String@meta(_out_s3209);
      Object@Object _out_s3211 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3209), new Array_char@array(length=6, A={'1','2','3','4','5','\0'}), 0, 5, _out_s3211);
      bit _out_s3213 = 0;
      checkMasterPassword_String@PasswordManager(pasman_s3148, _out_s3211, _out_s3213);
      _pac_sc_s3207 = _out_s3213;
    }
    else
    {
      _pac_sc_s3207 = 0;
    }
    assert (!(_pac_sc_s3207)); //Assert at Passwor..erTest.sk:18 (0)
    int _out_s3215 = 0;
    PasswordManager@meta(_out_s3215);
    bit _pac_sc_s3216 = 0;
    if((pasman_s3148.__cid) == _out_s3215)/*Passwor..erTest.sk:19*/
    {
      int _out_s3218 = 0;
      String@meta(_out_s3218);
      Object@Object _out_s3220 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3218), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, _out_s3220);
      bit _out_s3222 = 0;
      checkMasterPassword_String@PasswordManager(pasman_s3148, _out_s3220, _out_s3222);
      _pac_sc_s3216 = _out_s3222;
    }
    else
    {
      _pac_sc_s3216 = 0;
    }
    assert (_pac_sc_s3216); //Assert at Passwor..erTest.sk:19 (0)
  }
  /*Passwor..erTest.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*Passwor..erTest.sk:7*/
  {
    global int DEFAULT_INITIAL_CAPACITY__HashMap_s4254 = 0;
    glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s4287@HashMap(DEFAULT_INITIAL_CAPACITY__HashMap_s4254);
    global Object@Object self0__HashMap_Node_s4252 = null;
    _main(DEFAULT_INITIAL_CAPACITY__HashMap_s4254, self0__HashMap_Node_s4252);
  }
  /*Passwor..erTest.sk:7*/
  
void main__WrapperNospec ()/*Passwor..erTest.sk:7*/
  { }
  /* END PACKAGE PasswordManagerTest*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE PasswordManager*/
package PasswordManager{
  /*Passwor..anager.sk:11*/
  
void PasswordManager_PasswordManager_String (Object self, Object masterPassword, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4260)/*Passwor..anager.sk:11*/
  {
    int _out_s3261 = 0;
    Cryptographer@meta(_out_s3261);
    Object@Object _out_s3263 = null;
    Cryptographer_Cryptographer@Cryptographer(new Object@Object(__cid=_out_s3261), _out_s3263);
    self.cryptographer_PasswordManager = _out_s3263;
    int _out_s3265 = 0;
    PasswordMap@meta(_out_s3265);
    Object@Object _out_s3267 = null;
    PasswordMap_PasswordMap@PasswordMap(new Object@Object(__cid=_out_s3265), _out_s3267, DEFAULT_INITIAL_CAPACITY__HashMap_s4260);
    self.passMap_PasswordManager = _out_s3267;
    _out = self;
    return;
  }
  /*Passwor..anager.sk:31*/
  
void addPassword_String_String (Object self, Object domain, Object passWord, ref global Object@Object self0__HashMap_Node_s4267)/*Passwor..anager.sk:31*/
  {
    int PassEncryption_s3249 = 0;
    Cryptographer@meta(PassEncryption_s3249);
    Object@Object _pac_sc_s3250 = null;
    if((self.cryptographer_PasswordManager.__cid) == PassEncryption_s3249)/*Passwor..anager.sk:32*/
    {
      Object@Object PassEncryption_s3252 = null;
      encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord, PassEncryption_s3252);
      _pac_sc_s3250 = PassEncryption_s3252;
    }
    else
    {
      _pac_sc_s3250 = null;
    }
    int domainHash_s3254 = 0;
    Cryptographer@meta(domainHash_s3254);
    Object@Object _pac_sc_s3255 = null;
    if((self.cryptographer_PasswordManager.__cid) == domainHash_s3254)/*Passwor..anager.sk:33*/
    {
      Object@Object domainHash_s3257 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, domain, domainHash_s3257);
      _pac_sc_s3255 = domainHash_s3257;
    }
    else
    {
      _pac_sc_s3255 = null;
    }
    int _out_s3259 = 0;
    PasswordMap@meta(_out_s3259);
    if((self.passMap_PasswordManager.__cid) == _out_s3259)/*Passwor..anager.sk:34*/
    {
      add_String_String@PasswordMap(self.passMap_PasswordManager, _pac_sc_s3255, _pac_sc_s3250, self0__HashMap_Node_s4267);
    }
  }
  /*Passwor..anager.sk:23*/
  
void checkMasterPassword_String (Object self, Object masterPassword, ref bit _out)/*Passwor..anager.sk:23*/
  {
    int passHash_s3224 = 0;
    Cryptographer@meta(passHash_s3224);
    Object@Object _pac_sc_s3225 = null;
    if((self.cryptographer_PasswordManager.__cid) == passHash_s3224)/*Passwor..anager.sk:24*/
    {
      Object@Object passHash_s3227 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, masterPassword, passHash_s3227);
      _pac_sc_s3225 = passHash_s3227;
    }
    else
    {
      _pac_sc_s3225 = null;
    }
    int beq_s3229 = 0;
    String@meta(beq_s3229);
    bit _pac_sc_s3230 = 0;
    if((_pac_sc_s3225.__cid) == beq_s3229)/*Passwor..anager.sk:25*/
    {
      bit beq_s3232 = 0;
      equals_Object@String(_pac_sc_s3225, self.passMap_PasswordManager.masterHash_PasswordMap, beq_s3232);
      _pac_sc_s3230 = beq_s3232;
    }
    else
    {
      _pac_sc_s3230 = 0;
    }
    if(_pac_sc_s3230)/*Passwor..anager.sk:27*/
    {
      _out = 1;
      return;
    }
    _out = 0;
    return;
  }
  /*Passwor..anager.sk:51*/
  
void getPass_String (Object self, Object domain, ref Object _out)/*Passwor..anager.sk:51*/
  {
    int domainHash_s3234 = 0;
    Cryptographer@meta(domainHash_s3234);
    Object@Object _pac_sc_s3235 = null;
    if((self.cryptographer_PasswordManager.__cid) == domainHash_s3234)/*Passwor..anager.sk:52*/
    {
      Object@Object domainHash_s3237 = null;
      hash_String@Cryptographer(self.cryptographer_PasswordManager, domain, domainHash_s3237);
      _pac_sc_s3235 = domainHash_s3237;
    }
    else
    {
      _pac_sc_s3235 = null;
    }
    int PassEncryption_s3239 = 0;
    PasswordMap@meta(PassEncryption_s3239);
    Object@Object _pac_sc_s3240 = null;
    if((self.passMap_PasswordManager.__cid) == PassEncryption_s3239)/*Passwor..anager.sk:53*/
    {
      Object@Object PassEncryption_s3242 = null;
      get_String@PasswordMap(self.passMap_PasswordManager, _pac_sc_s3235, PassEncryption_s3242);
      _pac_sc_s3240 = PassEncryption_s3242;
    }
    else
    {
      _pac_sc_s3240 = null;
    }
    int _out_s3244 = 0;
    Cryptographer@meta(_out_s3244);
    Object@Object _pac_sc_s3245 = null;
    if((self.cryptographer_PasswordManager.__cid) == _out_s3244)/*Passwor..anager.sk:54*/
    {
      Object@Object _out_s3247 = null;
      decrypt_String@Cryptographer(self.cryptographer_PasswordManager, _pac_sc_s3240, _out_s3247);
      _pac_sc_s3245 = _out_s3247;
    }
    else
    {
      _pac_sc_s3245 = null;
    }
    _out = _pac_sc_s3245;
    return;
  }
  /* END PACKAGE PasswordManager*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /*SecureRandom.sk:3*/
  
void SecureRandom_SecureRandom (Object self, ref Object _out)/*SecureRandom.sk:3*/
  {
    _out = self;
    return;
  }
  /*SecureRandom.sk:7*/
  
void nextBytes_byte (Object self, Array_char buf)/*SecureRandom.sk:7*/
  {
    bit __sa18 = 0 < (buf.length);
    int i = 0;
    while(__sa18)
    {
      buf.A[i] = ((char)i);
      i = i + 1;
      __sa18 = i < (buf.length);
    }
  }
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /*HashMap_Node.sk:10*/
  
void HashMap_Node_HashMap_Node_HashMap_K_V_int (Object self, Object self_0, Object key, Object value, int hash, ref Object _out, ref global Object@Object self0__HashMap_Node_s4225)/*HashMap_Node.sk:10*/
  {
    self0__HashMap_Node_s4225 = self_0;
    self.key_HashMap_Node = key;
    self.value_HashMap_Node = value;
    self.hash_HashMap_Node = hash;
    _out = self;
    return;
  }
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /*Mac.sk:3*/
  
void Mac_Mac (Object self, ref Object _out)/*Mac.sk:3*/
  {
    _out = self;
    return;
  }
  /*Mac.sk:14*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Mac.sk:14*/
  {
    _out = text;
    return;
  }
  /*Mac.sk:7*/
  
void getInstance_String (Object type, ref Object _out)/*Mac.sk:7*/
  {
    int _out_s3297 = 0;
    Mac@meta(_out_s3297);
    Object@Object _out_s3299 = null;
    Mac_Mac(new Object@Object(__cid=_out_s3297), _out_s3299);
    _out = _out_s3299;
    return;
  }
  /*Mac.sk:11*/
  
void init_SecretKeySpec (Object self, Object key)/*Mac.sk:11*/
  { }
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /*Float.sk:29*/
  
void equals_Object (Object self, Object anotherFloat, ref bit _out)/*Float.sk:29*/
  {
    int _out_s3496 = 0;
    Float@meta(_out_s3496);
    if((anotherFloat.__cid) == _out_s3496)/*Float.sk:30*/
    {
      if((anotherFloat.value_Float) == (self.value_Float))/*Float.sk:32*/
      {
        _out = 1;
        return;
      }
    }
    _out = 0;
    return;
  }
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE PasswordMap*/
package PasswordMap{
  /*PasswordMap.sk:3*/
  
void PasswordMap_PasswordMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4264)/*PasswordMap.sk:3*/
  {
    int _out_s3516 = 0;
    HashMap@meta(_out_s3516);
    Object@Object _out_s3518 = null;
    HashMap_HashMap@HashMap(new Object@Object(__cid=_out_s3516), _out_s3518, DEFAULT_INITIAL_CAPACITY__HashMap_s4264);
    self.passMap_PasswordMap = _out_s3518;
    int c_s3520 = 0;
    Cryptographer@meta(c_s3520);
    Object@Object c_s3522 = null;
    Cryptographer_Cryptographer@Cryptographer(new Object@Object(__cid=c_s3520), c_s3522);
    int _out_s3524 = 0;
    Cryptographer@meta(_out_s3524);
    Object@Object _pac_sc_s3525 = null;
    if((c_s3522.__cid) == _out_s3524)/*PasswordMap.sk:6*/
    {
      int _out_s3527 = 0;
      String@meta(_out_s3527);
      Object@Object _out_s3529 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3527), new Array_char@array(length=5, A={'1','2','3','4','\0'}), 0, 4, _out_s3529);
      Object@Object _out_s3531 = null;
      hash_String@Cryptographer(c_s3522, _out_s3529, _out_s3531);
      _pac_sc_s3525 = _out_s3531;
    }
    else
    {
      _pac_sc_s3525 = null;
    }
    self.masterHash_PasswordMap = _pac_sc_s3525;
    _out = self;
    return;
  }
  /*PasswordMap.sk:10*/
  
void add_String_String (Object self, Object tag, Object passEncryption, ref global Object@Object self0__HashMap_Node_s4269)/*PasswordMap.sk:10*/
  {
    int _out_s3511 = 0;
    HashMap@meta(_out_s3511);
    if((self.passMap_PasswordMap.__cid) == _out_s3511)/*PasswordMap.sk:11*/
    {
      Object@Object _out_s3514 = null;
      put_K_V@HashMap(self.passMap_PasswordMap, tag, passEncryption, _out_s3514, self0__HashMap_Node_s4269);
    }
  }
  /*PasswordMap.sk:18*/
  
void get_String (Object self, Object domainHash, ref Object _out)/*PasswordMap.sk:18*/
  {
    int _out_s3506 = 0;
    HashMap@meta(_out_s3506);
    Object@Object _pac_sc_s3507 = null;
    if((self.passMap_PasswordMap.__cid) == _out_s3506)/*PasswordMap.sk:19*/
    {
      Object@Object _out_s3509 = null;
      get_K@HashMap(self.passMap_PasswordMap, domainHash, _out_s3509);
      _pac_sc_s3507 = _out_s3509;
    }
    else
    {
      _pac_sc_s3507 = null;
    }
    _out = _pac_sc_s3507;
    return;
  }
  /* END PACKAGE PasswordMap*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:4*/
  
void AbstractQueue (ref int _out)/*meta.sk:4*/
  {
    _out = 21;
    return;
  }
  /*meta.sk:5*/
  
void ArrayDeque (ref int _out)/*meta.sk:5*/
  {
    _out = 12;
    return;
  }
  /*meta.sk:6*/
  
void ArrayDeque_DequeNode (ref int _out)/*meta.sk:6*/
  {
    _out = 13;
    return;
  }
  /*meta.sk:7*/
  
void ArrayList (ref int _out)/*meta.sk:7*/
  {
    _out = 22;
    return;
  }
  /*meta.sk:8*/
  
void Assert (ref int _out)/*meta.sk:8*/
  {
    _out = 38;
    return;
  }
  /*meta.sk:9*/
  
void Boolean (ref int _out)/*meta.sk:9*/
  {
    _out = 15;
    return;
  }
  /*meta.sk:10*/
  
void BufferedWriter (ref int _out)/*meta.sk:10*/
  {
    _out = 31;
    return;
  }
  /*meta.sk:12*/
  
void Character (ref int _out)/*meta.sk:12*/
  {
    _out = 16;
    return;
  }
  /*meta.sk:13*/
  
void Cipher (ref int _out)/*meta.sk:13*/
  {
    _out = 18;
    return;
  }
  /*meta.sk:15*/
  
void Cryptographer (ref int _out)/*meta.sk:15*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:17*/
  
void File (ref int _out)/*meta.sk:17*/
  {
    _out = 48;
    return;
  }
  /*meta.sk:18*/
  
void FileReaderr (ref int _out)/*meta.sk:18*/
  {
    _out = 46;
    return;
  }
  /*meta.sk:19*/
  
void FileWriterr (ref int _out)/*meta.sk:19*/
  {
    _out = 41;
    return;
  }
  /*meta.sk:20*/
  
void Float (ref int _out)/*meta.sk:20*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:21*/
  
void HashMap (ref int _out)/*meta.sk:21*/
  {
    _out = 34;
    return;
  }
  /*meta.sk:22*/
  
void HashMap_Node (ref int _out)/*meta.sk:22*/
  {
    _out = 35;
    return;
  }
  /*meta.sk:23*/
  
void HashSet (ref int _out)/*meta.sk:23*/
  {
    _out = 23;
    return;
  }
  /*meta.sk:24*/
  
void Integer (ref int _out)/*meta.sk:24*/
  {
    _out = 28;
    return;
  }
  /*meta.sk:25*/
  
void IvParameterSpec (ref int _out)/*meta.sk:25*/
  {
    _out = 29;
    return;
  }
  /*meta.sk:26*/
  
void KerberosKey (ref int _out)/*meta.sk:26*/
  {
    _out = 26;
    return;
  }
  /*meta.sk:28*/
  
void KeyGenerator (ref int _out)/*meta.sk:28*/
  {
    _out = 44;
    return;
  }
  /*meta.sk:29*/
  
void LinkedList (ref int _out)/*meta.sk:29*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:31*/
  
void Mac (ref int _out)/*meta.sk:31*/
  {
    _out = 25;
    return;
  }
  /*meta.sk:34*/
  
void Number (ref int _out)/*meta.sk:34*/
  {
    _out = 45;
    return;
  }
  /*meta.sk:35*/
  
void Object (ref int _out)/*meta.sk:35*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:36*/
  
void PasswordManager (ref int _out)/*meta.sk:36*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:37*/
  
void PasswordManagerTest (ref int _out)/*meta.sk:37*/
  {
    _out = 5;
    return;
  }
  /*meta.sk:38*/
  
void PasswordMap (ref int _out)/*meta.sk:38*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:40*/
  
void Scanner (ref int _out)/*meta.sk:40*/
  {
    _out = 6;
    return;
  }
  /*meta.sk:42*/
  
void SecretKeySpec (ref int _out)/*meta.sk:42*/
  {
    _out = 43;
    return;
  }
  /*meta.sk:43*/
  
void SecureRandom (ref int _out)/*meta.sk:43*/
  {
    _out = 47;
    return;
  }
  /*meta.sk:45*/
  
void Stack (ref int _out)/*meta.sk:45*/
  {
    _out = 40;
    return;
  }
  /*meta.sk:46*/
  
void String (ref int _out)/*meta.sk:46*/
  {
    _out = 42;
    return;
  }
  /*meta.sk:47*/
  
void StringBuffer (ref int _out)/*meta.sk:47*/
  {
    _out = 17;
    return;
  }
  /*meta.sk:48*/
  
void StringBuilder (ref int _out)/*meta.sk:48*/
  {
    _out = 24;
    return;
  }
  /*meta.sk:49*/
  
void System (ref int _out)/*meta.sk:49*/
  {
    _out = 14;
    return;
  }
  /*meta.sk:50*/
  
void TreeMap (ref int _out)/*meta.sk:50*/
  {
    _out = 19;
    return;
  }
  /*meta.sk:51*/
  
void TreeSet (ref int _out)/*meta.sk:51*/
  {
    _out = 39;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Array_char key_SecretKeySpec;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      Object file_FileReaderr;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      Array_char _value_String;
      int _count_String;
      char value_Character;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      Object GCMSecretKey_Cryptographer;
      Object Hash_secret_key_Cryptographer;
      Object sha256_HMAC_Cryptographer;
      Object myCypherOut_Cryptographer;
      Array_char randomIv_Cryptographer;
      Object ivParameterSpec_Cryptographer;
      int MAX_LENGTH_PASSWORD_Cryptographer;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Object writer_BufferedWriter;
      Object passMap_PasswordMap;
      Object masterHash_PasswordMap;
      Object cryptographer_PasswordManager;
      Object passMap_PasswordManager;
      Object fname_File;
      int size_File;
      Object fname_FileWriterr;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      float value_Float;
      Object mode_KeyGenerator;
      Object file_Scanner;
      bit bool_Boolean;
      int value_Integer;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = self;
    return;
  }
  /*Object.sk:29*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Object.sk:29*/
  {
    _out = self == obj;
    return;
  }
  /*Object.sk:33*/
  
void hashCode (Object self, ref int _out)/*Object.sk:33*/
  {
    _out = 0;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:32*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Integer.sk:32*/
  {
    int _out_s4058 = 0;
    Integer@meta(_out_s4058);
    if((obj.__cid) == _out_s4058)/*Integer.sk:33*/
    {
      int _out_s4060 = 0;
      Integer@meta(_out_s4060);
      int _pac_sc_s4061 = 0;
      if((obj.__cid) == _out_s4060)/*Integer.sk:34*/
      {
        int _out_s4063 = 0;
        intValue@Integer(obj, _out_s4063);
        _pac_sc_s4061 = _out_s4063;
      }
      else
      {
        _pac_sc_s4061 = 0;
      }
      _out = (self.value_Integer) == _pac_sc_s4061;
      return;
    }
    _out = 0;
    return;
  }
  /*Integer.sk:7*/
  
void glblInit_MAX_VALUE__Integer_s4355 (ref int MAX_VALUE__Integer_s4354)/*Integer.sk:7*/
  {
    MAX_VALUE__Integer_s4354 = 2147483647;
  }
  /*Integer.sk:3*/
  
void glblInit_MIN_VALUE__Integer_s4359 (ref int MIN_VALUE__Integer_s4358)/*Integer.sk:3*/
  {
    MIN_VALUE__Integer_s4358 = -2147483648;
  }
  /*Integer.sk:69*/
  
void hashCode (Object self, ref int _out)/*Integer.sk:69*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:20*/
  
void intValue (Object self, ref int _out)/*Integer.sk:20*/
  {
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Array_char val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    _out = self;
    return;
  }
  /*Cipher.sk:32*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Cipher.sk:32*/
  {
    int k_s4091 = 0;
    KerberosKey@meta(k_s4091);
    Array_char@array _pac_sc_s4092 = null;
    if((self.key_Cipher.__cid) == k_s4091)/*Cipher.sk:33*/
    {
      Array_char@array k_s4094 = null;
      getEncoded@KerberosKey(self.key_Cipher, k_s4094);
      _pac_sc_s4092 = k_s4094;
    }
    else
    {
      int k_s4096 = 0;
      SecretKeySpec@meta(k_s4096);
      Array_char@array _pac_sc_s4097 = null;
      if((self.key_Cipher.__cid) == k_s4096)/*Cipher.sk:33*/
      {
        Array_char@array k_s4099 = null;
        getEncoded@SecretKeySpec(self.key_Cipher, k_s4099);
        _pac_sc_s4097 = k_s4099;
      }
      else
      {
        _pac_sc_s4097 = null;
      }
      _pac_sc_s4092 = _pac_sc_s4097;
    }
    _out = new Array_char@array(length=text.length);
    if((_pac_sc_s4092.length) == 0)/*Cipher.sk:35*/
    {
      return;
    }
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:38*/
    {
      bit __sa25 = 0 < (text.length);
      int i = 0;
      while(__sa25)
      {
        _out.A[i] = (text.A[i]) + (_pac_sc_s4092.A[i % (_pac_sc_s4092.length)]);
        i = i + 1;
        __sa25 = i < (text.length);
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:43*/
      {
        bit __sa26 = 0 < (text.length);
        int i_0 = 0;
        while(__sa26)
        {
          _out.A[i_0] = (text.A[i_0]) - (_pac_sc_s4092.A[i_0 % (_pac_sc_s4092.length)]);
          i_0 = i_0 + 1;
          __sa26 = i_0 < (text.length);
        }
      }
    }
    return;
  }
  /*Cipher.sk:18*/
  
void getInstance_String_String (Object type, Object extra, ref Object _out)/*Cipher.sk:18*/
  {
    int _out_s4101 = 0;
    Cipher@meta(_out_s4101);
    Object@Object _out_s4103 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s4101), type, _out_s4103);
    _out = _out_s4103;
    return;
  }
  /*Cipher.sk:27*/
  
void init_int_SecretKey_IvParameterSpec (Object self, int opmode, Object key, Object i)/*Cipher.sk:27*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 7612
