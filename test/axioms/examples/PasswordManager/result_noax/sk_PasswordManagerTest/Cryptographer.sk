package Cryptographer;

Object Cryptographer_Cryptographer(Object self) {
  Object random = SecureRandom_SecureRandom(new Object(__cid=SecureRandom()));
  Array_char randomKey = new Array_char(length=16);
  if (random.__cid == SecureRandom()) { nextBytes_byte@SecureRandom(random, randomKey); }
  else { 0; };
  self.GCMSecretKey_Cryptographer = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), randomKey, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=3+1, A="AES"), 0, 3));
  self.randomIv_Cryptographer = new Array_char(length=16);
  if (random.__cid == SecureRandom()) { nextBytes_byte@SecureRandom(random, self.randomIv_Cryptographer); }
  else { 0; };
  self.ivParameterSpec_Cryptographer = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), self.randomIv_Cryptographer);
  self.myCypherOut_Cryptographer = getInstance_String_String@Cipher(String_String_char_int_int(new Object(__cid=String()), new Array_char(length=17+1, A="AES/GCM/NoPadding"), 0, 17), String_String_char_int_int(new Object(__cid=String()), new Array_char(length=2+1, A="BC"), 0, 2));
  if (self.myCypherOut_Cryptographer.__cid == Cipher()) { init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, ??, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer); }
  else { 0; };
  Object secret = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=6+1, A="secret"), 0, 6);
  self.sha256_HMAC_Cryptographer = getInstance_String@Mac(String_String_char_int_int(new Object(__cid=String()), new Array_char(length=10+1, A="HmacSHA256"), 0, 10));
  self.Hash_secret_key_Cryptographer = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), (secret.__cid == String() ? getBytes@String(secret) : null), String_String_char_int_int(new Object(__cid=String()), new Array_char(length=10+1, A="HmacSHA256"), 0, 10));
  if (self.sha256_HMAC_Cryptographer.__cid == Mac()) { init_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer); }
  else { 0; };
  self.MAX_LENGTH_PASSWORD_Cryptographer = 16;
  return self;
}

Object hash_String(Object self, Object plainTxt) {
  return String_String_byte(new Object(__cid=String()), (self.sha256_HMAC_Cryptographer.__cid == Mac() ? doFinal_byte@Mac(self.sha256_HMAC_Cryptographer, (plainTxt.__cid == String() ? getBytes@String(plainTxt) : null)) : null));
}

generator Array_char genCipherText_String(Object self, Object plainText) {
  Array_char cipherText;
  if (??) if (self.myCypherOut_Cryptographer.__cid == Cipher()) { init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, ??, self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer); }
    else { 0; };
  if (??) cipherText = (self.myCypherOut_Cryptographer.__cid == Cipher() ? doFinal_byte@Cipher(self.myCypherOut_Cryptographer, (plainText.__cid == String() ? getBytes@String(plainText) : null)) : null);
  if (??) cipherText = genCipherText_String@Cryptographer(self, plainText);
  return cipherText;
}

Object encrypt_String(Object self, Object plainText) {
  Array_char cipherText = genCipherText_String@Cryptographer(self, plainText);
  return String_String_byte(new Object(__cid=String()), cipherText);
}

Object decrypt_String(Object self, Object plainText) {
  Array_char cipherText = genCipherText_String@Cryptographer(self, plainText);
  return String_String_byte(new Object(__cid=String()), cipherText);
}

