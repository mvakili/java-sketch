SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/sk_Tester/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 35
[SATBackend] MAX FUNC INLINING  = 2
estimated size of main__Wrapper_Tester
stmt cnt: 3
callee glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5391_HashMap : 1
callee main_Tester : 16

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_Tester
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 2 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/solution0-0 /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1520017625
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/input0.tmp
CREATING glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5391_HashMap
size = 3
after ba size = 3
CREATING main__Wrapper_Tester
size = 6
after ba size = 6
CREATING main__WrapperNospec_Tester
size = 0
after ba size = 0
CREATING main_Tester
size = 235
after ba size = 235
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 70
after ba size = 70
CREATING testOpenSSL_Tester
size = 1440
after ba size = 1440
CREATING testJCECipher_Tester
size = 1049
after ba size = 1049
CREATING OpenSSLCipher_meta
size = 3
after ba size = 3
CREATING String_meta
size = 3
after ba size = 3
CREATING String_String_char_int_int_String
size = 750
after ba size = 750
CREATING OpenSSLCipher_OpenSSLCipher_String_String_OpenSSLCipher
size = 80
after ba size = 80
CREATING SecretKeySpec_meta
size = 3
after ba size = 3
CREATING SecretKeySpec_SecretKeySpec_byte_String_SecretKeySpec
size = 81
after ba size = 81
CREATING encrypt_byte_Key_byte_OpenSSLCipher
size = 162
after ba size = 162
CREATING decrypt_byte_Key_byte_OpenSSLCipher
size = 162
after ba size = 162
CREATING arraysEquals_byte_byte_Arrays
size = 1646
after ba size = 1646
CREATING JCECipher_meta
size = 3
after ba size = 3
CREATING JCECipher_JCECipher_String_String_String_JCECipher
size = 82
after ba size = 82
CREATING encrypt_byte_Key_byte_JCECipher
size = 152
after ba size = 152
CREATING decrypt_byte_Key_byte_JCECipher
size = 152
after ba size = 152
CREATING translate_boolean_byte_Key_byte_OpenSSLCipher
size = 648
after ba size = 648
CREATING translate_boolean_byte_Key_byte_JCECipher
size = 622
after ba size = 622
CREATING getCipher_boolean_Key_byte_OpenSSLCipher
size = 1056
after ba size = 1056
CREATING Cipher_meta
size = 3
after ba size = 3
CREATING update_byte_int_int_byte_int_Cipher
size = 78
after ba size = 78
CREATING doFinal_byte_int_int_byte_int_Cipher
size = 89
after ba size = 89
CREATING doFinal_byte_Cipher
size = 2021
after ba size = 2021
CREATING copyOf_byte_int_Arrays
size = 655
after ba size = 655
CREATING getCipher_boolean_Key_byte_JCECipher
size = 620
after ba size = 620
CREATING Properties_meta
size = 3
after ba size = 3
CREATING Properties_Properties_Properties
size = 160
after ba size = 160
CREATING getClassName_CryptoCipherFactory_CipherProvider
size = 184
after ba size = 184
CREATING setProperty_String_String_Properties
size = 245
after ba size = 245
CREATING getCipherInstance_String_Properties_Utils
size = 147
after ba size = 147
CREATING KerberosKey_meta
size = 3
after ba size = 3
CREATING getEncoded_KerberosKey
size = 79
after ba size = 79
CREATING getEncoded_SecretKeySpec
size = 79
after ba size = 79
CREATING IvParameterSpec_meta
size = 3
after ba size = 3
CREATING IvParameterSpec_IvParameterSpec_byte_IvParameterSpec
size = 73
after ba size = 73
CREATING init_int_SecretKey_AlgorithmParameterSpec_Cipher
size = 81
after ba size = 81
CREATING getInstance_String_String_Cipher
size = 147
after ba size = 147
CREATING HashMap_meta
size = 3
after ba size = 3
CREATING HashMap_HashMap_HashMap
size = 87
after ba size = 87
CREATING put_K_V_HashMap
size = 724
after ba size = 724
CREATING Cipher_Cipher_String_Cipher
size = 82
after ba size = 82
CREATING FileReaderr_meta
size = 3
after ba size = 3
CREATING hashCode_Object
size = 71
after ba size = 71
CREATING KeyGenerator_meta
size = 3
after ba size = 3
CREATING PrintStream_meta
size = 3
after ba size = 3
CREATING ArrayDeque_meta
size = 3
after ba size = 3
CREATING Tester_meta
size = 3
after ba size = 3
CREATING Assert_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_meta
size = 3
after ba size = 3
CREATING Collections_meta
size = 3
after ba size = 3
CREATING Number_meta
size = 3
after ba size = 3
CREATING ArrayDeque_DequeNode_meta
size = 3
after ba size = 3
CREATING StringBuffer_meta
size = 3
after ba size = 3
CREATING Float_meta
size = 3
after ba size = 3
CREATING Utils_meta
size = 3
after ba size = 3
CREATING File_meta
size = 3
after ba size = 3
CREATING FileOutputStream_meta
size = 3
after ba size = 3
CREATING TreeSet_meta
size = 3
after ba size = 3
CREATING Integer_meta
size = 3
after ba size = 3
CREATING hashCode_Integer
size = 77
after ba size = 77
CREATING StringBuilder_meta
size = 3
after ba size = 3
CREATING hashCode_String
size = 3176
after ba size = 3176
CREATING Mac_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING HashMap_Node_meta
size = 3
after ba size = 3
CREATING HashSet_meta
size = 3
after ba size = 3
CREATING TreeMap_meta
size = 3
after ba size = 3
CREATING AbstractQueue_meta
size = 3
after ba size = 3
CREATING FileWriterr_meta
size = 3
after ba size = 3
CREATING CipherFactory_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_CipherProvider_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING System_meta
size = 3
after ba size = 3
CREATING BufferedWriter_meta
size = 3
after ba size = 3
CREATING LinkedList_meta
size = 3
after ba size = 3
CREATING Stack_meta
size = 3
after ba size = 3
CREATING Arrays_meta
size = 3
after ba size = 3
CREATING KeyStore_meta
size = 3
after ba size = 3
CREATING BufferedReader_meta
size = 3
after ba size = 3
CREATING Scanner_meta
size = 3
after ba size = 3
CREATING SecureRandom_meta
size = 3
after ba size = 3
CREATING putVal_int_K_V_HashMap
size = 1218
after ba size = 1218
CREATING charAt_int_String
size = 107
after ba size = 107
CREATING equals_Object_Object
size = 72
after ba size = 72
CREATING equals_Object_Float
size = 93
after ba size = 93
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 100
after ba size = 100
CREATING equals_Object_String
Found Cycle of size 6; Breaking.
size = 1202
after ba size = 1202
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 100
after ba size = 100
CREATING resize_int_HashMap
Found Cycle of size 100; Breaking.
size = 9099
after ba size = 9099
CREATING HashMap_Node_HashMap_Node_HashMap_K_V_int_HashMap_Node
size = 84
after ba size = 84
CREATING intValue_Integer
size = 77
after ba size = 77
CREATING length_String
size = 77
after ba size = 77
CREATING charValue_Character
size = 77
after ba size = 77
* before  EVERYTHING: main__WrapperNospec_Tester::SPEC nodes = 0	 main__Wrapper_Tester::SKETCH nodes = 6
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 2
 Inlining functions in the sketch.
inlined 2 new size =82
inlined 4 new size =2065
inlined 21 new size =4065
Found Cycle of size 90; Breaking.
inlined 4 new size =5884
Found Cycle of size 249; Breaking.
Found Cycle of size 425; Breaking.
Found Cycle of size 419; Breaking.
Found Cycle of size 11; Breaking.
Found Cycle of size 334; Breaking.
Found Cycle of size 26; Breaking.
Found Cycle of size 27; Breaking.
inlined 42 new size =29154
Found Cycle of size 237; Breaking.
Found Cycle of size 270; Breaking.
Found Cycle of size 264; Breaking.
Found Cycle of size 19; Breaking.
Found Cycle of size 110; Breaking.
Found Cycle of size 119; Breaking.
inlined 101 new size =42348
Found Cycle of size 85; Breaking.
Found Cycle of size 44; Breaking.
Found Cycle of size 66; Breaking.
Found Cycle of size 104; Breaking.
Found Cycle of size 122; Breaking.
Found Cycle of size 155; Breaking.
Found Cycle of size 154; Breaking.
Found Cycle of size 166; Breaking.
Found Cycle of size 203; Breaking.
Found Cycle of size 208; Breaking.
Found Cycle of size 206; Breaking.
Found Cycle of size 193; Breaking.
Found Cycle of size 202; Breaking.
Found Cycle of size 189; Breaking.
Found Cycle of size 198; Breaking.
Found Cycle of size 189; Breaking.
Found Cycle of size 176; Breaking.
Found Cycle of size 185; Breaking.
Found Cycle of size 166; Breaking.
Found Cycle of size 168; Breaking.
Found Cycle of size 164; Breaking.
Found Cycle of size 157; Breaking.
Found Cycle of size 146; Breaking.
Found Cycle of size 144; Breaking.
Found Cycle of size 135; Breaking.
Found Cycle of size 133; Breaking.
Found Cycle of size 124; Breaking.
Found Cycle of size 120; Breaking.
Found Cycle of size 113; Breaking.
Found Cycle of size 106; Breaking.
Found Cycle of size 93; Breaking.
Found Cycle of size 102; Breaking.
Found Cycle of size 88; Breaking.
Found Cycle of size 92; Breaking.
Found Cycle of size 100; Breaking.
Found Cycle of size 103; Breaking.
Found Cycle of size 84; Breaking.
Found Cycle of size 109; Breaking.
Found Cycle of size 97; Breaking.
Found Cycle of size 101; Breaking.
Found Cycle of size 81; Breaking.
Found Cycle of size 86; Breaking.
Found Cycle of size 73; Breaking.
Found Cycle of size 77; Breaking.
Found Cycle of size 75; Breaking.
Found Cycle of size 68; Breaking.
Found Cycle of size 57; Breaking.
Found Cycle of size 55; Breaking.
Found Cycle of size 48; Breaking.
Found Cycle of size 46; Breaking.
Found Cycle of size 35; Breaking.
Found Cycle of size 31; Breaking.
inlined 47 new size =36684
Found Cycle of size 165; Breaking.
Found Cycle of size 178; Breaking.
Found Cycle of size 208; Breaking.
Found Cycle of size 204; Breaking.
Found Cycle of size 246; Breaking.
Found Cycle of size 206; Breaking.
Found Cycle of size 253; Breaking.
Found Cycle of size 236; Breaking.
Found Cycle of size 238; Breaking.
Found Cycle of size 264; Breaking.
Found Cycle of size 266; Breaking.
Found Cycle of size 265; Breaking.
Found Cycle of size 285; Breaking.
Found Cycle of size 288; Breaking.
Found Cycle of size 312; Breaking.
Found Cycle of size 306; Breaking.
Found Cycle of size 297; Breaking.
Found Cycle of size 295; Breaking.
Found Cycle of size 287; Breaking.
Found Cycle of size 267; Breaking.
Found Cycle of size 263; Breaking.
Found Cycle of size 261; Breaking.
Found Cycle of size 270; Breaking.
Found Cycle of size 268; Breaking.
Found Cycle of size 260; Breaking.
Found Cycle of size 259; Breaking.
Found Cycle of size 263; Breaking.
Found Cycle of size 259; Breaking.
Found Cycle of size 259; Breaking.
Found Cycle of size 240; Breaking.
Found Cycle of size 259; Breaking.
Found Cycle of size 246; Breaking.
Found Cycle of size 254; Breaking.
Found Cycle of size 235; Breaking.
Found Cycle of size 249; Breaking.
Found Cycle of size 216; Breaking.
Found Cycle of size 211; Breaking.
Found Cycle of size 231; Breaking.
Found Cycle of size 249; Breaking.
Found Cycle of size 222; Breaking.
Found Cycle of size 238; Breaking.
Found Cycle of size 214; Breaking.
Found Cycle of size 233; Breaking.
Found Cycle of size 211; Breaking.
Found Cycle of size 205; Breaking.
Found Cycle of size 199; Breaking.
Found Cycle of size 195; Breaking.
Found Cycle of size 190; Breaking.
Found Cycle of size 215; Breaking.
Found Cycle of size 177; Breaking.
Found Cycle of size 188; Breaking.
Found Cycle of size 167; Breaking.
Found Cycle of size 204; Breaking.
inlined 111 new size =44120
inlined 143 new size =59384
inlined 59 new size =37751
inlined 0 new size =37751
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 37702
* Final Problem size: Problem nodes = 37702
  # OF CONTROLS:    28
 control_ints = 4 	 control_bits = 24
inputSize = 0	ctrlSize = 60
Random seeds = 1
!+ 001010011100000100000100000000011110101001000110001000100101
!+ H__23_392:0
H__14_392_391:0
H__14_392:1
H__22_392:0
H__21_392:1
H__18_392:0
H__12:14
H__22_392_391:1
H__21_392_391:0
H__18_392_391:0
H__13:8
H__6_344:0
H__2_344:0
H__0:188
H__9_344:1
H__11_344:0
H__6_344_343:0
H__2_344_343:1
H__10_344:0
H__9_344_343:0
H__10_344_343:0
H__1:35
H__15_392:1
H__15_392_391:0
H__23_392_391_392_391:0
H__3_344:1
H__3_344_343:0
H__11_344_343_344_343:1

BEG CHECK
 * After optims it became = 2 was 37702
Assert at Tester.sk:26 (0)
Simulation found a cex by random testing:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 0.049
!% 
!% 
BEG FIND
Level 1  intsize = 2
 * After optims it became = 37702 was 37702
 * After all optims it became = 37702
 finder  hits = 42163	 bstoreObjs=38892	 sstorePages=38
hitcount 	0	16861	4
hitcount 	1	19013	6
hitcount 	2	772	5
hitcount 	3	1749	4
hitcount 	4	2	2
hitcount 	5	18	4
hitcount 	6	17	6
hitcount 	7	41	3
hitcount 	9	16	5
hitcount 	11	27	2
hitcount 	13	33	5
hitcount 	14	2	2
hitcount 	15	9	2
hitcount 	17	8	1
hitcount 	19	8	1
hitcount 	21	8	1
hitcount 	23	13	2
hitcount 	25	12	2
hitcount 	27	28	4
hitcount 	29	8	1
hitcount 	30	25	0
hitcount 	31	36	4
hitcount 	32	4	3
hitcount 	33	12	3
hitcount 	34	6	7
hitcount 	35	8	1
hitcount 	37	8	1
hitcount 	39	8	0
hitcount 	41	9	0
hitcount 	43	8	0
hitcount 	45	8	1
hitcount 	47	8	1
hitcount 	49	8	1
hitcount 	51	8	1
hitcount 	53	8	1
hitcount 	55	8	1
hitcount 	57	8	1
hitcount 	59	8	0
hitcount 	61	25	0
hitcount 	63	1	1
hitcount 	69	1	1
hitcount 	95	4	5
hitcount 	97	8	7
hitcount 	123	20	1
bucketsPerDepth 	6	14
bucketsPerDepth 	7	45
bucketsPerDepth 	8	106
bucketsPerDepth 	9	154
bucketsPerDepth 	10	162
bucketsPerDepth 	11	179
bucketsPerDepth 	12	163
bucketsPerDepth 	13	94
bucketsPerDepth 	14	50
bucketsPerDepth 	15	28
bucketsPerDepth 	16	16
bucketsPerDepth 	17	7
bucketsPerDepth 	18	5
bucketsPerDepth 	20	1
* TIME TO ADD INPUT :  1999.6 ms 
DECISIONS START = 0
f# %assign: 11 clauses: 110475 learn: 1 restart: 1 decision: 632 propagated: 60394
END FIND
!+ 111010010000000010100000000010000000001000000100000000000000
!+ H__23_392:1
H__14_392_391:1
H__14_392:1
H__22_392:0
H__21_392:1
H__18_392:0
H__12:2
H__22_392_391:0
H__21_392_391:1
H__18_392_391:0
H__13:1
H__6_344:0
H__2_344:1
H__0:0
H__9_344:1
H__11_344:0
H__6_344_343:0
H__2_344_343:0
H__10_344:0
H__9_344_343:0
H__10_344_343:0
H__1:1
H__15_392:0
H__15_392_391:0
H__23_392_391_392_391:0
H__3_344:0
H__3_344_343:0
H__11_344_343_344_343:0

BEG CHECK
 * After optims it became = 0 was 37702
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  1	ftime= 1999.62	ctime= 0.057
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 1999.62 CHECK TIME 0.106 TOTAL TIME 1999.72
VALUES H__0: 0, H__1: 1, H__10_344: 0, H__10_344_343: 0, H__11_344: 0, H__11_344_343_344_343: 0, H__12: 2, H__13: 1, H__14_392: 1, H__14_392_391: 1, H__15_392: 0, H__15_392_391: 0, H__18_392: 0, H__18_392_391: 0, H__21_392: 1, H__21_392_391: 1, H__22_392: 0, H__22_392_391: 0, H__23_392: 1, H__23_392_391_392_391: 0, H__2_344: 1, H__2_344_343: 0, H__3_344: 0, H__3_344_343: 0, H__6_344: 0, H__6_344_343: 0, H__9_344: 1, H__9_344_343: 0, 
RESULT = 2  
**ROUND 0 : 0 Round time:  2000.26 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  3000.03
Model building time (ms): 999.71
Solution time (ms):       2000.26
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 3.208
      model building time (s) ---------> 0.999
      solution time (s) ---------------> 2.0
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE PrivateKey*/
package PrivateKey{
  /* END PACKAGE PrivateKey*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:7*/
  
void HashMap_HashMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5286)/*HashMap.sk:7*/
  {
    self.elementData_HashMap = new Array_Object@array(length=DEFAULT_INITIAL_CAPACITY__HashMap_s5286);
    self.numPairs_HashMap = 0;
    self.capacity_HashMap = DEFAULT_INITIAL_CAPACITY__HashMap_s5286;
    _out = self;
    return;
  }
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5391 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s5390)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s5390 = 16;
  }
  /*HashMap.sk:115*/
  
void putVal_int_K_V (Object self, int hash, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5351)/*HashMap.sk:115*/
  {
    int hashMod = hash % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:117*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:121*/
    {
      bit _pac_sc_s334 = (node.hash_HashMap_Node) != hash;
      if(!(_pac_sc_s334))/*HashMap.sk:122*/
      {
        int _pac_sc_s334_s336 = 0;
        FileReaderr@meta(_pac_sc_s334_s336);
        bit _pac_sc_s337 = 0;
        if((key.__cid) == _pac_sc_s334_s336)/*HashMap.sk:122*/
        {
          bit _pac_sc_s334_s339 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s339);
          _pac_sc_s337 = _pac_sc_s334_s339;
        }
        else
        {
          int _pac_sc_s334_s341 = 0;
          KeyGenerator@meta(_pac_sc_s334_s341);
          bit _pac_sc_s342 = 0;
          if((key.__cid) == _pac_sc_s334_s341)/*HashMap.sk:122*/
          {
            bit _pac_sc_s334_s344 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s344);
            _pac_sc_s342 = _pac_sc_s334_s344;
          }
          else
          {
            int _pac_sc_s334_s346 = 0;
            PrintStream@meta(_pac_sc_s334_s346);
            bit _pac_sc_s347 = 0;
            if((key.__cid) == _pac_sc_s334_s346)/*HashMap.sk:122*/
            {
              bit _pac_sc_s334_s349 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s349);
              _pac_sc_s347 = _pac_sc_s334_s349;
            }
            else
            {
              int _pac_sc_s334_s351 = 0;
              ArrayDeque@meta(_pac_sc_s334_s351);
              bit _pac_sc_s352 = 0;
              if((key.__cid) == _pac_sc_s334_s351)/*HashMap.sk:122*/
              {
                bit _pac_sc_s334_s354 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s354);
                _pac_sc_s352 = _pac_sc_s334_s354;
              }
              else
              {
                int _pac_sc_s334_s356 = 0;
                Tester@meta(_pac_sc_s334_s356);
                bit _pac_sc_s357 = 0;
                if((key.__cid) == _pac_sc_s334_s356)/*HashMap.sk:122*/
                {
                  bit _pac_sc_s334_s359 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s359);
                  _pac_sc_s357 = _pac_sc_s334_s359;
                }
                else
                {
                  int _pac_sc_s334_s361 = 0;
                  Assert@meta(_pac_sc_s334_s361);
                  bit _pac_sc_s362 = 0;
                  if((key.__cid) == _pac_sc_s334_s361)/*HashMap.sk:122*/
                  {
                    bit _pac_sc_s334_s364 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s364);
                    _pac_sc_s362 = _pac_sc_s334_s364;
                  }
                  else
                  {
                    int _pac_sc_s334_s366 = 0;
                    CryptoCipherFactory@meta(_pac_sc_s334_s366);
                    bit _pac_sc_s367 = 0;
                    if((key.__cid) == _pac_sc_s334_s366)/*HashMap.sk:122*/
                    {
                      bit _pac_sc_s334_s369 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s369);
                      _pac_sc_s367 = _pac_sc_s334_s369;
                    }
                    else
                    {
                      int _pac_sc_s334_s371 = 0;
                      Collections@meta(_pac_sc_s334_s371);
                      bit _pac_sc_s372 = 0;
                      if((key.__cid) == _pac_sc_s334_s371)/*HashMap.sk:122*/
                      {
                        bit _pac_sc_s334_s374 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s374);
                        _pac_sc_s372 = _pac_sc_s334_s374;
                      }
                      else
                      {
                        int _pac_sc_s334_s376 = 0;
                        KerberosKey@meta(_pac_sc_s334_s376);
                        bit _pac_sc_s377 = 0;
                        if((key.__cid) == _pac_sc_s334_s376)/*HashMap.sk:122*/
                        {
                          bit _pac_sc_s334_s379 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s379);
                          _pac_sc_s377 = _pac_sc_s334_s379;
                        }
                        else
                        {
                          int _pac_sc_s334_s381 = 0;
                          Number@meta(_pac_sc_s334_s381);
                          bit _pac_sc_s382 = 0;
                          if((key.__cid) == _pac_sc_s334_s381)/*HashMap.sk:122*/
                          {
                            bit _pac_sc_s334_s384 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s384);
                            _pac_sc_s382 = _pac_sc_s334_s384;
                          }
                          else
                          {
                            int _pac_sc_s334_s386 = 0;
                            ArrayDeque_DequeNode@meta(_pac_sc_s334_s386);
                            bit _pac_sc_s387 = 0;
                            if((key.__cid) == _pac_sc_s334_s386)/*HashMap.sk:122*/
                            {
                              bit _pac_sc_s334_s389 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s389);
                              _pac_sc_s387 = _pac_sc_s334_s389;
                            }
                            else
                            {
                              int _pac_sc_s334_s391 = 0;
                              StringBuffer@meta(_pac_sc_s334_s391);
                              bit _pac_sc_s392 = 0;
                              if((key.__cid) == _pac_sc_s334_s391)/*HashMap.sk:122*/
                              {
                                bit _pac_sc_s334_s394 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s394);
                                _pac_sc_s392 = _pac_sc_s334_s394;
                              }
                              else
                              {
                                int _pac_sc_s334_s396 = 0;
                                Float@meta(_pac_sc_s334_s396);
                                bit _pac_sc_s397 = 0;
                                if((key.__cid) == _pac_sc_s334_s396)/*HashMap.sk:122*/
                                {
                                  bit _pac_sc_s334_s399 = 0;
                                  equals_Object@Float(key, node.key_HashMap_Node, _pac_sc_s334_s399);
                                  _pac_sc_s397 = _pac_sc_s334_s399;
                                }
                                else
                                {
                                  int _pac_sc_s334_s401 = 0;
                                  Utils@meta(_pac_sc_s334_s401);
                                  bit _pac_sc_s402 = 0;
                                  if((key.__cid) == _pac_sc_s334_s401)/*HashMap.sk:122*/
                                  {
                                    bit _pac_sc_s334_s404 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s404);
                                    _pac_sc_s402 = _pac_sc_s334_s404;
                                  }
                                  else
                                  {
                                    int _pac_sc_s334_s406 = 0;
                                    File@meta(_pac_sc_s334_s406);
                                    bit _pac_sc_s407 = 0;
                                    if((key.__cid) == _pac_sc_s334_s406)/*HashMap.sk:122*/
                                    {
                                      bit _pac_sc_s334_s409 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s409);
                                      _pac_sc_s407 = _pac_sc_s334_s409;
                                    }
                                    else
                                    {
                                      int _pac_sc_s334_s411 = 0;
                                      FileOutputStream@meta(_pac_sc_s334_s411);
                                      bit _pac_sc_s412 = 0;
                                      if((key.__cid) == _pac_sc_s334_s411)/*HashMap.sk:122*/
                                      {
                                        bit _pac_sc_s334_s414 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s414);
                                        _pac_sc_s412 = _pac_sc_s334_s414;
                                      }
                                      else
                                      {
                                        int _pac_sc_s334_s416 = 0;
                                        TreeSet@meta(_pac_sc_s334_s416);
                                        bit _pac_sc_s417 = 0;
                                        if((key.__cid) == _pac_sc_s334_s416)/*HashMap.sk:122*/
                                        {
                                          bit _pac_sc_s334_s419 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s419);
                                          _pac_sc_s417 = _pac_sc_s334_s419;
                                        }
                                        else
                                        {
                                          int _pac_sc_s334_s421 = 0;
                                          Integer@meta(_pac_sc_s334_s421);
                                          bit _pac_sc_s422 = 0;
                                          if((key.__cid) == _pac_sc_s334_s421)/*HashMap.sk:122*/
                                          {
                                            bit _pac_sc_s334_s424 = 0;
                                            equals_Object@Integer(key, node.key_HashMap_Node, _pac_sc_s334_s424);
                                            _pac_sc_s422 = _pac_sc_s334_s424;
                                          }
                                          else
                                          {
                                            int _pac_sc_s334_s426 = 0;
                                            StringBuilder@meta(_pac_sc_s334_s426);
                                            bit _pac_sc_s427 = 0;
                                            if((key.__cid) == _pac_sc_s334_s426)/*HashMap.sk:122*/
                                            {
                                              bit _pac_sc_s334_s429 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s429);
                                              _pac_sc_s427 = _pac_sc_s334_s429;
                                            }
                                            else
                                            {
                                              int _pac_sc_s334_s431 = 0;
                                              String@meta(_pac_sc_s334_s431);
                                              bit _pac_sc_s432 = 0;
                                              if((key.__cid) == _pac_sc_s334_s431)/*HashMap.sk:122*/
                                              {
                                                bit _pac_sc_s334_s434 = 0;
                                                equals_Object@String(key, node.key_HashMap_Node, _pac_sc_s334_s434);
                                                _pac_sc_s432 = _pac_sc_s334_s434;
                                              }
                                              else
                                              {
                                                int _pac_sc_s334_s436 = 0;
                                                Mac@meta(_pac_sc_s334_s436);
                                                bit _pac_sc_s437 = 0;
                                                if((key.__cid) == _pac_sc_s334_s436)/*HashMap.sk:122*/
                                                {
                                                  bit _pac_sc_s334_s439 = 0;
                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s439);
                                                  _pac_sc_s437 = _pac_sc_s334_s439;
                                                }
                                                else
                                                {
                                                  int _pac_sc_s334_s441 = 0;
                                                  ArrayList@meta(_pac_sc_s334_s441);
                                                  bit _pac_sc_s442 = 0;
                                                  if((key.__cid) == _pac_sc_s334_s441)/*HashMap.sk:122*/
                                                  {
                                                    bit _pac_sc_s334_s444 = 0;
                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s444);
                                                    _pac_sc_s442 = _pac_sc_s334_s444;
                                                  }
                                                  else
                                                  {
                                                    int _pac_sc_s334_s446 = 0;
                                                    HashMap_Node@meta(_pac_sc_s334_s446);
                                                    bit _pac_sc_s447 = 0;
                                                    if((key.__cid) == _pac_sc_s334_s446)/*HashMap.sk:122*/
                                                    {
                                                      bit _pac_sc_s334_s449 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s449);
                                                      _pac_sc_s447 = _pac_sc_s334_s449;
                                                    }
                                                    else
                                                    {
                                                      int _pac_sc_s334_s451 = 0;
                                                      HashSet@meta(_pac_sc_s334_s451);
                                                      bit _pac_sc_s452 = 0;
                                                      if((key.__cid) == _pac_sc_s334_s451)/*HashMap.sk:122*/
                                                      {
                                                        bit _pac_sc_s334_s454 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s454);
                                                        _pac_sc_s452 = _pac_sc_s334_s454;
                                                      }
                                                      else
                                                      {
                                                        int _pac_sc_s334_s456 = 0;
                                                        TreeMap@meta(_pac_sc_s334_s456);
                                                        bit _pac_sc_s457 = 0;
                                                        if((key.__cid) == _pac_sc_s334_s456)/*HashMap.sk:122*/
                                                        {
                                                          bit _pac_sc_s334_s459 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s459);
                                                          _pac_sc_s457 = _pac_sc_s334_s459;
                                                        }
                                                        else
                                                        {
                                                          int _pac_sc_s334_s461 = 0;
                                                          AbstractQueue@meta(_pac_sc_s334_s461);
                                                          bit _pac_sc_s462 = 0;
                                                          if((key.__cid) == _pac_sc_s334_s461)/*HashMap.sk:122*/
                                                          {
                                                            bit _pac_sc_s334_s464 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s464);
                                                            _pac_sc_s462 = _pac_sc_s334_s464;
                                                          }
                                                          else
                                                          {
                                                            int _pac_sc_s334_s466 = 0;
                                                            Properties@meta(_pac_sc_s334_s466);
                                                            bit _pac_sc_s467 = 0;
                                                            if((key.__cid) == _pac_sc_s334_s466)/*HashMap.sk:122*/
                                                            {
                                                              bit _pac_sc_s334_s469 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s469);
                                                              _pac_sc_s467 = _pac_sc_s334_s469;
                                                            }
                                                            else
                                                            {
                                                              int _pac_sc_s334_s471 = 0;
                                                              FileWriterr@meta(_pac_sc_s334_s471);
                                                              bit _pac_sc_s472 = 0;
                                                              if((key.__cid) == _pac_sc_s334_s471)/*HashMap.sk:122*/
                                                              {
                                                                bit _pac_sc_s334_s474 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s474);
                                                                _pac_sc_s472 = _pac_sc_s334_s474;
                                                              }
                                                              else
                                                              {
                                                                int _pac_sc_s334_s476 = 0;
                                                                CipherFactory@meta(_pac_sc_s334_s476);
                                                                bit _pac_sc_s477 = 0;
                                                                if((key.__cid) == _pac_sc_s334_s476)/*HashMap.sk:122*/
                                                                {
                                                                  bit _pac_sc_s334_s479 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s479);
                                                                  _pac_sc_s477 = _pac_sc_s334_s479;
                                                                }
                                                                else
                                                                {
                                                                  int _pac_sc_s334_s481 = 0;
                                                                  SecretKeySpec@meta(_pac_sc_s334_s481);
                                                                  bit _pac_sc_s482 = 0;
                                                                  if((key.__cid) == _pac_sc_s334_s481)/*HashMap.sk:122*/
                                                                  {
                                                                    bit _pac_sc_s334_s484 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s484);
                                                                    _pac_sc_s482 = _pac_sc_s334_s484;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _pac_sc_s334_s486 = 0;
                                                                    CryptoCipherFactory_CipherProvider@meta(_pac_sc_s334_s486);
                                                                    bit _pac_sc_s487 = 0;
                                                                    if((key.__cid) == _pac_sc_s334_s486)/*HashMap.sk:122*/
                                                                    {
                                                                      bit _pac_sc_s334_s489 = 0;
                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s489);
                                                                      _pac_sc_s487 = _pac_sc_s334_s489;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _pac_sc_s334_s491 = 0;
                                                                      Character@meta(_pac_sc_s334_s491);
                                                                      bit _pac_sc_s492 = 0;
                                                                      if((key.__cid) == _pac_sc_s334_s491)/*HashMap.sk:122*/
                                                                      {
                                                                        bit _pac_sc_s334_s494 = 0;
                                                                        equals_Object@Character(key, node.key_HashMap_Node, _pac_sc_s334_s494);
                                                                        _pac_sc_s492 = _pac_sc_s334_s494;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _pac_sc_s334_s496 = 0;
                                                                        Cipher@meta(_pac_sc_s334_s496);
                                                                        bit _pac_sc_s497 = 0;
                                                                        if((key.__cid) == _pac_sc_s334_s496)/*HashMap.sk:122*/
                                                                        {
                                                                          bit _pac_sc_s334_s499 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s499);
                                                                          _pac_sc_s497 = _pac_sc_s334_s499;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _pac_sc_s334_s501 = 0;
                                                                          OpenSSLCipher@meta(_pac_sc_s334_s501);
                                                                          bit _pac_sc_s502 = 0;
                                                                          if((key.__cid) == _pac_sc_s334_s501)/*HashMap.sk:122*/
                                                                          {
                                                                            bit _pac_sc_s334_s504 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s504);
                                                                            _pac_sc_s502 = _pac_sc_s334_s504;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _pac_sc_s334_s506 = 0;
                                                                            Boolean@meta(_pac_sc_s334_s506);
                                                                            bit _pac_sc_s507 = 0;
                                                                            if((key.__cid) == _pac_sc_s334_s506)/*HashMap.sk:122*/
                                                                            {
                                                                              bit _pac_sc_s334_s509 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s509);
                                                                              _pac_sc_s507 = _pac_sc_s334_s509;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _pac_sc_s334_s511 = 0;
                                                                              JCECipher@meta(_pac_sc_s334_s511);
                                                                              bit _pac_sc_s512 = 0;
                                                                              if((key.__cid) == _pac_sc_s334_s511)/*HashMap.sk:122*/
                                                                              {
                                                                                bit _pac_sc_s334_s514 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s514);
                                                                                _pac_sc_s512 = _pac_sc_s334_s514;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _pac_sc_s334_s516 = 0;
                                                                                System@meta(_pac_sc_s334_s516);
                                                                                bit _pac_sc_s517 = 0;
                                                                                if((key.__cid) == _pac_sc_s334_s516)/*HashMap.sk:122*/
                                                                                {
                                                                                  bit _pac_sc_s334_s519 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s519);
                                                                                  _pac_sc_s517 = _pac_sc_s334_s519;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _pac_sc_s334_s521 = 0;
                                                                                  IvParameterSpec@meta(_pac_sc_s334_s521);
                                                                                  bit _pac_sc_s522 = 0;
                                                                                  if((key.__cid) == _pac_sc_s334_s521)/*HashMap.sk:122*/
                                                                                  {
                                                                                    bit _pac_sc_s334_s524 = 0;
                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s524);
                                                                                    _pac_sc_s522 = _pac_sc_s334_s524;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int _pac_sc_s334_s526 = 0;
                                                                                    BufferedWriter@meta(_pac_sc_s334_s526);
                                                                                    bit _pac_sc_s527 = 0;
                                                                                    if((key.__cid) == _pac_sc_s334_s526)/*HashMap.sk:122*/
                                                                                    {
                                                                                      bit _pac_sc_s334_s529 = 0;
                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s529);
                                                                                      _pac_sc_s527 = _pac_sc_s334_s529;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int _pac_sc_s334_s531 = 0;
                                                                                      LinkedList@meta(_pac_sc_s334_s531);
                                                                                      bit _pac_sc_s532 = 0;
                                                                                      if((key.__cid) == _pac_sc_s334_s531)/*HashMap.sk:122*/
                                                                                      {
                                                                                        bit _pac_sc_s334_s534 = 0;
                                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s534);
                                                                                        _pac_sc_s532 = _pac_sc_s334_s534;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int _pac_sc_s334_s536 = 0;
                                                                                        Stack@meta(_pac_sc_s334_s536);
                                                                                        bit _pac_sc_s537 = 0;
                                                                                        if((key.__cid) == _pac_sc_s334_s536)/*HashMap.sk:122*/
                                                                                        {
                                                                                          bit _pac_sc_s334_s539 = 0;
                                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s539);
                                                                                          _pac_sc_s537 = _pac_sc_s334_s539;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int _pac_sc_s334_s541 = 0;
                                                                                          Arrays@meta(_pac_sc_s334_s541);
                                                                                          bit _pac_sc_s542 = 0;
                                                                                          if((key.__cid) == _pac_sc_s334_s541)/*HashMap.sk:122*/
                                                                                          {
                                                                                            bit _pac_sc_s334_s544 = 0;
                                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s544);
                                                                                            _pac_sc_s542 = _pac_sc_s334_s544;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int _pac_sc_s334_s546 = 0;
                                                                                            KeyStore@meta(_pac_sc_s334_s546);
                                                                                            bit _pac_sc_s547 = 0;
                                                                                            if((key.__cid) == _pac_sc_s334_s546)/*HashMap.sk:122*/
                                                                                            {
                                                                                              bit _pac_sc_s334_s549 = 0;
                                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s549);
                                                                                              _pac_sc_s547 = _pac_sc_s334_s549;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int _pac_sc_s334_s551 = 0;
                                                                                              BufferedReader@meta(_pac_sc_s334_s551);
                                                                                              bit _pac_sc_s552 = 0;
                                                                                              if((key.__cid) == _pac_sc_s334_s551)/*HashMap.sk:122*/
                                                                                              {
                                                                                                bit _pac_sc_s334_s554 = 0;
                                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s554);
                                                                                                _pac_sc_s552 = _pac_sc_s334_s554;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int _pac_sc_s334_s556 = 0;
                                                                                                Scanner@meta(_pac_sc_s334_s556);
                                                                                                bit _pac_sc_s557 = 0;
                                                                                                if((key.__cid) == _pac_sc_s334_s556)/*HashMap.sk:122*/
                                                                                                {
                                                                                                  bit _pac_sc_s334_s559 = 0;
                                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s559);
                                                                                                  _pac_sc_s557 = _pac_sc_s334_s559;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  int _pac_sc_s334_s561 = 0;
                                                                                                  SecureRandom@meta(_pac_sc_s334_s561);
                                                                                                  bit _pac_sc_s562 = 0;
                                                                                                  if((key.__cid) == _pac_sc_s334_s561)/*HashMap.sk:122*/
                                                                                                  {
                                                                                                    bit _pac_sc_s334_s564 = 0;
                                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s564);
                                                                                                    _pac_sc_s562 = _pac_sc_s334_s564;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    int _pac_sc_s334_s566 = 0;
                                                                                                    Object@meta(_pac_sc_s334_s566);
                                                                                                    bit _pac_sc_s567 = 0;
                                                                                                    if((key.__cid) == _pac_sc_s334_s566)/*HashMap.sk:122*/
                                                                                                    {
                                                                                                      bit _pac_sc_s334_s569 = 0;
                                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s334_s569);
                                                                                                      _pac_sc_s567 = _pac_sc_s334_s569;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      _pac_sc_s567 = 0;
                                                                                                    }
                                                                                                    _pac_sc_s562 = _pac_sc_s567;
                                                                                                  }
                                                                                                  _pac_sc_s557 = _pac_sc_s562;
                                                                                                }
                                                                                                _pac_sc_s552 = _pac_sc_s557;
                                                                                              }
                                                                                              _pac_sc_s547 = _pac_sc_s552;
                                                                                            }
                                                                                            _pac_sc_s542 = _pac_sc_s547;
                                                                                          }
                                                                                          _pac_sc_s537 = _pac_sc_s542;
                                                                                        }
                                                                                        _pac_sc_s532 = _pac_sc_s537;
                                                                                      }
                                                                                      _pac_sc_s527 = _pac_sc_s532;
                                                                                    }
                                                                                    _pac_sc_s522 = _pac_sc_s527;
                                                                                  }
                                                                                  _pac_sc_s517 = _pac_sc_s522;
                                                                                }
                                                                                _pac_sc_s512 = _pac_sc_s517;
                                                                              }
                                                                              _pac_sc_s507 = _pac_sc_s512;
                                                                            }
                                                                            _pac_sc_s502 = _pac_sc_s507;
                                                                          }
                                                                          _pac_sc_s497 = _pac_sc_s502;
                                                                        }
                                                                        _pac_sc_s492 = _pac_sc_s497;
                                                                      }
                                                                      _pac_sc_s487 = _pac_sc_s492;
                                                                    }
                                                                    _pac_sc_s482 = _pac_sc_s487;
                                                                  }
                                                                  _pac_sc_s477 = _pac_sc_s482;
                                                                }
                                                                _pac_sc_s472 = _pac_sc_s477;
                                                              }
                                                              _pac_sc_s467 = _pac_sc_s472;
                                                            }
                                                            _pac_sc_s462 = _pac_sc_s467;
                                                          }
                                                          _pac_sc_s457 = _pac_sc_s462;
                                                        }
                                                        _pac_sc_s452 = _pac_sc_s457;
                                                      }
                                                      _pac_sc_s447 = _pac_sc_s452;
                                                    }
                                                    _pac_sc_s442 = _pac_sc_s447;
                                                  }
                                                  _pac_sc_s437 = _pac_sc_s442;
                                                }
                                                _pac_sc_s432 = _pac_sc_s437;
                                              }
                                              _pac_sc_s427 = _pac_sc_s432;
                                            }
                                            _pac_sc_s422 = _pac_sc_s427;
                                          }
                                          _pac_sc_s417 = _pac_sc_s422;
                                        }
                                        _pac_sc_s412 = _pac_sc_s417;
                                      }
                                      _pac_sc_s407 = _pac_sc_s412;
                                    }
                                    _pac_sc_s402 = _pac_sc_s407;
                                  }
                                  _pac_sc_s397 = _pac_sc_s402;
                                }
                                _pac_sc_s392 = _pac_sc_s397;
                              }
                              _pac_sc_s387 = _pac_sc_s392;
                            }
                            _pac_sc_s382 = _pac_sc_s387;
                          }
                          _pac_sc_s377 = _pac_sc_s382;
                        }
                        _pac_sc_s372 = _pac_sc_s377;
                      }
                      _pac_sc_s367 = _pac_sc_s372;
                    }
                    _pac_sc_s362 = _pac_sc_s367;
                  }
                  _pac_sc_s357 = _pac_sc_s362;
                }
                _pac_sc_s352 = _pac_sc_s357;
              }
              _pac_sc_s347 = _pac_sc_s352;
            }
            _pac_sc_s342 = _pac_sc_s347;
          }
          _pac_sc_s337 = _pac_sc_s342;
        }
        _pac_sc_s334 = !(_pac_sc_s337);
      }
      if(_pac_sc_s334)/*HashMap.sk:122*/
      {
        resize_int@HashMap(self, hash + 1, self0__HashMap_Node_s5351);
        hashMod = hash % (self.capacity_HashMap);
        if(hashMod < 0)/*HashMap.sk:125*/
        {
          hashMod = hashMod + (self.capacity_HashMap);
        }
        node = self.elementData_HashMap.A[hashMod];
        self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
      }
      int _out_s571 = 0;
      HashMap_Node@meta(_out_s571);
      Object@Object _out_s573 = null;
      HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s571), self, key, value, hash, _out_s573, self0__HashMap_Node_s5351)//{};
      self.elementData_HashMap.A[hashMod] = _out_s573;
      if(node != (null))/*HashMap.sk:132*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
      else
      {
        _out = null;
        return;
      }
    }
    int _out_s575 = 0;
    HashMap_Node@meta(_out_s575);
    Object@Object _out_s577 = null;
    HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s575), self, key, value, hash, _out_s577, self0__HashMap_Node_s5351)//{};
    self.elementData_HashMap.A[hashMod] = _out_s577;
    self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
    _out = null;
    return;
  }
  /*HashMap.sk:95*/
  
void put_K_V (Object self, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5360)/*HashMap.sk:95*/
  {
    int h_s98 = 0;
    FileReaderr@meta(h_s98);
    int _pac_sc_s99 = 0;
    if((key.__cid) == h_s98)/*HashMap.sk:96*/
    {
      int h_s101 = 0;
      hashCode@Object(key, h_s101);
      _pac_sc_s99 = h_s101;
    }
    else
    {
      int h_s103 = 0;
      KeyGenerator@meta(h_s103);
      int _pac_sc_s104 = 0;
      if((key.__cid) == h_s103)/*HashMap.sk:96*/
      {
        int h_s106 = 0;
        hashCode@Object(key, h_s106);
        _pac_sc_s104 = h_s106;
      }
      else
      {
        int h_s108 = 0;
        PrintStream@meta(h_s108);
        int _pac_sc_s109 = 0;
        if((key.__cid) == h_s108)/*HashMap.sk:96*/
        {
          int h_s111 = 0;
          hashCode@Object(key, h_s111);
          _pac_sc_s109 = h_s111;
        }
        else
        {
          int h_s113 = 0;
          ArrayDeque@meta(h_s113);
          int _pac_sc_s114 = 0;
          if((key.__cid) == h_s113)/*HashMap.sk:96*/
          {
            int h_s116 = 0;
            hashCode@Object(key, h_s116);
            _pac_sc_s114 = h_s116;
          }
          else
          {
            int h_s118 = 0;
            Tester@meta(h_s118);
            int _pac_sc_s119 = 0;
            if((key.__cid) == h_s118)/*HashMap.sk:96*/
            {
              int h_s121 = 0;
              hashCode@Object(key, h_s121);
              _pac_sc_s119 = h_s121;
            }
            else
            {
              int h_s123 = 0;
              Assert@meta(h_s123);
              int _pac_sc_s124 = 0;
              if((key.__cid) == h_s123)/*HashMap.sk:96*/
              {
                int h_s126 = 0;
                hashCode@Object(key, h_s126);
                _pac_sc_s124 = h_s126;
              }
              else
              {
                int h_s128 = 0;
                CryptoCipherFactory@meta(h_s128);
                int _pac_sc_s129 = 0;
                if((key.__cid) == h_s128)/*HashMap.sk:96*/
                {
                  int h_s131 = 0;
                  hashCode@Object(key, h_s131);
                  _pac_sc_s129 = h_s131;
                }
                else
                {
                  int h_s133 = 0;
                  Collections@meta(h_s133);
                  int _pac_sc_s134 = 0;
                  if((key.__cid) == h_s133)/*HashMap.sk:96*/
                  {
                    int h_s136 = 0;
                    hashCode@Object(key, h_s136);
                    _pac_sc_s134 = h_s136;
                  }
                  else
                  {
                    int h_s138 = 0;
                    KerberosKey@meta(h_s138);
                    int _pac_sc_s139 = 0;
                    if((key.__cid) == h_s138)/*HashMap.sk:96*/
                    {
                      int h_s141 = 0;
                      hashCode@Object(key, h_s141);
                      _pac_sc_s139 = h_s141;
                    }
                    else
                    {
                      int h_s143 = 0;
                      Number@meta(h_s143);
                      int _pac_sc_s144 = 0;
                      if((key.__cid) == h_s143)/*HashMap.sk:96*/
                      {
                        int h_s146 = 0;
                        hashCode@Object(key, h_s146);
                        _pac_sc_s144 = h_s146;
                      }
                      else
                      {
                        int h_s148 = 0;
                        ArrayDeque_DequeNode@meta(h_s148);
                        int _pac_sc_s149 = 0;
                        if((key.__cid) == h_s148)/*HashMap.sk:96*/
                        {
                          int h_s151 = 0;
                          hashCode@Object(key, h_s151);
                          _pac_sc_s149 = h_s151;
                        }
                        else
                        {
                          int h_s153 = 0;
                          StringBuffer@meta(h_s153);
                          int _pac_sc_s154 = 0;
                          if((key.__cid) == h_s153)/*HashMap.sk:96*/
                          {
                            int h_s156 = 0;
                            hashCode@Object(key, h_s156);
                            _pac_sc_s154 = h_s156;
                          }
                          else
                          {
                            int h_s158 = 0;
                            Float@meta(h_s158);
                            int _pac_sc_s159 = 0;
                            if((key.__cid) == h_s158)/*HashMap.sk:96*/
                            {
                              int h_s161 = 0;
                              hashCode@Object(key, h_s161);
                              _pac_sc_s159 = h_s161;
                            }
                            else
                            {
                              int h_s163 = 0;
                              Utils@meta(h_s163);
                              int _pac_sc_s164 = 0;
                              if((key.__cid) == h_s163)/*HashMap.sk:96*/
                              {
                                int h_s166 = 0;
                                hashCode@Object(key, h_s166);
                                _pac_sc_s164 = h_s166;
                              }
                              else
                              {
                                int h_s168 = 0;
                                File@meta(h_s168);
                                int _pac_sc_s169 = 0;
                                if((key.__cid) == h_s168)/*HashMap.sk:96*/
                                {
                                  int h_s171 = 0;
                                  hashCode@Object(key, h_s171);
                                  _pac_sc_s169 = h_s171;
                                }
                                else
                                {
                                  int h_s173 = 0;
                                  FileOutputStream@meta(h_s173);
                                  int _pac_sc_s174 = 0;
                                  if((key.__cid) == h_s173)/*HashMap.sk:96*/
                                  {
                                    int h_s176 = 0;
                                    hashCode@Object(key, h_s176);
                                    _pac_sc_s174 = h_s176;
                                  }
                                  else
                                  {
                                    int h_s178 = 0;
                                    TreeSet@meta(h_s178);
                                    int _pac_sc_s179 = 0;
                                    if((key.__cid) == h_s178)/*HashMap.sk:96*/
                                    {
                                      int h_s181 = 0;
                                      hashCode@Object(key, h_s181);
                                      _pac_sc_s179 = h_s181;
                                    }
                                    else
                                    {
                                      int h_s183 = 0;
                                      Integer@meta(h_s183);
                                      int _pac_sc_s184 = 0;
                                      if((key.__cid) == h_s183)/*HashMap.sk:96*/
                                      {
                                        int h_s186 = 0;
                                        hashCode@Integer(key, h_s186);
                                        _pac_sc_s184 = h_s186;
                                      }
                                      else
                                      {
                                        int h_s188 = 0;
                                        StringBuilder@meta(h_s188);
                                        int _pac_sc_s189 = 0;
                                        if((key.__cid) == h_s188)/*HashMap.sk:96*/
                                        {
                                          int h_s191 = 0;
                                          hashCode@Object(key, h_s191);
                                          _pac_sc_s189 = h_s191;
                                        }
                                        else
                                        {
                                          int h_s193 = 0;
                                          String@meta(h_s193);
                                          int _pac_sc_s194 = 0;
                                          if((key.__cid) == h_s193)/*HashMap.sk:96*/
                                          {
                                            int h_s196 = 0;
                                            hashCode@String(key, h_s196);
                                            _pac_sc_s194 = h_s196;
                                          }
                                          else
                                          {
                                            int h_s198 = 0;
                                            Mac@meta(h_s198);
                                            int _pac_sc_s199 = 0;
                                            if((key.__cid) == h_s198)/*HashMap.sk:96*/
                                            {
                                              int h_s201 = 0;
                                              hashCode@Object(key, h_s201);
                                              _pac_sc_s199 = h_s201;
                                            }
                                            else
                                            {
                                              int h_s203 = 0;
                                              ArrayList@meta(h_s203);
                                              int _pac_sc_s204 = 0;
                                              if((key.__cid) == h_s203)/*HashMap.sk:96*/
                                              {
                                                int h_s206 = 0;
                                                hashCode@Object(key, h_s206);
                                                _pac_sc_s204 = h_s206;
                                              }
                                              else
                                              {
                                                int h_s208 = 0;
                                                HashMap_Node@meta(h_s208);
                                                int _pac_sc_s209 = 0;
                                                if((key.__cid) == h_s208)/*HashMap.sk:96*/
                                                {
                                                  int h_s211 = 0;
                                                  hashCode@Object(key, h_s211);
                                                  _pac_sc_s209 = h_s211;
                                                }
                                                else
                                                {
                                                  int h_s213 = 0;
                                                  HashSet@meta(h_s213);
                                                  int _pac_sc_s214 = 0;
                                                  if((key.__cid) == h_s213)/*HashMap.sk:96*/
                                                  {
                                                    int h_s216 = 0;
                                                    hashCode@Object(key, h_s216);
                                                    _pac_sc_s214 = h_s216;
                                                  }
                                                  else
                                                  {
                                                    int h_s218 = 0;
                                                    TreeMap@meta(h_s218);
                                                    int _pac_sc_s219 = 0;
                                                    if((key.__cid) == h_s218)/*HashMap.sk:96*/
                                                    {
                                                      int h_s221 = 0;
                                                      hashCode@Object(key, h_s221);
                                                      _pac_sc_s219 = h_s221;
                                                    }
                                                    else
                                                    {
                                                      int h_s223 = 0;
                                                      AbstractQueue@meta(h_s223);
                                                      int _pac_sc_s224 = 0;
                                                      if((key.__cid) == h_s223)/*HashMap.sk:96*/
                                                      {
                                                        int h_s226 = 0;
                                                        hashCode@Object(key, h_s226);
                                                        _pac_sc_s224 = h_s226;
                                                      }
                                                      else
                                                      {
                                                        int h_s228 = 0;
                                                        Properties@meta(h_s228);
                                                        int _pac_sc_s229 = 0;
                                                        if((key.__cid) == h_s228)/*HashMap.sk:96*/
                                                        {
                                                          int h_s231 = 0;
                                                          hashCode@Object(key, h_s231);
                                                          _pac_sc_s229 = h_s231;
                                                        }
                                                        else
                                                        {
                                                          int h_s233 = 0;
                                                          FileWriterr@meta(h_s233);
                                                          int _pac_sc_s234 = 0;
                                                          if((key.__cid) == h_s233)/*HashMap.sk:96*/
                                                          {
                                                            int h_s236 = 0;
                                                            hashCode@Object(key, h_s236);
                                                            _pac_sc_s234 = h_s236;
                                                          }
                                                          else
                                                          {
                                                            int h_s238 = 0;
                                                            CipherFactory@meta(h_s238);
                                                            int _pac_sc_s239 = 0;
                                                            if((key.__cid) == h_s238)/*HashMap.sk:96*/
                                                            {
                                                              int h_s241 = 0;
                                                              hashCode@Object(key, h_s241);
                                                              _pac_sc_s239 = h_s241;
                                                            }
                                                            else
                                                            {
                                                              int h_s243 = 0;
                                                              SecretKeySpec@meta(h_s243);
                                                              int _pac_sc_s244 = 0;
                                                              if((key.__cid) == h_s243)/*HashMap.sk:96*/
                                                              {
                                                                int h_s246 = 0;
                                                                hashCode@Object(key, h_s246);
                                                                _pac_sc_s244 = h_s246;
                                                              }
                                                              else
                                                              {
                                                                int h_s248 = 0;
                                                                CryptoCipherFactory_CipherProvider@meta(h_s248);
                                                                int _pac_sc_s249 = 0;
                                                                if((key.__cid) == h_s248)/*HashMap.sk:96*/
                                                                {
                                                                  int h_s251 = 0;
                                                                  hashCode@Object(key, h_s251);
                                                                  _pac_sc_s249 = h_s251;
                                                                }
                                                                else
                                                                {
                                                                  int h_s253 = 0;
                                                                  Character@meta(h_s253);
                                                                  int _pac_sc_s254 = 0;
                                                                  if((key.__cid) == h_s253)/*HashMap.sk:96*/
                                                                  {
                                                                    int h_s256 = 0;
                                                                    hashCode@Object(key, h_s256);
                                                                    _pac_sc_s254 = h_s256;
                                                                  }
                                                                  else
                                                                  {
                                                                    int h_s258 = 0;
                                                                    Cipher@meta(h_s258);
                                                                    int _pac_sc_s259 = 0;
                                                                    if((key.__cid) == h_s258)/*HashMap.sk:96*/
                                                                    {
                                                                      int h_s261 = 0;
                                                                      hashCode@Object(key, h_s261);
                                                                      _pac_sc_s259 = h_s261;
                                                                    }
                                                                    else
                                                                    {
                                                                      int h_s263 = 0;
                                                                      OpenSSLCipher@meta(h_s263);
                                                                      int _pac_sc_s264 = 0;
                                                                      if((key.__cid) == h_s263)/*HashMap.sk:96*/
                                                                      {
                                                                        int h_s266 = 0;
                                                                        hashCode@Object(key, h_s266);
                                                                        _pac_sc_s264 = h_s266;
                                                                      }
                                                                      else
                                                                      {
                                                                        int h_s268 = 0;
                                                                        Boolean@meta(h_s268);
                                                                        int _pac_sc_s269 = 0;
                                                                        if((key.__cid) == h_s268)/*HashMap.sk:96*/
                                                                        {
                                                                          int h_s271 = 0;
                                                                          hashCode@Object(key, h_s271);
                                                                          _pac_sc_s269 = h_s271;
                                                                        }
                                                                        else
                                                                        {
                                                                          int h_s273 = 0;
                                                                          JCECipher@meta(h_s273);
                                                                          int _pac_sc_s274 = 0;
                                                                          if((key.__cid) == h_s273)/*HashMap.sk:96*/
                                                                          {
                                                                            int h_s276 = 0;
                                                                            hashCode@Object(key, h_s276);
                                                                            _pac_sc_s274 = h_s276;
                                                                          }
                                                                          else
                                                                          {
                                                                            int h_s278 = 0;
                                                                            System@meta(h_s278);
                                                                            int _pac_sc_s279 = 0;
                                                                            if((key.__cid) == h_s278)/*HashMap.sk:96*/
                                                                            {
                                                                              int h_s281 = 0;
                                                                              hashCode@Object(key, h_s281);
                                                                              _pac_sc_s279 = h_s281;
                                                                            }
                                                                            else
                                                                            {
                                                                              int h_s283 = 0;
                                                                              IvParameterSpec@meta(h_s283);
                                                                              int _pac_sc_s284 = 0;
                                                                              if((key.__cid) == h_s283)/*HashMap.sk:96*/
                                                                              {
                                                                                int h_s286 = 0;
                                                                                hashCode@Object(key, h_s286);
                                                                                _pac_sc_s284 = h_s286;
                                                                              }
                                                                              else
                                                                              {
                                                                                int h_s288 = 0;
                                                                                BufferedWriter@meta(h_s288);
                                                                                int _pac_sc_s289 = 0;
                                                                                if((key.__cid) == h_s288)/*HashMap.sk:96*/
                                                                                {
                                                                                  int h_s291 = 0;
                                                                                  hashCode@Object(key, h_s291);
                                                                                  _pac_sc_s289 = h_s291;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int h_s293 = 0;
                                                                                  LinkedList@meta(h_s293);
                                                                                  int _pac_sc_s294 = 0;
                                                                                  if((key.__cid) == h_s293)/*HashMap.sk:96*/
                                                                                  {
                                                                                    int h_s296 = 0;
                                                                                    hashCode@Object(key, h_s296);
                                                                                    _pac_sc_s294 = h_s296;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int h_s298 = 0;
                                                                                    Stack@meta(h_s298);
                                                                                    int _pac_sc_s299 = 0;
                                                                                    if((key.__cid) == h_s298)/*HashMap.sk:96*/
                                                                                    {
                                                                                      int h_s301 = 0;
                                                                                      hashCode@Object(key, h_s301);
                                                                                      _pac_sc_s299 = h_s301;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int h_s303 = 0;
                                                                                      Arrays@meta(h_s303);
                                                                                      int _pac_sc_s304 = 0;
                                                                                      if((key.__cid) == h_s303)/*HashMap.sk:96*/
                                                                                      {
                                                                                        int h_s306 = 0;
                                                                                        hashCode@Object(key, h_s306);
                                                                                        _pac_sc_s304 = h_s306;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int h_s308 = 0;
                                                                                        KeyStore@meta(h_s308);
                                                                                        int _pac_sc_s309 = 0;
                                                                                        if((key.__cid) == h_s308)/*HashMap.sk:96*/
                                                                                        {
                                                                                          int h_s311 = 0;
                                                                                          hashCode@Object(key, h_s311);
                                                                                          _pac_sc_s309 = h_s311;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int h_s313 = 0;
                                                                                          BufferedReader@meta(h_s313);
                                                                                          int _pac_sc_s314 = 0;
                                                                                          if((key.__cid) == h_s313)/*HashMap.sk:96*/
                                                                                          {
                                                                                            int h_s316 = 0;
                                                                                            hashCode@Object(key, h_s316);
                                                                                            _pac_sc_s314 = h_s316;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int h_s318 = 0;
                                                                                            Scanner@meta(h_s318);
                                                                                            int _pac_sc_s319 = 0;
                                                                                            if((key.__cid) == h_s318)/*HashMap.sk:96*/
                                                                                            {
                                                                                              int h_s321 = 0;
                                                                                              hashCode@Object(key, h_s321);
                                                                                              _pac_sc_s319 = h_s321;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int h_s323 = 0;
                                                                                              SecureRandom@meta(h_s323);
                                                                                              int _pac_sc_s324 = 0;
                                                                                              if((key.__cid) == h_s323)/*HashMap.sk:96*/
                                                                                              {
                                                                                                int h_s326 = 0;
                                                                                                hashCode@Object(key, h_s326);
                                                                                                _pac_sc_s324 = h_s326;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int h_s328 = 0;
                                                                                                Object@meta(h_s328);
                                                                                                int _pac_sc_s329 = 0;
                                                                                                if((key.__cid) == h_s328)/*HashMap.sk:96*/
                                                                                                {
                                                                                                  int h_s331 = 0;
                                                                                                  hashCode@Object(key, h_s331);
                                                                                                  _pac_sc_s329 = h_s331;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  _pac_sc_s329 = 0;
                                                                                                }
                                                                                                _pac_sc_s324 = _pac_sc_s329;
                                                                                              }
                                                                                              _pac_sc_s319 = _pac_sc_s324;
                                                                                            }
                                                                                            _pac_sc_s314 = _pac_sc_s319;
                                                                                          }
                                                                                          _pac_sc_s309 = _pac_sc_s314;
                                                                                        }
                                                                                        _pac_sc_s304 = _pac_sc_s309;
                                                                                      }
                                                                                      _pac_sc_s299 = _pac_sc_s304;
                                                                                    }
                                                                                    _pac_sc_s294 = _pac_sc_s299;
                                                                                  }
                                                                                  _pac_sc_s289 = _pac_sc_s294;
                                                                                }
                                                                                _pac_sc_s284 = _pac_sc_s289;
                                                                              }
                                                                              _pac_sc_s279 = _pac_sc_s284;
                                                                            }
                                                                            _pac_sc_s274 = _pac_sc_s279;
                                                                          }
                                                                          _pac_sc_s269 = _pac_sc_s274;
                                                                        }
                                                                        _pac_sc_s264 = _pac_sc_s269;
                                                                      }
                                                                      _pac_sc_s259 = _pac_sc_s264;
                                                                    }
                                                                    _pac_sc_s254 = _pac_sc_s259;
                                                                  }
                                                                  _pac_sc_s249 = _pac_sc_s254;
                                                                }
                                                                _pac_sc_s244 = _pac_sc_s249;
                                                              }
                                                              _pac_sc_s239 = _pac_sc_s244;
                                                            }
                                                            _pac_sc_s234 = _pac_sc_s239;
                                                          }
                                                          _pac_sc_s229 = _pac_sc_s234;
                                                        }
                                                        _pac_sc_s224 = _pac_sc_s229;
                                                      }
                                                      _pac_sc_s219 = _pac_sc_s224;
                                                    }
                                                    _pac_sc_s214 = _pac_sc_s219;
                                                  }
                                                  _pac_sc_s209 = _pac_sc_s214;
                                                }
                                                _pac_sc_s204 = _pac_sc_s209;
                                              }
                                              _pac_sc_s199 = _pac_sc_s204;
                                            }
                                            _pac_sc_s194 = _pac_sc_s199;
                                          }
                                          _pac_sc_s189 = _pac_sc_s194;
                                        }
                                        _pac_sc_s184 = _pac_sc_s189;
                                      }
                                      _pac_sc_s179 = _pac_sc_s184;
                                    }
                                    _pac_sc_s174 = _pac_sc_s179;
                                  }
                                  _pac_sc_s169 = _pac_sc_s174;
                                }
                                _pac_sc_s164 = _pac_sc_s169;
                              }
                              _pac_sc_s159 = _pac_sc_s164;
                            }
                            _pac_sc_s154 = _pac_sc_s159;
                          }
                          _pac_sc_s149 = _pac_sc_s154;
                        }
                        _pac_sc_s144 = _pac_sc_s149;
                      }
                      _pac_sc_s139 = _pac_sc_s144;
                    }
                    _pac_sc_s134 = _pac_sc_s139;
                  }
                  _pac_sc_s129 = _pac_sc_s134;
                }
                _pac_sc_s124 = _pac_sc_s129;
              }
              _pac_sc_s119 = _pac_sc_s124;
            }
            _pac_sc_s114 = _pac_sc_s119;
          }
          _pac_sc_s109 = _pac_sc_s114;
        }
        _pac_sc_s104 = _pac_sc_s109;
      }
      _pac_sc_s99 = _pac_sc_s104;
    }
    Object@Object _out_s333 = null;
    putVal_int_K_V@HashMap(self, _pac_sc_s99, key, value, _out_s333, self0__HashMap_Node_s5360);
    _out = _out_s333;
    return;
  }
  /*HashMap.sk:22*/
  
void resize_int (Object self, int newSize, ref global Object@Object self0__HashMap_Node_s5364)/*HashMap.sk:22*/
  {
    int i = 0;
    int h = 0;
    int hashMod = 0;
    Array_Object@array oldElementData = self.elementData_HashMap;
    Array_Object@array newElementData = new Array_Object@array(length=newSize);
    i = 0;
    bit __sa0 = 0 < (self.capacity_HashMap);
    Object@Object k = null;
    Object@Object v = null;
    while(__sa0)
    {
      if((oldElementData.A[i]) != (null))/*HashMap.sk:30*/
      {
        h = oldElementData.A[i].hash_HashMap_Node;
        k = oldElementData.A[i].key_HashMap_Node;
        v = oldElementData.A[i].value_HashMap_Node;
        hashMod = h % newSize;
        if(hashMod < 0)/*HashMap.sk:35*/
        {
          hashMod = hashMod + newSize;
        }
        int _out_s579 = 0;
        HashMap_Node@meta(_out_s579);
        Object@Object _out_s581 = null;
        HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s579), self, k, v, h, _out_s581, self0__HashMap_Node_s5364)//{};
        newElementData.A[hashMod] = _out_s581;
      }
      i = i + 1;
      __sa0 = i < (self.capacity_HashMap);
    }
    self.elementData_HashMap = newElementData;
    self.capacity_HashMap = newSize;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s5433 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s5432)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s5432 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s5455 (ref int MAX_ARRAY_SIZE__ArrayList_s5454)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s5454 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:43*/
  {
    if((0 <= index) && (index < (self._count_String)))/*String.sk:44*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:154*/
  {
    _out = 0;
    int _out_s2556 = 0;
    String@meta(_out_s2556);
    if((obj.__cid) == _out_s2556)/*String.sk:156*/
    {
      _out = 1;
      int sLen_s2558 = 0;
      String@meta(sLen_s2558);
      int _pac_sc_s2559 = 0;
      if((obj.__cid) == sLen_s2558)/*String.sk:159*/
      {
        int sLen_s2561 = 0;
        length@String(obj, sLen_s2561);
        _pac_sc_s2559 = sLen_s2561;
      }
      else
      {
        _pac_sc_s2559 = 0;
      }
      int tLen_s2563 = 0;
      String@meta(tLen_s2563);
      int _pac_sc_s2564 = 0;
      if((self.__cid) == tLen_s2563)/*String.sk:160*/
      {
        int tLen_s2566 = 0;
        length@String(self, tLen_s2566);
        _pac_sc_s2564 = tLen_s2566;
      }
      else
      {
        _pac_sc_s2564 = 0;
      }
      if(_pac_sc_s2559 != _pac_sc_s2564)/*String.sk:161*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2559) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:163*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:171*/
  
void hashCode (Object self, ref int _out)/*String.sk:171*/
  {
    int n;
    int hash;
    int temp;
    n = self._count_String;
    hash = 0;
    if(n == 0)/*String.sk:173*/
    {
      _out = 0;
      return;
    }
    for(int i = 0; i < n; i = i + 1)/*Canonical*/
    {
      int temp_s2568 = 0;
      String@meta(temp_s2568);
      char _pac_sc_s2569 = '\0';
      if((self.__cid) == temp_s2568)/*String.sk:177*/
      {
        char temp_s2571 = '\0';
        charAt_int@String(self, i, temp_s2571);
        _pac_sc_s2569 = temp_s2571;
      }
      else
      {
        _pac_sc_s2569 = '\0';
      }
      temp = _pac_sc_s2569;
      for(int j = 0; j < ((n - 1) - i); j = j + 1)/*Canonical*/
      {
        temp = temp * 31;
      }
      hash = hash + temp;
    }
    _out = hash;
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref int _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s5445 (ref int INITIAL_CAPACITY__TreeSet_s5444)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s5444 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s5481 (ref int RESIZE_FACTOR__TreeSet_s5480)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s5480 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Collections*/
package Collections{
  /* END PACKAGE Collections*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s5443 (ref int INITIAL_CAPACITY__HashSet_s5442)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s5442 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s5479 (ref int RESIZE_FACTOR__HashSet_s5478)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s5478 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE OpenSSLCipher*/
package OpenSSLCipher{
  /*OpenSSLCipher.sk:7*/
  
void OpenSSLCipher_OpenSSLCipher_String_String (Object self, Object algorithm, Object transformation, ref Object _out)/*OpenSSLCipher.sk:7*/
  {
    self.algorithm_OpenSSLCipher = algorithm;
    self.transformation_OpenSSLCipher = transformation;
    _out = self;
    return;
  }
  /*OpenSSLCipher.sk:36*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5347, ref global Object@Object self0__HashMap_Node_s5365)/*OpenSSLCipher.sk:36*/
  {
    Array_char@array _out_s3736 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 0, data, key, IV, _out_s3736, DEFAULT_INITIAL_CAPACITY__HashMap_s5347, self0__HashMap_Node_s5365);
    _out = _out_s3736;
    return;
  }
  /*OpenSSLCipher.sk:32*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5355, ref global Object@Object self0__HashMap_Node_s5350)/*OpenSSLCipher.sk:32*/
  {
    Array_char@array _out_s3797 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 1, data, key, IV, _out_s3797, DEFAULT_INITIAL_CAPACITY__HashMap_s5355, self0__HashMap_Node_s5350);
    _out = _out_s3797;
    return;
  }
  /*OpenSSLCipher.sk:13*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5352, ref global Object@Object self0__HashMap_Node_s5368)/*OpenSSLCipher.sk:13*/
  {
    int properties_s3761 = 0;
    Properties@meta(properties_s3761);
    Object@Object properties_s3763 = null;
    Properties_Properties@Properties(new Object@Object(__cid=properties_s3761), properties_s3763, DEFAULT_INITIAL_CAPACITY__HashMap_s5352)//{};
    int _out_s3765 = 0;
    Properties@meta(_out_s3765);
    if((properties_s3763.__cid) == _out_s3765)/*OpenSSLCipher.sk:15*/
    {
      int _out_s3767 = 0;
      String@meta(_out_s3767);
      Object@Object _out_s3769 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3767), new Array_char@array(length=12, A={'C','L','A','S','S','E','S','_','K','E','Y','\0'}), 0, 11, _out_s3769)//{};
      Object@Object _out_s3771 = null;
      getClassName@CryptoCipherFactory_CipherProvider(_out_s3771);
      setProperty_String_String@Properties(properties_s3763, _out_s3769, _out_s3771, self0__HashMap_Node_s5368)//{};
    }
    Object@Object cipher_s3773 = null;
    getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties_s3763, cipher_s3773);
    _out = cipher_s3773;
    int keyValue_s3775 = 0;
    SecretKeySpec@meta(keyValue_s3775);
    int keyValue_s3777 = 0;
    KerberosKey@meta(keyValue_s3777);
    Array_char@array _pac_sc_s3778 = null;
    if((key.__cid) == keyValue_s3777)/*OpenSSLCipher.sk:19*/
    {
      Array_char@array keyValue_s3780 = null;
      getEncoded@KerberosKey(key, keyValue_s3780);
      _pac_sc_s3778 = keyValue_s3780;
    }
    else
    {
      int keyValue_s3782 = 0;
      SecretKeySpec@meta(keyValue_s3782);
      Array_char@array _pac_sc_s3783 = null;
      if((key.__cid) == keyValue_s3782)/*OpenSSLCipher.sk:19*/
      {
        Array_char@array keyValue_s3785 = null;
        getEncoded@SecretKeySpec(key, keyValue_s3785);
        _pac_sc_s3783 = keyValue_s3785;
      }
      else
      {
        _pac_sc_s3783 = null;
      }
      _pac_sc_s3778 = _pac_sc_s3783;
    }
    Object@Object keyValue_s3787 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s3775), _pac_sc_s3778, self.algorithm_OpenSSLCipher, keyValue_s3787)//{};
    int IVspec_s3789 = 0;
    IvParameterSpec@meta(IVspec_s3789);
    Object@Object IVspec_s3791 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s3789), IV, IVspec_s3791)//{};
    if(isEncryption)/*OpenSSLCipher.sk:21*/
    {
      int _out_s3793 = 0;
      Cipher@meta(_out_s3793);
      if((cipher_s3773.__cid) == _out_s3793)/*OpenSSLCipher.sk:22*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3773, 2, keyValue_s3787, IVspec_s3791);
      }
    }
    else
    {
      int _out_s3795 = 0;
      Cipher@meta(_out_s3795);
      if((cipher_s3773.__cid) == _out_s3795)/*OpenSSLCipher.sk:26*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3773, 1, keyValue_s3787, IVspec_s3791);
      }
    }
    return;
  }
  /*OpenSSLCipher.sk:66*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5367, ref global Object@Object self0__HashMap_Node_s5371)/*OpenSSLCipher.sk:66*/
  {
    Object@Object cipher_s3740 = null;
    getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV, cipher_s3740, DEFAULT_INITIAL_CAPACITY__HashMap_s5367, self0__HashMap_Node_s5371);
    int cipherText_s3752 = 0;
    Cipher@meta(cipherText_s3752);
    Array_char@array _pac_sc_s3753 = null;
    if((cipher_s3740.__cid) == cipherText_s3752)/*OpenSSLCipher.sk:55*/
    {
      Array_char@array cipherText_s3755 = null;
      doFinal_byte@Cipher(cipher_s3740, data, cipherText_s3755);
      _pac_sc_s3753 = cipherText_s3755;
    }
    else
    {
      _pac_sc_s3753 = null;
    }
    Object@Object cipher_s3740_0 = null;
    getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV, cipher_s3740_0, DEFAULT_INITIAL_CAPACITY__HashMap_s5367, self0__HashMap_Node_s5371);
    int cipherText_s3752_0 = 0;
    Cipher@meta(cipherText_s3752_0);
    Array_char@array _pac_sc_s3753_0 = null;
    if((cipher_s3740_0.__cid) == cipherText_s3752_0)/*OpenSSLCipher.sk:55*/
    {
      Array_char@array cipherText_s3755_0 = null;
      doFinal_byte@Cipher(cipher_s3740_0, _pac_sc_s3753, cipherText_s3755_0);
      _pac_sc_s3753_0 = cipherText_s3755_0;
    }
    else
    {
      _pac_sc_s3753_0 = null;
    }
    _out = _pac_sc_s3753_0;
    return;
  }
  /* END PACKAGE OpenSSLCipher*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:216*/
  
void charValue (Object self, ref char _out)/*Character.sk:216*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:220*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Character.sk:220*/
  {
    int _out_s3799 = 0;
    Character@meta(_out_s3799);
    if((obj.__cid) == _out_s3799)/*Character.sk:221*/
    {
      int _out_s3801 = 0;
      Character@meta(_out_s3801);
      char _pac_sc_s3802 = '\0';
      if((obj.__cid) == _out_s3801)/*Character.sk:222*/
      {
        char _out_s3804 = '\0';
        charValue@Character(obj, _out_s3804);
        _pac_sc_s3802 = _out_s3804;
      }
      else
      {
        _pac_sc_s3802 = '\0';
      }
      _out = (self.value_Character) == _pac_sc_s3802;
      return;
    }
    _out = 0;
    return;
  }
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s5379 (ref char COMBINING_SPACING_MARK__Character_s5378)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s5378 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s5381 (ref char CONNECTOR_PUNCTUATION__Character_s5380)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s5380 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s5383 (ref char CONTROL__Character_s5382)/*Character.sk:71*/
  {
    CONTROL__Character_s5382 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s5385 (ref char CURRENCY_SYMBOL__Character_s5384)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s5384 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s5387 (ref char DASH_PUNCTUATION__Character_s5386)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s5386 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s5389 (ref char DECIMAL_DIGIT_NUMBER__Character_s5388)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s5388 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s5393 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s5392)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s5392 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5395 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5394)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5394 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5397 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5396)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5396 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5399 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5398)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5398 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5401 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5400)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5400 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5403 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5402)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5402 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5405 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5404)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5404 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5407 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5406)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5406 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5409 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5408)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5408 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s5411 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s5410)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s5410 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s5413 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s5412)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s5412 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5415 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5414)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5414 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5417 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5416)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5416 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5419 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5418)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5418 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5421 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5420)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5420 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5423 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5422)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5422 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5425 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5424)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5424 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5427 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5426)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5426 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s5429 (ref char DIRECTIONALITY_UNDEFINED__Character_s5428)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s5428 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s5431 (ref char DIRECTIONALITY_WHITESPACE__Character_s5430)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s5430 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s5435 (ref char ENCLOSING_MARK__Character_s5434)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s5434 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s5437 (ref char END_PUNCTUATION__Character_s5436)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s5436 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s5439 (ref char FINAL_QUOTE_PUNCTUATION__Character_s5438)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s5438 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s5441 (ref char FORMAT__Character_s5440)/*Character.sk:75*/
  {
    FORMAT__Character_s5440 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s5447 (ref char LETTER_NUMBER__Character_s5446)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s5446 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s5449 (ref char LINE_SEPARATOR__Character_s5448)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s5448 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s5451 (ref char LOWERCASE_LETTER__Character_s5450)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s5450 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s5453 (ref char MATH_SYMBOL__Character_s5452)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s5452 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s5457 (ref int MAX_RADIX__Character_s5456)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s5456 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s5459 (ref int MIN_RADIX__Character_s5458)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s5458 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s5461 (ref char MODIFIER_LETTER__Character_s5460)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s5460 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s5463 (ref char MODIFIER_SYMBOL__Character_s5462)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s5462 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s5465 (ref char NON_SPACING_MARK__Character_s5464)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s5464 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s5467 (ref char OTHER_LETTER__Character_s5466)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s5466 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s5469 (ref char OTHER_NUMBER__Character_s5468)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s5468 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s5471 (ref char OTHER_PUNCTUATION__Character_s5470)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s5470 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s5473 (ref char OTHER_SYMBOL__Character_s5472)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s5472 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s5475 (ref char PARAGRAPH_SEPARATOR__Character_s5474)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s5474 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s5477 (ref char PRIVATE_USE__Character_s5476)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s5476 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s5483 (ref char SPACE_SEPARATOR__Character_s5482)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s5482 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s5485 (ref char START_PUNCTUATION__Character_s5484)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s5484 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s5487 (ref char SURROGATE__Character_s5486)/*Character.sk:83*/
  {
    SURROGATE__Character_s5486 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s5489 (ref char TITLECASE_LETTER__Character_s5488)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s5488 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s5491 (ref char UNASSIGNED__Character_s5490)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s5490 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s5493 (ref char UPPERCASE_LETTER__Character_s5492)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s5492 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE CipherFactory*/
package CipherFactory{
  /* END PACKAGE CipherFactory*/
}
/* BEGIN PACKAGE CryptoCipherFactory*/
package CryptoCipherFactory{
  /* END PACKAGE CryptoCipherFactory*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /*HashMap_Node.sk:10*/
  
void HashMap_Node_HashMap_Node_HashMap_K_V_int (Object self, Object self_0, Object key, Object value, int hash, ref Object _out, ref global Object@Object self0__HashMap_Node_s5244)/*HashMap_Node.sk:10*/
  {
    self0__HashMap_Node_s5244 = self_0;
    self.key_HashMap_Node = key;
    self.value_HashMap_Node = value;
    self.hash_HashMap_Node = hash;
    _out = self;
    return;
  }
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /*Float.sk:29*/
  
void equals_Object (Object self, Object anotherFloat, ref bit _out)/*Float.sk:29*/
  {
    int _out_s4094 = 0;
    Float@meta(_out_s4094);
    if((anotherFloat.__cid) == _out_s4094)/*Float.sk:30*/
    {
      if((anotherFloat.value_Float) == (self.value_Float))/*Float.sk:32*/
      {
        _out = 1;
        return;
      }
    }
    _out = 0;
    return;
  }
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:4*/
  
void AbstractQueue (ref int _out)/*meta.sk:4*/
  {
    _out = 52;
    return;
  }
  /*meta.sk:6*/
  
void ArrayDeque (ref int _out)/*meta.sk:6*/
  {
    _out = 54;
    return;
  }
  /*meta.sk:7*/
  
void ArrayDeque_DequeNode (ref int _out)/*meta.sk:7*/
  {
    _out = 55;
    return;
  }
  /*meta.sk:8*/
  
void ArrayList (ref int _out)/*meta.sk:8*/
  {
    _out = 42;
    return;
  }
  /*meta.sk:9*/
  
void Arrays (ref int _out)/*meta.sk:9*/
  {
    _out = 47;
    return;
  }
  /*meta.sk:10*/
  
void Assert (ref int _out)/*meta.sk:10*/
  {
    _out = 39;
    return;
  }
  /*meta.sk:11*/
  
void Boolean (ref int _out)/*meta.sk:11*/
  {
    _out = 34;
    return;
  }
  /*meta.sk:12*/
  
void BufferedReader (ref int _out)/*meta.sk:12*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:13*/
  
void BufferedWriter (ref int _out)/*meta.sk:13*/
  {
    _out = 26;
    return;
  }
  /*meta.sk:15*/
  
void Character (ref int _out)/*meta.sk:15*/
  {
    _out = 22;
    return;
  }
  /*meta.sk:16*/
  
void Cipher (ref int _out)/*meta.sk:16*/
  {
    _out = 44;
    return;
  }
  /*meta.sk:17*/
  
void CipherFactory (ref int _out)/*meta.sk:17*/
  {
    _out = 5;
    return;
  }
  /*meta.sk:18*/
  
void Collections (ref int _out)/*meta.sk:18*/
  {
    _out = 15;
    return;
  }
  /*meta.sk:20*/
  
void CryptoCipherFactory (ref int _out)/*meta.sk:20*/
  {
    _out = 56;
    return;
  }
  /*meta.sk:21*/
  
void CryptoCipherFactory_CipherProvider (ref int _out)/*meta.sk:21*/
  {
    _out = 57;
    return;
  }
  /*meta.sk:23*/
  
void File (ref int _out)/*meta.sk:23*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:24*/
  
void FileOutputStream (ref int _out)/*meta.sk:24*/
  {
    _out = 43;
    return;
  }
  /*meta.sk:25*/
  
void FileReaderr (ref int _out)/*meta.sk:25*/
  {
    _out = 33;
    return;
  }
  /*meta.sk:26*/
  
void FileWriterr (ref int _out)/*meta.sk:26*/
  {
    _out = 20;
    return;
  }
  /*meta.sk:27*/
  
void Float (ref int _out)/*meta.sk:27*/
  {
    _out = 24;
    return;
  }
  /*meta.sk:28*/
  
void HashMap (ref int _out)/*meta.sk:28*/
  {
    _out = 49;
    return;
  }
  /*meta.sk:29*/
  
void HashMap_Node (ref int _out)/*meta.sk:29*/
  {
    _out = 50;
    return;
  }
  /*meta.sk:30*/
  
void HashSet (ref int _out)/*meta.sk:30*/
  {
    _out = 13;
    return;
  }
  /*meta.sk:32*/
  
void Integer (ref int _out)/*meta.sk:32*/
  {
    _out = 35;
    return;
  }
  /*meta.sk:33*/
  
void IvParameterSpec (ref int _out)/*meta.sk:33*/
  {
    _out = 29;
    return;
  }
  /*meta.sk:34*/
  
void JCECipher (ref int _out)/*meta.sk:34*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:35*/
  
void KerberosKey (ref int _out)/*meta.sk:35*/
  {
    _out = 40;
    return;
  }
  /*meta.sk:37*/
  
void KeyGenerator (ref int _out)/*meta.sk:37*/
  {
    _out = 25;
    return;
  }
  /*meta.sk:38*/
  
void KeyStore (ref int _out)/*meta.sk:38*/
  {
    _out = 53;
    return;
  }
  /*meta.sk:39*/
  
void LinkedList (ref int _out)/*meta.sk:39*/
  {
    _out = 17;
    return;
  }
  /*meta.sk:41*/
  
void Mac (ref int _out)/*meta.sk:41*/
  {
    _out = 59;
    return;
  }
  /*meta.sk:44*/
  
void Number (ref int _out)/*meta.sk:44*/
  {
    _out = 36;
    return;
  }
  /*meta.sk:45*/
  
void Object (ref int _out)/*meta.sk:45*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:46*/
  
void OpenSSLCipher (ref int _out)/*meta.sk:46*/
  {
    _out = 6;
    return;
  }
  /*meta.sk:47*/
  
void PrintStream (ref int _out)/*meta.sk:47*/
  {
    _out = 19;
    return;
  }
  /*meta.sk:49*/
  
void Properties (ref int _out)/*meta.sk:49*/
  {
    _out = 16;
    return;
  }
  /*meta.sk:51*/
  
void Scanner (ref int _out)/*meta.sk:51*/
  {
    _out = 51;
    return;
  }
  /*meta.sk:53*/
  
void SecretKeySpec (ref int _out)/*meta.sk:53*/
  {
    _out = 28;
    return;
  }
  /*meta.sk:54*/
  
void SecureRandom (ref int _out)/*meta.sk:54*/
  {
    _out = 48;
    return;
  }
  /*meta.sk:56*/
  
void Stack (ref int _out)/*meta.sk:56*/
  {
    _out = 23;
    return;
  }
  /*meta.sk:57*/
  
void String (ref int _out)/*meta.sk:57*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:58*/
  
void StringBuffer (ref int _out)/*meta.sk:58*/
  {
    _out = 14;
    return;
  }
  /*meta.sk:59*/
  
void StringBuilder (ref int _out)/*meta.sk:59*/
  {
    _out = 45;
    return;
  }
  /*meta.sk:60*/
  
void System (ref int _out)/*meta.sk:60*/
  {
    _out = 46;
    return;
  }
  /*meta.sk:61*/
  
void Tester (ref int _out)/*meta.sk:61*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:62*/
  
void TreeMap (ref int _out)/*meta.sk:62*/
  {
    _out = 38;
    return;
  }
  /*meta.sk:63*/
  
void TreeSet (ref int _out)/*meta.sk:63*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:64*/
  
void Utils (ref int _out)/*meta.sk:64*/
  {
    _out = 41;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE FileOutputStream*/
package FileOutputStream{
  /* END PACKAGE FileOutputStream*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object file_Scanner;
      Object reader_BufferedReader;
      Object instance_KeyStore;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
      Object writer_BufferedWriter;
      Object transformation_JCECipher;
      Object algorithm_JCECipher;
      Object provider_JCECipher;
      bit bool_Boolean;
      Object transformation_OpenSSLCipher;
      Object algorithm_OpenSSLCipher;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      char value_Character;
      Array_char key_SecretKeySpec;
      Object fname_FileWriterr;
      Object map_Properties;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Array_char _value_String;
      int _count_String;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      int value_Integer;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      Object path_FileOutputStream;
      Object fname_File;
      int size_File;
      float value_Float;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
      Object CLASSES_KEY_CryptoCipherFactory;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      Object out_PrintStream;
      Object mode_KeyGenerator;
      Object path_FileReaderr;
      Object data_FileReaderr;
      int position_FileReaderr;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = self;
    return;
  }
  /*Object.sk:29*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Object.sk:29*/
  {
    _out = self == obj;
    return;
  }
  /*Object.sk:33*/
  
void hashCode (Object self, ref int _out)/*Object.sk:33*/
  {
    _out = 0;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Arrays*/
package Arrays{
  /*Arrays.sk:20*/
  
void arraysEquals_byte_byte (Array_char b1, Array_char b2, ref bit _out)/*Arrays.sk:20*/
  {
    if((b1.length) == (b2.length))/*Arrays.sk:21*/
    {
      bit __sa23 = 0 < (b1.length);
      int i = 0;
      while(__sa23)
      {
        if((b1.A[i]) != (b2.A[i]))/*Arrays.sk:23*/
        {
          _out = 0;
          return;
        }
        i = i + 1;
        __sa23 = i < (b1.length);
      }
    }
    else
    {
      _out = 0;
      return;
    }
    _out = 1;
    return;
  }
  /* END PACKAGE Arrays*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE AlgorithmParameterSpec*/
package AlgorithmParameterSpec{
  /* END PACKAGE AlgorithmParameterSpec*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE JCECipher*/
package JCECipher{
  /*JCECipher.sk:7*/
  
void JCECipher_JCECipher_String_String_String (Object self, Object provider, Object algorithm, Object transformation, ref Object _out)/*JCECipher.sk:7*/
  {
    self.provider_JCECipher = provider;
    self.algorithm_JCECipher = algorithm;
    self.transformation_JCECipher = transformation;
    _out = self;
    return;
  }
  /*JCECipher.sk:34*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:34*/
  {
    Array_char@array _out_s4826 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 0, data, key, IV, _out_s4826);
    _out = _out_s4826;
    return;
  }
  /*JCECipher.sk:30*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:30*/
  {
    Array_char@array _out_s4875 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 1, data, key, IV, _out_s4875);
    _out = _out_s4875;
    return;
  }
  /*JCECipher.sk:14*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out)/*JCECipher.sk:14*/
  {
    Object@Object cipher_s4851 = null;
    getInstance_String_String@Cipher(self.transformation_JCECipher, self.provider_JCECipher, cipher_s4851);
    _out = cipher_s4851;
    int keyValue_s4853 = 0;
    SecretKeySpec@meta(keyValue_s4853);
    int keyValue_s4855 = 0;
    KerberosKey@meta(keyValue_s4855);
    Array_char@array _pac_sc_s4856 = null;
    if((key.__cid) == keyValue_s4855)/*JCECipher.sk:17*/
    {
      Array_char@array keyValue_s4858 = null;
      getEncoded@KerberosKey(key, keyValue_s4858);
      _pac_sc_s4856 = keyValue_s4858;
    }
    else
    {
      int keyValue_s4860 = 0;
      SecretKeySpec@meta(keyValue_s4860);
      Array_char@array _pac_sc_s4861 = null;
      if((key.__cid) == keyValue_s4860)/*JCECipher.sk:17*/
      {
        Array_char@array keyValue_s4863 = null;
        getEncoded@SecretKeySpec(key, keyValue_s4863);
        _pac_sc_s4861 = keyValue_s4863;
      }
      else
      {
        _pac_sc_s4861 = null;
      }
      _pac_sc_s4856 = _pac_sc_s4861;
    }
    Object@Object keyValue_s4865 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s4853), _pac_sc_s4856, self.algorithm_JCECipher, keyValue_s4865)//{};
    int IVspec_s4867 = 0;
    IvParameterSpec@meta(IVspec_s4867);
    Object@Object IVspec_s4869 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s4867), IV, IVspec_s4869)//{};
    if(isEncryption)/*JCECipher.sk:19*/
    {
      int _out_s4871 = 0;
      Cipher@meta(_out_s4871);
      if((cipher_s4851.__cid) == _out_s4871)/*JCECipher.sk:20*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4851, 0, keyValue_s4865, IVspec_s4869);
      }
    }
    else
    {
      int _out_s4873 = 0;
      Cipher@meta(_out_s4873);
      if((cipher_s4851.__cid) == _out_s4873)/*JCECipher.sk:24*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4851, 1, keyValue_s4865, IVspec_s4869);
      }
    }
    return;
  }
  /*JCECipher.sk:66*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:66*/
  {
    Object@Object cipher_s4830 = null;
    getCipher_boolean_Key_byte@JCECipher(self, isEncryption, key, IV, cipher_s4830);
    int cipherText_s4842 = 0;
    Cipher@meta(cipherText_s4842);
    Array_char@array _pac_sc_s4843 = null;
    if((cipher_s4830.__cid) == cipherText_s4842)/*JCECipher.sk:53*/
    {
      Array_char@array cipherText_s4845 = null;
      doFinal_byte@Cipher(cipher_s4830, data, cipherText_s4845);
      _pac_sc_s4843 = cipherText_s4845;
    }
    else
    {
      _pac_sc_s4843 = null;
    }
    _out = _pac_sc_s4843;
    return;
  }
  /* END PACKAGE JCECipher*/
}
/* BEGIN PACKAGE Tester*/
package Tester{
  /*Tester.sk:7*/
  
void _main (ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5363, ref global Object@Object self0__HashMap_Node_s5359)/*Tester.sk:7*/
  {
    int self_s4877 = 0;
    Object@meta(self_s4877);
    Object@Object self_s4879 = null;
    Object_Object@Object(new Object@Object(__cid=self_s4877), self_s4879)//{};
    testOpenSSL@Tester(self_s4879, DEFAULT_INITIAL_CAPACITY__HashMap_s5363, self0__HashMap_Node_s5359);
    testJCECipher@Tester(self_s4879);
  }
  /*Tester.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*Tester.sk:7*/
  {
    global int DEFAULT_INITIAL_CAPACITY__HashMap_s5356 = 0;
    glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5391@HashMap(DEFAULT_INITIAL_CAPACITY__HashMap_s5356);
    global Object@Object self0__HashMap_Node_s5353 = null;
    _main(DEFAULT_INITIAL_CAPACITY__HashMap_s5356, self0__HashMap_Node_s5353);
  }
  /*Tester.sk:7*/
  
void main__WrapperNospec ()/*Tester.sk:7*/
  { }
  /*Tester.sk:29*/
  
void testJCECipher (Object self)/*Tester.sk:29*/
  {
    int oc_s4881 = 0;
    JCECipher@meta(oc_s4881);
    int oc_s4883 = 0;
    String@meta(oc_s4883);
    Object@Object oc_s4885 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4883), new Array_char@array(length=9, A={'P','R','O','V','I','D','E','R','\0'}), 0, 8, oc_s4885)//{};
    int oc_s4887 = 0;
    String@meta(oc_s4887);
    Object@Object oc_s4889 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4887), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4889)//{};
    int oc_s4891 = 0;
    String@meta(oc_s4891);
    Object@Object oc_s4893 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4891), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4893)//{};
    Object@Object oc_s4895 = null;
    JCECipher_JCECipher_String_String_String@JCECipher(new Object@Object(__cid=oc_s4881), oc_s4885, oc_s4889, oc_s4893, oc_s4895)//{};
    Array_char@array plaintext = new Array_char@array(length=32);
    Array_char@array IV = new Array_char@array(length=8);
    Array_char@array key = new Array_char@array(length=128);
    for(int i = 0; i < 8; i = i + 1)/*Canonical*/
    {
      key.A[i] = i;
      if(i < 8)/*Tester.sk:36*/
      {
        plaintext.A[i] = i;
      }
      if(i < 8)/*Tester.sk:37*/
      {
        IV.A[i] = i;
      }
    }
    int sk_s4897 = 0;
    SecretKeySpec@meta(sk_s4897);
    int sk_s4899 = 0;
    String@meta(sk_s4899);
    Object@Object sk_s4901 = null;
    String_String_char_int_int@String(new Object@Object(__cid=sk_s4899), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4901)//{};
    Object@Object sk_s4903 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4897), key, sk_s4901, sk_s4903)//{};
    int cipherText_s4905 = 0;
    JCECipher@meta(cipherText_s4905);
    Array_char@array _pac_sc_s4906 = null;
    if((oc_s4895.__cid) == cipherText_s4905)/*Tester.sk:40*/
    {
      Array_char@array cipherText_s4908 = null;
      encrypt_byte_Key_byte@JCECipher(oc_s4895, plaintext, sk_s4903, IV, cipherText_s4908);
      _pac_sc_s4906 = cipherText_s4908;
    }
    else
    {
      _pac_sc_s4906 = null;
    }
    int plaintext2_s4910 = 0;
    JCECipher@meta(plaintext2_s4910);
    Array_char@array _pac_sc_s4911 = null;
    if((oc_s4895.__cid) == plaintext2_s4910)/*Tester.sk:41*/
    {
      Array_char@array plaintext2_s4913 = null;
      decrypt_byte_Key_byte@JCECipher(oc_s4895, _pac_sc_s4906, sk_s4903, IV, plaintext2_s4913);
      _pac_sc_s4911 = plaintext2_s4913;
    }
    else
    {
      _pac_sc_s4911 = null;
    }
    bit _out_s4915 = 0;
    arraysEquals_byte_byte@Arrays(plaintext, _pac_sc_s4911, _out_s4915);
    assert (_out_s4915); //Assert at Tester.sk:42 (0)
  }
  /*Tester.sk:13*/
  
void testOpenSSL (Object self, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5358, ref global Object@Object self0__HashMap_Node_s5362)/*Tester.sk:13*/
  {
    int oc_s4917 = 0;
    OpenSSLCipher@meta(oc_s4917);
    int oc_s4919 = 0;
    String@meta(oc_s4919);
    Object@Object oc_s4921 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4919), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4921)//{};
    int oc_s4923 = 0;
    String@meta(oc_s4923);
    Object@Object oc_s4925 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4923), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4925)//{};
    Object@Object oc_s4927 = null;
    OpenSSLCipher_OpenSSLCipher_String_String@OpenSSLCipher(new Object@Object(__cid=oc_s4917), oc_s4921, oc_s4925, oc_s4927)//{};
    Array_char@array plaintext = new Array_char@array(length=32);
    Array_char@array IV = new Array_char@array(length=8);
    Array_char@array key = new Array_char@array(length=128);
    for(int i = 0; i < 128; i = i + 1)/*Canonical*/
    {
      key.A[i] = i;
      if(i < 32)/*Tester.sk:20*/
      {
        plaintext.A[i] = i;
      }
      if(i < 8)/*Tester.sk:21*/
      {
        IV.A[i] = i;
      }
    }
    int sk_s4929 = 0;
    SecretKeySpec@meta(sk_s4929);
    int sk_s4931 = 0;
    String@meta(sk_s4931);
    Object@Object sk_s4933 = null;
    String_String_char_int_int@String(new Object@Object(__cid=sk_s4931), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4933)//{};
    Object@Object sk_s4935 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4929), key, sk_s4933, sk_s4935)//{};
    int cipherText_s4937 = 0;
    OpenSSLCipher@meta(cipherText_s4937);
    Array_char@array _pac_sc_s4938 = null;
    if((oc_s4927.__cid) == cipherText_s4937)/*Tester.sk:24*/
    {
      Array_char@array cipherText_s4940 = null;
      encrypt_byte_Key_byte@OpenSSLCipher(oc_s4927, plaintext, sk_s4935, IV, cipherText_s4940, DEFAULT_INITIAL_CAPACITY__HashMap_s5358, self0__HashMap_Node_s5362);
      _pac_sc_s4938 = cipherText_s4940;
    }
    else
    {
      _pac_sc_s4938 = null;
    }
    int plaintext2_s4942 = 0;
    OpenSSLCipher@meta(plaintext2_s4942);
    Array_char@array _pac_sc_s4943 = null;
    if((oc_s4927.__cid) == plaintext2_s4942)/*Tester.sk:25*/
    {
      Array_char@array plaintext2_s4945 = null;
      decrypt_byte_Key_byte@OpenSSLCipher(oc_s4927, _pac_sc_s4938, sk_s4935, IV, plaintext2_s4945, DEFAULT_INITIAL_CAPACITY__HashMap_s5358, self0__HashMap_Node_s5362);
      _pac_sc_s4943 = plaintext2_s4945;
    }
    else
    {
      _pac_sc_s4943 = null;
    }
    bit _out_s4947 = 0;
    arraysEquals_byte_byte@Arrays(plaintext, _pac_sc_s4943, _out_s4947);
    assert (_out_s4947); //Assert at Tester.sk:26 (0)
  }
  /* END PACKAGE Tester*/
}
/* BEGIN PACKAGE ICipher*/
package ICipher{
  /* END PACKAGE ICipher*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE CryptoCipherFactory_CipherProvider*/
package CryptoCipherFactory_CipherProvider{
  /*CryptoC..ovider.sk:10*/
  
void getClassName (ref Object _out)/*CryptoC..ovider.sk:10*/
  {
    int _out_s4968 = 0;
    String@meta(_out_s4968);
    Object@Object _out_s4970 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4968), new Array_char@array(length=8, A={'O','P','E','N','S','S','L','\0'}), 0, 7, _out_s4970)//{};
    _out = _out_s4970;
    return;
  }
  /* END PACKAGE CryptoCipherFactory_CipherProvider*/
}
/* BEGIN PACKAGE Properties*/
package Properties{
  /*Properties.sk:3*/
  
void Properties_Properties (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5376)/*Properties.sk:3*/
  {
    int _out_s4977 = 0;
    HashMap@meta(_out_s4977);
    Object@Object _out_s4979 = null;
    HashMap_HashMap@HashMap(new Object@Object(__cid=_out_s4977), _out_s4979, DEFAULT_INITIAL_CAPACITY__HashMap_s5376)//{};
    self.map_Properties = _out_s4979;
    _out = self;
    return;
  }
  /*Properties.sk:8*/
  
void setProperty_String_String (Object self, Object key, Object value, ref global Object@Object self0__HashMap_Node_s5357)/*Properties.sk:8*/
  {
    int _out_s4972 = 0;
    HashMap@meta(_out_s4972);
    if((self.map_Properties.__cid) == _out_s4972)/*Properties.sk:9*/
    {
      Object@Object _out_s4975 = null;
      put_K_V@HashMap(self.map_Properties, key, value, _out_s4975, self0__HashMap_Node_s5357);
    }
  }
  /* END PACKAGE Properties*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE PrintStream*/
package PrintStream{
  /* END PACKAGE PrintStream*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE KeyStore*/
package KeyStore{
  /* END PACKAGE KeyStore*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:32*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Integer.sk:32*/
  {
    int _out_s5098 = 0;
    Integer@meta(_out_s5098);
    if((obj.__cid) == _out_s5098)/*Integer.sk:33*/
    {
      int _out_s5100 = 0;
      Integer@meta(_out_s5100);
      int _pac_sc_s5101 = 0;
      if((obj.__cid) == _out_s5100)/*Integer.sk:34*/
      {
        int _out_s5103 = 0;
        intValue@Integer(obj, _out_s5103);
        _pac_sc_s5101 = _out_s5103;
      }
      else
      {
        _pac_sc_s5101 = 0;
      }
      _out = (self.value_Integer) == _pac_sc_s5101;
      return;
    }
    _out = 0;
    return;
  }
  /*Integer.sk:71*/
  
void hashCode (Object self, ref int _out)/*Integer.sk:71*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:20*/
  
void intValue (Object self, ref int _out)/*Integer.sk:20*/
  {
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE Utils*/
package Utils{
  /*Utils.sk:7*/
  
void getCipherInstance_String_Properties (Object trans, Object props, ref Object _out)/*Utils.sk:7*/
  {
    int _out_s5141 = 0;
    Cipher@meta(_out_s5141);
    Object@Object _out_s5143 = null;
    Cipher_Cipher_String@Cipher(new Object@Object(__cid=_out_s5141), trans, _out_s5143)//{};
    _out = _out_s5143;
    return;
  }
  /* END PACKAGE Utils*/
}
/* BEGIN PACKAGE BufferedReader*/
package BufferedReader{
  /* END PACKAGE BufferedReader*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Array_char val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    _out = self;
    return;
  }
  /*Cipher.sk:37*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Cipher.sk:37*/
  {
    int k_s5187 = 0;
    KerberosKey@meta(k_s5187);
    Array_char@array _pac_sc_s5188 = null;
    if((self.key_Cipher.__cid) == k_s5187)/*Cipher.sk:38*/
    {
      Array_char@array k_s5190 = null;
      getEncoded@KerberosKey(self.key_Cipher, k_s5190);
      _pac_sc_s5188 = k_s5190;
    }
    else
    {
      int k_s5192 = 0;
      SecretKeySpec@meta(k_s5192);
      Array_char@array _pac_sc_s5193 = null;
      if((self.key_Cipher.__cid) == k_s5192)/*Cipher.sk:38*/
      {
        Array_char@array k_s5195 = null;
        getEncoded@SecretKeySpec(self.key_Cipher, k_s5195);
        _pac_sc_s5193 = k_s5195;
      }
      else
      {
        _pac_sc_s5193 = null;
      }
      _pac_sc_s5188 = _pac_sc_s5193;
    }
    _out = new Array_char@array(length=text.length);
    if((_pac_sc_s5188.length) == 0)/*Cipher.sk:40*/
    {
      return;
    }
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:43*/
    {
      bit __sa29 = 0 < (text.length);
      int i = 0;
      while(__sa29)
      {
        _out.A[i] = (text.A[i]) + (_pac_sc_s5188.A[i % (_pac_sc_s5188.length)]);
        i = i + 1;
        __sa29 = i < (text.length);
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:48*/
      {
        bit __sa30 = 0 < (text.length);
        int i_0 = 0;
        while(__sa30)
        {
          _out.A[i_0] = (text.A[i_0]) - (_pac_sc_s5188.A[i_0 % (_pac_sc_s5188.length)]);
          i_0 = i_0 + 1;
          __sa30 = i_0 < (text.length);
        }
      }
    }
    return;
  }
  /*Cipher.sk:18*/
  
void getInstance_String_String (Object type, Object extra, ref Object _out)/*Cipher.sk:18*/
  {
    int _out_s5199 = 0;
    Cipher@meta(_out_s5199);
    Object@Object _out_s5201 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s5199), type, _out_s5201)//{};
    _out = _out_s5201;
    return;
  }
  /*Cipher.sk:32*/
  
void init_int_SecretKey_AlgorithmParameterSpec (Object self, int opmode, Object key, Object i)/*Cipher.sk:32*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 9514
