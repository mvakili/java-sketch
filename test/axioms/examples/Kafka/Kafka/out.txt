SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/sk_Tester/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 35
[SATBackend] MAX FUNC INLINING  = 2
estimated size of main__Wrapper_Tester
stmt cnt: 4
callee glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5448_HashMap : 1
callee main_Tester : 16

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_Tester
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/Kafka/../result_noax/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 2 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/solution0-0 /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1523134210
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch4/test/axioms/examples/Kafka/result_noax/tmp/sk_Tester/input0.tmp
CREATING glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5448_HashMap
size = 3
after ba size = 3
CREATING main__Wrapper_Tester
size = 6
after ba size = 6
CREATING main__WrapperNospec_Tester
size = 0
after ba size = 0
CREATING main_Tester
size = 247
after ba size = 247
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 71
after ba size = 71
CREATING testOpenSSL_Tester
size = 1164
after ba size = 1164
CREATING testJCECipher_Tester
size = 1235
after ba size = 1235
CREATING OpenSSLCipher_meta
size = 3
after ba size = 3
CREATING String_meta
size = 3
after ba size = 3
CREATING String_String_char_int_int_String
size = 751
after ba size = 751
CREATING OpenSSLCipher_OpenSSLCipher_String_String_OpenSSLCipher
size = 81
after ba size = 81
CREATING toString_int_Integer
size = 1927
after ba size = 1927
CREATING getBytes_String
size = 93
after ba size = 93
CREATING SecretKeySpec_meta
size = 3
after ba size = 3
CREATING SecretKeySpec_SecretKeySpec_byte_String_SecretKeySpec
size = 82
after ba size = 82
CREATING encrypt_byte_Key_byte_OpenSSLCipher
size = 175
after ba size = 175
CREATING decrypt_byte_Key_byte_OpenSSLCipher
size = 170
after ba size = 170
CREATING arraysEquals_byte_byte_Arrays
size = 1646
after ba size = 1646
CREATING JCECipher_meta
size = 3
after ba size = 3
CREATING JCECipher_JCECipher_String_String_String_JCECipher
size = 83
after ba size = 83
CREATING encrypt_byte_Key_byte_JCECipher
size = 165
after ba size = 165
CREATING decrypt_byte_Key_byte_JCECipher
size = 160
after ba size = 160
CREATING toString_String
size = 71
after ba size = 71
CREATING getBytes_String_String
Found Cycle of size 26; Breaking.
size = 523
after ba size = 523
CREATING translate_boolean_byte_Key_byte_OpenSSLCipher
size = 931
after ba size = 931
CREATING translate_boolean_byte_Key_byte_JCECipher
size = 921
after ba size = 921
CREATING length_String
size = 78
after ba size = 78
CREATING charAt_int_String
size = 108
after ba size = 108
CREATING getCipher_boolean_Key_byte_OpenSSLCipher
size = 1069
after ba size = 1069
CREATING Cipher_meta
size = 3
after ba size = 3
CREATING update_byte_int_int_byte_int_Cipher
size = 376
after ba size = 376
CREATING doFinal_byte_int_int_byte_int_Cipher
size = 3635
after ba size = 3635
CREATING copyOf_byte_int_Arrays
size = 655
after ba size = 655
CREATING getCipher_boolean_Key_byte_JCECipher
size = 628
after ba size = 628
CREATING getOutputSize_int_Cipher
size = 74
after ba size = 74
CREATING Properties_meta
size = 3
after ba size = 3
CREATING Properties_Properties_Properties
size = 162
after ba size = 162
CREATING getClassName_CryptoCipherFactory_CipherProvider
size = 186
after ba size = 186
CREATING setProperty_String_String_Properties
size = 248
after ba size = 248
CREATING getCipherInstance_String_Properties_Utils
size = 149
after ba size = 149
CREATING KerberosKey_meta
size = 3
after ba size = 3
CREATING getEncoded_KerberosKey
size = 80
after ba size = 80
CREATING getEncoded_SecretKeySpec
size = 80
after ba size = 80
CREATING IvParameterSpec_meta
size = 3
after ba size = 3
CREATING IvParameterSpec_IvParameterSpec_byte_IvParameterSpec
size = 74
after ba size = 74
CREATING init_int_SecretKey_AlgorithmParameterSpec_Cipher
size = 82
after ba size = 82
CREATING getInstance_String_String_Cipher
size = 149
after ba size = 149
CREATING HashMap_meta
size = 3
after ba size = 3
CREATING HashMap_HashMap_HashMap
size = 88
after ba size = 88
CREATING put_K_V_HashMap
size = 726
after ba size = 726
CREATING Cipher_Cipher_String_Cipher
size = 84
after ba size = 84
CREATING Stack_meta
size = 3
after ba size = 3
CREATING hashCode_Object
size = 72
after ba size = 72
CREATING FileWriterr_meta
size = 3
after ba size = 3
CREATING SecureRandom_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING Tester_meta
size = 3
after ba size = 3
CREATING System_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING TreeMap_meta
size = 3
after ba size = 3
CREATING ArrayDeque_DequeNode_meta
size = 3
after ba size = 3
CREATING Assert_meta
size = 3
after ba size = 3
CREATING CipherFactory_meta
size = 3
after ba size = 3
CREATING BufferedWriter_meta
size = 3
after ba size = 3
CREATING AbstractQueue_meta
size = 3
after ba size = 3
CREATING ArrayDeque_meta
size = 3
after ba size = 3
CREATING LinkedList_meta
size = 3
after ba size = 3
CREATING BufferedReader_meta
size = 3
after ba size = 3
CREATING Mac_meta
size = 3
after ba size = 3
CREATING KeyStore_meta
size = 3
after ba size = 3
CREATING StringBuilder_meta
size = 3
after ba size = 3
CREATING HashMap_Node_meta
size = 3
after ba size = 3
CREATING FileReaderr_meta
size = 3
after ba size = 3
CREATING PrintStream_meta
size = 3
after ba size = 3
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING Collections_meta
size = 3
after ba size = 3
CREATING Float_meta
size = 3
after ba size = 3
CREATING Number_meta
size = 3
after ba size = 3
CREATING Scanner_meta
size = 3
after ba size = 3
CREATING StringBuffer_meta
size = 3
after ba size = 3
CREATING Utils_meta
size = 3
after ba size = 3
CREATING Integer_meta
size = 3
after ba size = 3
CREATING hashCode_Integer
size = 78
after ba size = 78
CREATING TreeSet_meta
size = 3
after ba size = 3
CREATING KeyGenerator_meta
size = 3
after ba size = 3
CREATING hashCode_String
size = 3177
after ba size = 3177
CREATING File_meta
size = 3
after ba size = 3
CREATING CryptoCipherFactory_CipherProvider_meta
size = 3
after ba size = 3
CREATING HashSet_meta
size = 3
after ba size = 3
CREATING FileOutputStream_meta
size = 3
after ba size = 3
CREATING Arrays_meta
size = 3
after ba size = 3
CREATING putVal_int_K_V_HashMap
size = 1224
after ba size = 1224
CREATING equals_Object_Object
size = 73
after ba size = 73
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 101
after ba size = 101
CREATING equals_Object_Float
size = 94
after ba size = 94
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 101
after ba size = 101
CREATING equals_Object_String
Found Cycle of size 6; Breaking.
size = 1203
after ba size = 1203
CREATING resize_int_HashMap
Found Cycle of size 81; Breaking.
size = 9205
after ba size = 9205
CREATING HashMap_Node_HashMap_Node_HashMap_K_V_int_HashMap_Node
size = 85
after ba size = 85
CREATING charValue_Character
size = 78
after ba size = 78
CREATING intValue_Integer
size = 78
after ba size = 78
* before  EVERYTHING: main__WrapperNospec_Tester::SPEC nodes = 0	 main__Wrapper_Tester::SKETCH nodes = 6
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 2
 Inlining functions in the sketch.
inlined 2 new size =86
inlined 4 new size =2013
inlined 61 new size =5392
Found Cycle of size 26; Breaking.
inlined 40 new size =11233
Found Cycle of size 615; Breaking.
Found Cycle of size 693; Breaking.
Found Cycle of size 688; Breaking.
Found Cycle of size 612; Breaking.
Found Cycle of size 609; Breaking.
Found Cycle of size 144; Breaking.
Found Cycle of size 465; Breaking.
Found Cycle of size 24; Breaking.
Found Cycle of size 44; Breaking.
inlined 112 new size =48168
Found Cycle of size 32; Breaking.
Found Cycle of size 16; Breaking.
Found Cycle of size 22; Breaking.
inlined 103 new size =46380
Found Cycle of size 44; Breaking.
Found Cycle of size 66; Breaking.
Found Cycle of size 84; Breaking.
Found Cycle of size 103; Breaking.
Found Cycle of size 98; Breaking.
Found Cycle of size 105; Breaking.
Found Cycle of size 91; Breaking.
Found Cycle of size 109; Breaking.
Found Cycle of size 123; Breaking.
Found Cycle of size 127; Breaking.
Found Cycle of size 121; Breaking.
Found Cycle of size 100; Breaking.
Found Cycle of size 105; Breaking.
Found Cycle of size 96; Breaking.
Found Cycle of size 111; Breaking.
Found Cycle of size 101; Breaking.
Found Cycle of size 82; Breaking.
Found Cycle of size 77; Breaking.
Found Cycle of size 92; Breaking.
Found Cycle of size 84; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 79; Breaking.
Found Cycle of size 99; Breaking.
Found Cycle of size 71; Breaking.
Found Cycle of size 94; Breaking.
Found Cycle of size 101; Breaking.
Found Cycle of size 92; Breaking.
Found Cycle of size 90; Breaking.
Found Cycle of size 206; Breaking.
Found Cycle of size 86; Breaking.
Found Cycle of size 202; Breaking.
Found Cycle of size 200; Breaking.
Found Cycle of size 71; Breaking.
Found Cycle of size 78; Breaking.
Found Cycle of size 194; Breaking.
Found Cycle of size 192; Breaking.
Found Cycle of size 67; Breaking.
Found Cycle of size 183; Breaking.
Found Cycle of size 186; Breaking.
Found Cycle of size 181; Breaking.
Found Cycle of size 46; Breaking.
Found Cycle of size 169; Breaking.
Found Cycle of size 34; Breaking.
Found Cycle of size 41; Breaking.
Found Cycle of size 174; Breaking.
Found Cycle of size 66; Breaking.
Found Cycle of size 77; Breaking.
Found Cycle of size 58; Breaking.
Found Cycle of size 178; Breaking.
Found Cycle of size 49; Breaking.
Found Cycle of size 45; Breaking.
Found Cycle of size 170; Breaking.
Found Cycle of size 159; Breaking.
Found Cycle of size 32; Breaking.
Found Cycle of size 149; Breaking.
Found Cycle of size 20; Breaking.
inlined 26 new size =45932
Found Cycle of size 291; Breaking.
Found Cycle of size 284; Breaking.
Found Cycle of size 313; Breaking.
Found Cycle of size 176; Breaking.
Found Cycle of size 321; Breaking.
Found Cycle of size 192; Breaking.
Found Cycle of size 229; Breaking.
Found Cycle of size 231; Breaking.
Found Cycle of size 263; Breaking.
Found Cycle of size 382; Breaking.
Found Cycle of size 375; Breaking.
Found Cycle of size 242; Breaking.
Found Cycle of size 365; Breaking.
Found Cycle of size 358; Breaking.
Found Cycle of size 222; Breaking.
Found Cycle of size 342; Breaking.
Found Cycle of size 346; Breaking.
Found Cycle of size 341; Breaking.
Found Cycle of size 339; Breaking.
Found Cycle of size 335; Breaking.
Found Cycle of size 332; Breaking.
Found Cycle of size 335; Breaking.
Found Cycle of size 331; Breaking.
Found Cycle of size 324; Breaking.
Found Cycle of size 205; Breaking.
Found Cycle of size 199; Breaking.
Found Cycle of size 197; Breaking.
Found Cycle of size 324; Breaking.
Found Cycle of size 318; Breaking.
Found Cycle of size 207; Breaking.
Found Cycle of size 331; Breaking.
Found Cycle of size 329; Breaking.
Found Cycle of size 202; Breaking.
Found Cycle of size 325; Breaking.
Found Cycle of size 323; Breaking.
Found Cycle of size 317; Breaking.
Found Cycle of size 315; Breaking.
Found Cycle of size 311; Breaking.
Found Cycle of size 309; Breaking.
Found Cycle of size 302; Breaking.
Found Cycle of size 175; Breaking.
Found Cycle of size 293; Breaking.
Found Cycle of size 286; Breaking.
Found Cycle of size 282; Breaking.
Found Cycle of size 275; Breaking.
Found Cycle of size 148; Breaking.
Found Cycle of size 146; Breaking.
Found Cycle of size 267; Breaking.
Found Cycle of size 147; Breaking.
Found Cycle of size 147; Breaking.
Found Cycle of size 146; Breaking.
Found Cycle of size 267; Breaking.
Found Cycle of size 264; Breaking.
Found Cycle of size 262; Breaking.
Found Cycle of size 255; Breaking.
Found Cycle of size 253; Breaking.
Found Cycle of size 245; Breaking.
inlined 115 new size =53539
inlined 182 new size =45058
inlined 21 new size =39304
inlined 0 new size =39304
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 39284
* Final Problem size: Problem nodes = 39281
  # OF CONTROLS:    40
 control_ints = 16 	 control_bits = 24
inputSize = 0	ctrlSize = 168
Random seeds = 1
!+ 000000101000010011000000000001100001000000110100000100100000010000011000000111000110000011100000000010000000100000000101000001100000100011010000100000100000001000100111
!+ H__23_410:0
H__15_410_409:0
H__15_410:0
H__14_410:0
H__22_410:0
H__19_410:0
H__12:133
H__16_410:0
H__17_410:3
H__21_410:48
H__20_410:258
H__14_410_409:1
H__22_410_409:0
H__19_410_409:1
H__16_410_409:0
H__17_410_409:144
H__21_410_409:32
H__20_410_409:12
H__13:398
H__7_363:0
H__2_363:0
H__11_363:0
H__7_363_362:0
H__2_363_362:0
H__4_363:1
H__3_363:1
H__5_363:1
H__0:2
H__9_363:1
H__8_363:261
H__10_363:1
H__4_363_362:0
H__3_363_362:0
H__5_363_362:392
H__23_410_409_410_409:0
H__9_363_362:33
H__8_363_362:4
H__10_363_362:0
H__11_363_362_363_362:1
H__1:456

BEG CHECK
 * After optims it became = 2 was 39281
Assert at Arrays.sk:21 (1)
Simulation found a cex by random testing:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 0.048
!% 
!% 
BEG FIND
Level 1  intsize = 2
 * After optims it became = 39281 was 39281
 * After all optims it became = 39281
 finder  hits = 1607851	 bstoreObjs=1144185	 sstorePages=7066
hitcount 	0	1075827	11
hitcount 	1	27636	11
hitcount 	2	627	12
hitcount 	3	362	12
hitcount 	4	35	11
hitcount 	5	43	10
hitcount 	6	31	11
hitcount 	7	32	11
hitcount 	8	35	11
hitcount 	9	31	12
hitcount 	10	30	10
hitcount 	11	543	11
hitcount 	12	1042	11
hitcount 	13	1045	12
hitcount 	14	26	11
hitcount 	15	25	11
hitcount 	16	27	10
hitcount 	17	26	11
hitcount 	18	27	11
hitcount 	19	44	12
hitcount 	20	42	11
hitcount 	21	26	11
hitcount 	22	27	11
hitcount 	23	1544	10
hitcount 	24	1040	10
hitcount 	25	21	11
hitcount 	26	534	13
hitcount 	27	1550	12
hitcount 	28	531	12
hitcount 	29	19	11
hitcount 	30	22	12
hitcount 	31	20	12
hitcount 	32	22	12
hitcount 	33	21	12
hitcount 	34	11629	12
hitcount 	35	8168	12
hitcount 	36	1042	13
hitcount 	37	5	12
hitcount 	38	4	10
hitcount 	39	7	10
hitcount 	40	4	11
hitcount 	41	5	10
hitcount 	42	3	11
hitcount 	43	5	12
hitcount 	44	3	14
hitcount 	45	5	10
hitcount 	46	3	15
hitcount 	47	509	11
hitcount 	48	3	14
hitcount 	49	5	12
hitcount 	50	3	9
hitcount 	51	9	10
hitcount 	52	3	11
hitcount 	53	1025	12
hitcount 	54	3	10
hitcount 	55	4	12
hitcount 	56	1024	12
hitcount 	57	3	13
hitcount 	58	2	9
hitcount 	59	3	10
hitcount 	60	2	18
hitcount 	61	3	12
hitcount 	62	2	12
hitcount 	63	3	9
hitcount 	64	2	12
hitcount 	65	3	11
hitcount 	66	2	14
hitcount 	67	5	11
hitcount 	68	2	9
hitcount 	69	3440	11
hitcount 	70	2	14
hitcount 	71	4325	11
hitcount 	72	1	15
hitcount 	77	1	14
bucketsPerDepth 	17	1
bucketsPerDepth 	18	44
bucketsPerDepth 	19	108
bucketsPerDepth 	20	130
bucketsPerDepth 	21	150
bucketsPerDepth 	22	145
bucketsPerDepth 	23	151
bucketsPerDepth 	24	105
bucketsPerDepth 	25	95
bucketsPerDepth 	26	46
bucketsPerDepth 	27	24
bucketsPerDepth 	28	17
bucketsPerDepth 	29	4
bucketsPerDepth 	30	4
* TIME TO ADD INPUT :  8999.54 ms 
DECISIONS START = 0
f# %assign: 14 clauses: 14857813 learn: 868 restart: 5 decision: 19586 propagated: 52316630
END FIND
!+ 001111010000000110100000010110000000000000000000000000000001000000110000001000000001111111000000000010000000100000000100000000011000100000001100000000000000010100000000
!+ H__23_410:0
H__15_410_409:0
H__15_410:1
H__14_410:1
H__22_410:1
H__19_410:1
H__12:2
H__16_410:1
H__17_410:5
H__21_410:13
H__20_410:0
H__14_410_409:0
H__22_410_409:0
H__19_410_409:0
H__16_410_409:0
H__17_410_409:0
H__21_410_409:8
H__20_410_409:6
H__13:1
H__7_363:1
H__2_363:1
H__11_363:1
H__7_363_362:1
H__2_363_362:1
H__4_363:1
H__3_363:1
H__5_363:0
H__0:2
H__9_363:1
H__8_363:1
H__10_363:0
H__4_363_362:1
H__3_363_362:1
H__5_363_362:8
H__23_410_409_410_409:0
H__9_363_362:6
H__8_363_362:0
H__10_363_362:1
H__11_363_362_363_362:0
H__1:1

BEG CHECK
 * After optims it became = 0 was 39281
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  1	ftime= 26999.4	ctime= 0.059
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 26999.4 CHECK TIME 0.107 TOTAL TIME 26999.5
VALUES H__0: 2, H__1: 1, H__10_363: 0, H__10_363_362: 1, H__11_363: 1, H__11_363_362_363_362: 0, H__12: 2, H__13: 1, H__14_410: 1, H__14_410_409: 0, H__15_410: 1, H__15_410_409: 0, H__16_410: 1, H__16_410_409: 0, H__17_410: 5, H__17_410_409: 0, H__19_410: 1, H__19_410_409: 0, H__20_410: 0, H__20_410_409: 6, H__21_410: 13, H__21_410_409: 8, H__22_410: 1, H__22_410_409: 0, H__23_410: 0, H__23_410_409_410_409: 0, H__2_363: 1, H__2_363_362: 1, H__3_363: 1, H__3_363_362: 1, H__4_363: 1, H__4_363_362: 1, H__5_363: 0, H__5_363_362: 8, H__7_363: 1, H__7_363_362: 1, H__8_363: 1, H__8_363_362: 0, H__9_363: 1, H__9_363_362: 6, 
RESULT = 2  
**ROUND 0 : 0 Round time:  27000.1 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  30000.5
Model building time (ms): 999.827
Solution time (ms):       27000.1
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 30.686
      model building time (s) ---------> 0.999
      solution time (s) ---------------> 27.0
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE PrivateKey*/
package PrivateKey{
  /* END PACKAGE PrivateKey*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:7*/
  
void HashMap_HashMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5337)/*HashMap.sk:7*/
  {
    self.elementData_HashMap = new Array_Object@array(length=DEFAULT_INITIAL_CAPACITY__HashMap_s5337);
    self.numPairs_HashMap = 0;
    self.capacity_HashMap = DEFAULT_INITIAL_CAPACITY__HashMap_s5337;
    _out = self;
    return;
  }
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5448 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s5447)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s5447 = 16;
  }
  /*HashMap.sk:115*/
  
void putVal_int_K_V (Object self, int hash, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5434)/*HashMap.sk:115*/
  {
    int hashMod = hash % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:117*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:121*/
    {
      bit _pac_sc_s340 = (node.hash_HashMap_Node) != hash;
      if(!(_pac_sc_s340))/*HashMap.sk:122*/
      {
        int _pac_sc_s340_s342 = 0;
        Stack@meta(_pac_sc_s340_s342);
        bit _pac_sc_s343 = 0;
        if((key.__cid) == _pac_sc_s340_s342)/*HashMap.sk:122*/
        {
          bit _pac_sc_s340_s345 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s345);
          _pac_sc_s343 = _pac_sc_s340_s345;
        }
        else
        {
          int _pac_sc_s340_s347 = 0;
          FileWriterr@meta(_pac_sc_s340_s347);
          bit _pac_sc_s348 = 0;
          if((key.__cid) == _pac_sc_s340_s347)/*HashMap.sk:122*/
          {
            bit _pac_sc_s340_s350 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s350);
            _pac_sc_s348 = _pac_sc_s340_s350;
          }
          else
          {
            int _pac_sc_s340_s352 = 0;
            SecureRandom@meta(_pac_sc_s340_s352);
            bit _pac_sc_s353 = 0;
            if((key.__cid) == _pac_sc_s340_s352)/*HashMap.sk:122*/
            {
              bit _pac_sc_s340_s355 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s355);
              _pac_sc_s353 = _pac_sc_s340_s355;
            }
            else
            {
              int _pac_sc_s340_s357 = 0;
              CryptoCipherFactory@meta(_pac_sc_s340_s357);
              bit _pac_sc_s358 = 0;
              if((key.__cid) == _pac_sc_s340_s357)/*HashMap.sk:122*/
              {
                bit _pac_sc_s340_s360 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s360);
                _pac_sc_s358 = _pac_sc_s340_s360;
              }
              else
              {
                int _pac_sc_s340_s362 = 0;
                ArrayList@meta(_pac_sc_s340_s362);
                bit _pac_sc_s363 = 0;
                if((key.__cid) == _pac_sc_s340_s362)/*HashMap.sk:122*/
                {
                  bit _pac_sc_s340_s365 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s365);
                  _pac_sc_s363 = _pac_sc_s340_s365;
                }
                else
                {
                  int _pac_sc_s340_s367 = 0;
                  Tester@meta(_pac_sc_s340_s367);
                  bit _pac_sc_s368 = 0;
                  if((key.__cid) == _pac_sc_s340_s367)/*HashMap.sk:122*/
                  {
                    bit _pac_sc_s340_s370 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s370);
                    _pac_sc_s368 = _pac_sc_s340_s370;
                  }
                  else
                  {
                    int _pac_sc_s340_s372 = 0;
                    System@meta(_pac_sc_s340_s372);
                    bit _pac_sc_s373 = 0;
                    if((key.__cid) == _pac_sc_s340_s372)/*HashMap.sk:122*/
                    {
                      bit _pac_sc_s340_s375 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s375);
                      _pac_sc_s373 = _pac_sc_s340_s375;
                    }
                    else
                    {
                      int _pac_sc_s340_s377 = 0;
                      Character@meta(_pac_sc_s340_s377);
                      bit _pac_sc_s378 = 0;
                      if((key.__cid) == _pac_sc_s340_s377)/*HashMap.sk:122*/
                      {
                        bit _pac_sc_s340_s380 = 0;
                        equals_Object@Character(key, node.key_HashMap_Node, _pac_sc_s340_s380);
                        _pac_sc_s378 = _pac_sc_s340_s380;
                      }
                      else
                      {
                        int _pac_sc_s340_s382 = 0;
                        TreeMap@meta(_pac_sc_s340_s382);
                        bit _pac_sc_s383 = 0;
                        if((key.__cid) == _pac_sc_s340_s382)/*HashMap.sk:122*/
                        {
                          bit _pac_sc_s340_s385 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s385);
                          _pac_sc_s383 = _pac_sc_s340_s385;
                        }
                        else
                        {
                          int _pac_sc_s340_s387 = 0;
                          ArrayDeque_DequeNode@meta(_pac_sc_s340_s387);
                          bit _pac_sc_s388 = 0;
                          if((key.__cid) == _pac_sc_s340_s387)/*HashMap.sk:122*/
                          {
                            bit _pac_sc_s340_s390 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s390);
                            _pac_sc_s388 = _pac_sc_s340_s390;
                          }
                          else
                          {
                            int _pac_sc_s340_s392 = 0;
                            IvParameterSpec@meta(_pac_sc_s340_s392);
                            bit _pac_sc_s393 = 0;
                            if((key.__cid) == _pac_sc_s340_s392)/*HashMap.sk:122*/
                            {
                              bit _pac_sc_s340_s395 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s395);
                              _pac_sc_s393 = _pac_sc_s340_s395;
                            }
                            else
                            {
                              int _pac_sc_s340_s397 = 0;
                              Assert@meta(_pac_sc_s340_s397);
                              bit _pac_sc_s398 = 0;
                              if((key.__cid) == _pac_sc_s340_s397)/*HashMap.sk:122*/
                              {
                                bit _pac_sc_s340_s400 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s400);
                                _pac_sc_s398 = _pac_sc_s340_s400;
                              }
                              else
                              {
                                int _pac_sc_s340_s402 = 0;
                                CipherFactory@meta(_pac_sc_s340_s402);
                                bit _pac_sc_s403 = 0;
                                if((key.__cid) == _pac_sc_s340_s402)/*HashMap.sk:122*/
                                {
                                  bit _pac_sc_s340_s405 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s405);
                                  _pac_sc_s403 = _pac_sc_s340_s405;
                                }
                                else
                                {
                                  int _pac_sc_s340_s407 = 0;
                                  SecretKeySpec@meta(_pac_sc_s340_s407);
                                  bit _pac_sc_s408 = 0;
                                  if((key.__cid) == _pac_sc_s340_s407)/*HashMap.sk:122*/
                                  {
                                    bit _pac_sc_s340_s410 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s410);
                                    _pac_sc_s408 = _pac_sc_s340_s410;
                                  }
                                  else
                                  {
                                    int _pac_sc_s340_s412 = 0;
                                    BufferedWriter@meta(_pac_sc_s340_s412);
                                    bit _pac_sc_s413 = 0;
                                    if((key.__cid) == _pac_sc_s340_s412)/*HashMap.sk:122*/
                                    {
                                      bit _pac_sc_s340_s415 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s415);
                                      _pac_sc_s413 = _pac_sc_s340_s415;
                                    }
                                    else
                                    {
                                      int _pac_sc_s340_s417 = 0;
                                      AbstractQueue@meta(_pac_sc_s340_s417);
                                      bit _pac_sc_s418 = 0;
                                      if((key.__cid) == _pac_sc_s340_s417)/*HashMap.sk:122*/
                                      {
                                        bit _pac_sc_s340_s420 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s420);
                                        _pac_sc_s418 = _pac_sc_s340_s420;
                                      }
                                      else
                                      {
                                        int _pac_sc_s340_s422 = 0;
                                        ArrayDeque@meta(_pac_sc_s340_s422);
                                        bit _pac_sc_s423 = 0;
                                        if((key.__cid) == _pac_sc_s340_s422)/*HashMap.sk:122*/
                                        {
                                          bit _pac_sc_s340_s425 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s425);
                                          _pac_sc_s423 = _pac_sc_s340_s425;
                                        }
                                        else
                                        {
                                          int _pac_sc_s340_s427 = 0;
                                          LinkedList@meta(_pac_sc_s340_s427);
                                          bit _pac_sc_s428 = 0;
                                          if((key.__cid) == _pac_sc_s340_s427)/*HashMap.sk:122*/
                                          {
                                            bit _pac_sc_s340_s430 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s430);
                                            _pac_sc_s428 = _pac_sc_s340_s430;
                                          }
                                          else
                                          {
                                            int _pac_sc_s340_s432 = 0;
                                            BufferedReader@meta(_pac_sc_s340_s432);
                                            bit _pac_sc_s433 = 0;
                                            if((key.__cid) == _pac_sc_s340_s432)/*HashMap.sk:122*/
                                            {
                                              bit _pac_sc_s340_s435 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s435);
                                              _pac_sc_s433 = _pac_sc_s340_s435;
                                            }
                                            else
                                            {
                                              int _pac_sc_s340_s437 = 0;
                                              Mac@meta(_pac_sc_s340_s437);
                                              bit _pac_sc_s438 = 0;
                                              if((key.__cid) == _pac_sc_s340_s437)/*HashMap.sk:122*/
                                              {
                                                bit _pac_sc_s340_s440 = 0;
                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s440);
                                                _pac_sc_s438 = _pac_sc_s340_s440;
                                              }
                                              else
                                              {
                                                int _pac_sc_s340_s442 = 0;
                                                KeyStore@meta(_pac_sc_s340_s442);
                                                bit _pac_sc_s443 = 0;
                                                if((key.__cid) == _pac_sc_s340_s442)/*HashMap.sk:122*/
                                                {
                                                  bit _pac_sc_s340_s445 = 0;
                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s445);
                                                  _pac_sc_s443 = _pac_sc_s340_s445;
                                                }
                                                else
                                                {
                                                  int _pac_sc_s340_s447 = 0;
                                                  StringBuilder@meta(_pac_sc_s340_s447);
                                                  bit _pac_sc_s448 = 0;
                                                  if((key.__cid) == _pac_sc_s340_s447)/*HashMap.sk:122*/
                                                  {
                                                    bit _pac_sc_s340_s450 = 0;
                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s450);
                                                    _pac_sc_s448 = _pac_sc_s340_s450;
                                                  }
                                                  else
                                                  {
                                                    int _pac_sc_s340_s452 = 0;
                                                    HashMap_Node@meta(_pac_sc_s340_s452);
                                                    bit _pac_sc_s453 = 0;
                                                    if((key.__cid) == _pac_sc_s340_s452)/*HashMap.sk:122*/
                                                    {
                                                      bit _pac_sc_s340_s455 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s455);
                                                      _pac_sc_s453 = _pac_sc_s340_s455;
                                                    }
                                                    else
                                                    {
                                                      int _pac_sc_s340_s457 = 0;
                                                      KerberosKey@meta(_pac_sc_s340_s457);
                                                      bit _pac_sc_s458 = 0;
                                                      if((key.__cid) == _pac_sc_s340_s457)/*HashMap.sk:122*/
                                                      {
                                                        bit _pac_sc_s340_s460 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s460);
                                                        _pac_sc_s458 = _pac_sc_s340_s460;
                                                      }
                                                      else
                                                      {
                                                        int _pac_sc_s340_s462 = 0;
                                                        JCECipher@meta(_pac_sc_s340_s462);
                                                        bit _pac_sc_s463 = 0;
                                                        if((key.__cid) == _pac_sc_s340_s462)/*HashMap.sk:122*/
                                                        {
                                                          bit _pac_sc_s340_s465 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s465);
                                                          _pac_sc_s463 = _pac_sc_s340_s465;
                                                        }
                                                        else
                                                        {
                                                          int _pac_sc_s340_s467 = 0;
                                                          FileReaderr@meta(_pac_sc_s340_s467);
                                                          bit _pac_sc_s468 = 0;
                                                          if((key.__cid) == _pac_sc_s340_s467)/*HashMap.sk:122*/
                                                          {
                                                            bit _pac_sc_s340_s470 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s470);
                                                            _pac_sc_s468 = _pac_sc_s340_s470;
                                                          }
                                                          else
                                                          {
                                                            int _pac_sc_s340_s472 = 0;
                                                            PrintStream@meta(_pac_sc_s340_s472);
                                                            bit _pac_sc_s473 = 0;
                                                            if((key.__cid) == _pac_sc_s340_s472)/*HashMap.sk:122*/
                                                            {
                                                              bit _pac_sc_s340_s475 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s475);
                                                              _pac_sc_s473 = _pac_sc_s340_s475;
                                                            }
                                                            else
                                                            {
                                                              int _pac_sc_s340_s477 = 0;
                                                              Cipher@meta(_pac_sc_s340_s477);
                                                              bit _pac_sc_s478 = 0;
                                                              if((key.__cid) == _pac_sc_s340_s477)/*HashMap.sk:122*/
                                                              {
                                                                bit _pac_sc_s340_s480 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s480);
                                                                _pac_sc_s478 = _pac_sc_s340_s480;
                                                              }
                                                              else
                                                              {
                                                                int _pac_sc_s340_s482 = 0;
                                                                Boolean@meta(_pac_sc_s340_s482);
                                                                bit _pac_sc_s483 = 0;
                                                                if((key.__cid) == _pac_sc_s340_s482)/*HashMap.sk:122*/
                                                                {
                                                                  bit _pac_sc_s340_s485 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s485);
                                                                  _pac_sc_s483 = _pac_sc_s340_s485;
                                                                }
                                                                else
                                                                {
                                                                  int _pac_sc_s340_s487 = 0;
                                                                  Collections@meta(_pac_sc_s340_s487);
                                                                  bit _pac_sc_s488 = 0;
                                                                  if((key.__cid) == _pac_sc_s340_s487)/*HashMap.sk:122*/
                                                                  {
                                                                    bit _pac_sc_s340_s490 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s490);
                                                                    _pac_sc_s488 = _pac_sc_s340_s490;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _pac_sc_s340_s492 = 0;
                                                                    Float@meta(_pac_sc_s340_s492);
                                                                    bit _pac_sc_s493 = 0;
                                                                    if((key.__cid) == _pac_sc_s340_s492)/*HashMap.sk:122*/
                                                                    {
                                                                      bit _pac_sc_s340_s495 = 0;
                                                                      equals_Object@Float(key, node.key_HashMap_Node, _pac_sc_s340_s495);
                                                                      _pac_sc_s493 = _pac_sc_s340_s495;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _pac_sc_s340_s497 = 0;
                                                                      Number@meta(_pac_sc_s340_s497);
                                                                      bit _pac_sc_s498 = 0;
                                                                      if((key.__cid) == _pac_sc_s340_s497)/*HashMap.sk:122*/
                                                                      {
                                                                        bit _pac_sc_s340_s500 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s500);
                                                                        _pac_sc_s498 = _pac_sc_s340_s500;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _pac_sc_s340_s502 = 0;
                                                                        Scanner@meta(_pac_sc_s340_s502);
                                                                        bit _pac_sc_s503 = 0;
                                                                        if((key.__cid) == _pac_sc_s340_s502)/*HashMap.sk:122*/
                                                                        {
                                                                          bit _pac_sc_s340_s505 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s505);
                                                                          _pac_sc_s503 = _pac_sc_s340_s505;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _pac_sc_s340_s507 = 0;
                                                                          StringBuffer@meta(_pac_sc_s340_s507);
                                                                          bit _pac_sc_s508 = 0;
                                                                          if((key.__cid) == _pac_sc_s340_s507)/*HashMap.sk:122*/
                                                                          {
                                                                            bit _pac_sc_s340_s510 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s510);
                                                                            _pac_sc_s508 = _pac_sc_s340_s510;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _pac_sc_s340_s512 = 0;
                                                                            Utils@meta(_pac_sc_s340_s512);
                                                                            bit _pac_sc_s513 = 0;
                                                                            if((key.__cid) == _pac_sc_s340_s512)/*HashMap.sk:122*/
                                                                            {
                                                                              bit _pac_sc_s340_s515 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s515);
                                                                              _pac_sc_s513 = _pac_sc_s340_s515;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _pac_sc_s340_s517 = 0;
                                                                              Integer@meta(_pac_sc_s340_s517);
                                                                              bit _pac_sc_s518 = 0;
                                                                              if((key.__cid) == _pac_sc_s340_s517)/*HashMap.sk:122*/
                                                                              {
                                                                                bit _pac_sc_s340_s520 = 0;
                                                                                equals_Object@Integer(key, node.key_HashMap_Node, _pac_sc_s340_s520);
                                                                                _pac_sc_s518 = _pac_sc_s340_s520;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _pac_sc_s340_s522 = 0;
                                                                                TreeSet@meta(_pac_sc_s340_s522);
                                                                                bit _pac_sc_s523 = 0;
                                                                                if((key.__cid) == _pac_sc_s340_s522)/*HashMap.sk:122*/
                                                                                {
                                                                                  bit _pac_sc_s340_s525 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s525);
                                                                                  _pac_sc_s523 = _pac_sc_s340_s525;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _pac_sc_s340_s527 = 0;
                                                                                  KeyGenerator@meta(_pac_sc_s340_s527);
                                                                                  bit _pac_sc_s528 = 0;
                                                                                  if((key.__cid) == _pac_sc_s340_s527)/*HashMap.sk:122*/
                                                                                  {
                                                                                    bit _pac_sc_s340_s530 = 0;
                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s530);
                                                                                    _pac_sc_s528 = _pac_sc_s340_s530;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int _pac_sc_s340_s532 = 0;
                                                                                    OpenSSLCipher@meta(_pac_sc_s340_s532);
                                                                                    bit _pac_sc_s533 = 0;
                                                                                    if((key.__cid) == _pac_sc_s340_s532)/*HashMap.sk:122*/
                                                                                    {
                                                                                      bit _pac_sc_s340_s535 = 0;
                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s535);
                                                                                      _pac_sc_s533 = _pac_sc_s340_s535;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int _pac_sc_s340_s537 = 0;
                                                                                      String@meta(_pac_sc_s340_s537);
                                                                                      bit _pac_sc_s538 = 0;
                                                                                      if((key.__cid) == _pac_sc_s340_s537)/*HashMap.sk:122*/
                                                                                      {
                                                                                        bit _pac_sc_s340_s540 = 0;
                                                                                        equals_Object@String(key, node.key_HashMap_Node, _pac_sc_s340_s540);
                                                                                        _pac_sc_s538 = _pac_sc_s340_s540;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int _pac_sc_s340_s542 = 0;
                                                                                        Properties@meta(_pac_sc_s340_s542);
                                                                                        bit _pac_sc_s543 = 0;
                                                                                        if((key.__cid) == _pac_sc_s340_s542)/*HashMap.sk:122*/
                                                                                        {
                                                                                          bit _pac_sc_s340_s545 = 0;
                                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s545);
                                                                                          _pac_sc_s543 = _pac_sc_s340_s545;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int _pac_sc_s340_s547 = 0;
                                                                                          File@meta(_pac_sc_s340_s547);
                                                                                          bit _pac_sc_s548 = 0;
                                                                                          if((key.__cid) == _pac_sc_s340_s547)/*HashMap.sk:122*/
                                                                                          {
                                                                                            bit _pac_sc_s340_s550 = 0;
                                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s550);
                                                                                            _pac_sc_s548 = _pac_sc_s340_s550;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int _pac_sc_s340_s552 = 0;
                                                                                            CryptoCipherFactory_CipherProvider@meta(_pac_sc_s340_s552);
                                                                                            bit _pac_sc_s553 = 0;
                                                                                            if((key.__cid) == _pac_sc_s340_s552)/*HashMap.sk:122*/
                                                                                            {
                                                                                              bit _pac_sc_s340_s555 = 0;
                                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s555);
                                                                                              _pac_sc_s553 = _pac_sc_s340_s555;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int _pac_sc_s340_s557 = 0;
                                                                                              HashSet@meta(_pac_sc_s340_s557);
                                                                                              bit _pac_sc_s558 = 0;
                                                                                              if((key.__cid) == _pac_sc_s340_s557)/*HashMap.sk:122*/
                                                                                              {
                                                                                                bit _pac_sc_s340_s560 = 0;
                                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s560);
                                                                                                _pac_sc_s558 = _pac_sc_s340_s560;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int _pac_sc_s340_s562 = 0;
                                                                                                FileOutputStream@meta(_pac_sc_s340_s562);
                                                                                                bit _pac_sc_s563 = 0;
                                                                                                if((key.__cid) == _pac_sc_s340_s562)/*HashMap.sk:122*/
                                                                                                {
                                                                                                  bit _pac_sc_s340_s565 = 0;
                                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s565);
                                                                                                  _pac_sc_s563 = _pac_sc_s340_s565;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  int _pac_sc_s340_s567 = 0;
                                                                                                  Arrays@meta(_pac_sc_s340_s567);
                                                                                                  bit _pac_sc_s568 = 0;
                                                                                                  if((key.__cid) == _pac_sc_s340_s567)/*HashMap.sk:122*/
                                                                                                  {
                                                                                                    bit _pac_sc_s340_s570 = 0;
                                                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s570);
                                                                                                    _pac_sc_s568 = _pac_sc_s340_s570;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    int _pac_sc_s340_s572 = 0;
                                                                                                    Object@meta(_pac_sc_s340_s572);
                                                                                                    bit _pac_sc_s573 = 0;
                                                                                                    if((key.__cid) == _pac_sc_s340_s572)/*HashMap.sk:122*/
                                                                                                    {
                                                                                                      bit _pac_sc_s340_s575 = 0;
                                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s340_s575);
                                                                                                      _pac_sc_s573 = _pac_sc_s340_s575;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      _pac_sc_s573 = 0;
                                                                                                    }
                                                                                                    _pac_sc_s568 = _pac_sc_s573;
                                                                                                  }
                                                                                                  _pac_sc_s563 = _pac_sc_s568;
                                                                                                }
                                                                                                _pac_sc_s558 = _pac_sc_s563;
                                                                                              }
                                                                                              _pac_sc_s553 = _pac_sc_s558;
                                                                                            }
                                                                                            _pac_sc_s548 = _pac_sc_s553;
                                                                                          }
                                                                                          _pac_sc_s543 = _pac_sc_s548;
                                                                                        }
                                                                                        _pac_sc_s538 = _pac_sc_s543;
                                                                                      }
                                                                                      _pac_sc_s533 = _pac_sc_s538;
                                                                                    }
                                                                                    _pac_sc_s528 = _pac_sc_s533;
                                                                                  }
                                                                                  _pac_sc_s523 = _pac_sc_s528;
                                                                                }
                                                                                _pac_sc_s518 = _pac_sc_s523;
                                                                              }
                                                                              _pac_sc_s513 = _pac_sc_s518;
                                                                            }
                                                                            _pac_sc_s508 = _pac_sc_s513;
                                                                          }
                                                                          _pac_sc_s503 = _pac_sc_s508;
                                                                        }
                                                                        _pac_sc_s498 = _pac_sc_s503;
                                                                      }
                                                                      _pac_sc_s493 = _pac_sc_s498;
                                                                    }
                                                                    _pac_sc_s488 = _pac_sc_s493;
                                                                  }
                                                                  _pac_sc_s483 = _pac_sc_s488;
                                                                }
                                                                _pac_sc_s478 = _pac_sc_s483;
                                                              }
                                                              _pac_sc_s473 = _pac_sc_s478;
                                                            }
                                                            _pac_sc_s468 = _pac_sc_s473;
                                                          }
                                                          _pac_sc_s463 = _pac_sc_s468;
                                                        }
                                                        _pac_sc_s458 = _pac_sc_s463;
                                                      }
                                                      _pac_sc_s453 = _pac_sc_s458;
                                                    }
                                                    _pac_sc_s448 = _pac_sc_s453;
                                                  }
                                                  _pac_sc_s443 = _pac_sc_s448;
                                                }
                                                _pac_sc_s438 = _pac_sc_s443;
                                              }
                                              _pac_sc_s433 = _pac_sc_s438;
                                            }
                                            _pac_sc_s428 = _pac_sc_s433;
                                          }
                                          _pac_sc_s423 = _pac_sc_s428;
                                        }
                                        _pac_sc_s418 = _pac_sc_s423;
                                      }
                                      _pac_sc_s413 = _pac_sc_s418;
                                    }
                                    _pac_sc_s408 = _pac_sc_s413;
                                  }
                                  _pac_sc_s403 = _pac_sc_s408;
                                }
                                _pac_sc_s398 = _pac_sc_s403;
                              }
                              _pac_sc_s393 = _pac_sc_s398;
                            }
                            _pac_sc_s388 = _pac_sc_s393;
                          }
                          _pac_sc_s383 = _pac_sc_s388;
                        }
                        _pac_sc_s378 = _pac_sc_s383;
                      }
                      _pac_sc_s373 = _pac_sc_s378;
                    }
                    _pac_sc_s368 = _pac_sc_s373;
                  }
                  _pac_sc_s363 = _pac_sc_s368;
                }
                _pac_sc_s358 = _pac_sc_s363;
              }
              _pac_sc_s353 = _pac_sc_s358;
            }
            _pac_sc_s348 = _pac_sc_s353;
          }
          _pac_sc_s343 = _pac_sc_s348;
        }
        _pac_sc_s340 = !(_pac_sc_s343);
      }
      if(_pac_sc_s340)/*HashMap.sk:122*/
      {
        resize_int@HashMap(self, hash + 1, self0__HashMap_Node_s5434);
        hashMod = hash % (self.capacity_HashMap);
        if(hashMod < 0)/*HashMap.sk:125*/
        {
          hashMod = hashMod + (self.capacity_HashMap);
        }
        node = self.elementData_HashMap.A[hashMod];
        self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
      }
      int _out_s577 = 0;
      HashMap_Node@meta(_out_s577);
      Object@Object _out_s579 = null;
      HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s577), self, key, value, hash, _out_s579, self0__HashMap_Node_s5434)//{};
      self.elementData_HashMap.A[hashMod] = _out_s579;
      if(node != (null))/*HashMap.sk:132*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
      else
      {
        _out = null;
        return;
      }
    }
    int _out_s581 = 0;
    HashMap_Node@meta(_out_s581);
    Object@Object _out_s583 = null;
    HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s581), self, key, value, hash, _out_s583, self0__HashMap_Node_s5434)//{};
    self.elementData_HashMap.A[hashMod] = _out_s583;
    self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
    _out = null;
    return;
  }
  /*HashMap.sk:95*/
  
void put_K_V (Object self, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s5433)/*HashMap.sk:95*/
  {
    int h_s104 = 0;
    Stack@meta(h_s104);
    int _pac_sc_s105 = 0;
    if((key.__cid) == h_s104)/*HashMap.sk:96*/
    {
      int h_s107 = 0;
      hashCode@Object(key, h_s107);
      _pac_sc_s105 = h_s107;
    }
    else
    {
      int h_s109 = 0;
      FileWriterr@meta(h_s109);
      int _pac_sc_s110 = 0;
      if((key.__cid) == h_s109)/*HashMap.sk:96*/
      {
        int h_s112 = 0;
        hashCode@Object(key, h_s112);
        _pac_sc_s110 = h_s112;
      }
      else
      {
        int h_s114 = 0;
        SecureRandom@meta(h_s114);
        int _pac_sc_s115 = 0;
        if((key.__cid) == h_s114)/*HashMap.sk:96*/
        {
          int h_s117 = 0;
          hashCode@Object(key, h_s117);
          _pac_sc_s115 = h_s117;
        }
        else
        {
          int h_s119 = 0;
          CryptoCipherFactory@meta(h_s119);
          int _pac_sc_s120 = 0;
          if((key.__cid) == h_s119)/*HashMap.sk:96*/
          {
            int h_s122 = 0;
            hashCode@Object(key, h_s122);
            _pac_sc_s120 = h_s122;
          }
          else
          {
            int h_s124 = 0;
            ArrayList@meta(h_s124);
            int _pac_sc_s125 = 0;
            if((key.__cid) == h_s124)/*HashMap.sk:96*/
            {
              int h_s127 = 0;
              hashCode@Object(key, h_s127);
              _pac_sc_s125 = h_s127;
            }
            else
            {
              int h_s129 = 0;
              Tester@meta(h_s129);
              int _pac_sc_s130 = 0;
              if((key.__cid) == h_s129)/*HashMap.sk:96*/
              {
                int h_s132 = 0;
                hashCode@Object(key, h_s132);
                _pac_sc_s130 = h_s132;
              }
              else
              {
                int h_s134 = 0;
                System@meta(h_s134);
                int _pac_sc_s135 = 0;
                if((key.__cid) == h_s134)/*HashMap.sk:96*/
                {
                  int h_s137 = 0;
                  hashCode@Object(key, h_s137);
                  _pac_sc_s135 = h_s137;
                }
                else
                {
                  int h_s139 = 0;
                  Character@meta(h_s139);
                  int _pac_sc_s140 = 0;
                  if((key.__cid) == h_s139)/*HashMap.sk:96*/
                  {
                    int h_s142 = 0;
                    hashCode@Object(key, h_s142);
                    _pac_sc_s140 = h_s142;
                  }
                  else
                  {
                    int h_s144 = 0;
                    TreeMap@meta(h_s144);
                    int _pac_sc_s145 = 0;
                    if((key.__cid) == h_s144)/*HashMap.sk:96*/
                    {
                      int h_s147 = 0;
                      hashCode@Object(key, h_s147);
                      _pac_sc_s145 = h_s147;
                    }
                    else
                    {
                      int h_s149 = 0;
                      ArrayDeque_DequeNode@meta(h_s149);
                      int _pac_sc_s150 = 0;
                      if((key.__cid) == h_s149)/*HashMap.sk:96*/
                      {
                        int h_s152 = 0;
                        hashCode@Object(key, h_s152);
                        _pac_sc_s150 = h_s152;
                      }
                      else
                      {
                        int h_s154 = 0;
                        IvParameterSpec@meta(h_s154);
                        int _pac_sc_s155 = 0;
                        if((key.__cid) == h_s154)/*HashMap.sk:96*/
                        {
                          int h_s157 = 0;
                          hashCode@Object(key, h_s157);
                          _pac_sc_s155 = h_s157;
                        }
                        else
                        {
                          int h_s159 = 0;
                          Assert@meta(h_s159);
                          int _pac_sc_s160 = 0;
                          if((key.__cid) == h_s159)/*HashMap.sk:96*/
                          {
                            int h_s162 = 0;
                            hashCode@Object(key, h_s162);
                            _pac_sc_s160 = h_s162;
                          }
                          else
                          {
                            int h_s164 = 0;
                            CipherFactory@meta(h_s164);
                            int _pac_sc_s165 = 0;
                            if((key.__cid) == h_s164)/*HashMap.sk:96*/
                            {
                              int h_s167 = 0;
                              hashCode@Object(key, h_s167);
                              _pac_sc_s165 = h_s167;
                            }
                            else
                            {
                              int h_s169 = 0;
                              SecretKeySpec@meta(h_s169);
                              int _pac_sc_s170 = 0;
                              if((key.__cid) == h_s169)/*HashMap.sk:96*/
                              {
                                int h_s172 = 0;
                                hashCode@Object(key, h_s172);
                                _pac_sc_s170 = h_s172;
                              }
                              else
                              {
                                int h_s174 = 0;
                                BufferedWriter@meta(h_s174);
                                int _pac_sc_s175 = 0;
                                if((key.__cid) == h_s174)/*HashMap.sk:96*/
                                {
                                  int h_s177 = 0;
                                  hashCode@Object(key, h_s177);
                                  _pac_sc_s175 = h_s177;
                                }
                                else
                                {
                                  int h_s179 = 0;
                                  AbstractQueue@meta(h_s179);
                                  int _pac_sc_s180 = 0;
                                  if((key.__cid) == h_s179)/*HashMap.sk:96*/
                                  {
                                    int h_s182 = 0;
                                    hashCode@Object(key, h_s182);
                                    _pac_sc_s180 = h_s182;
                                  }
                                  else
                                  {
                                    int h_s184 = 0;
                                    ArrayDeque@meta(h_s184);
                                    int _pac_sc_s185 = 0;
                                    if((key.__cid) == h_s184)/*HashMap.sk:96*/
                                    {
                                      int h_s187 = 0;
                                      hashCode@Object(key, h_s187);
                                      _pac_sc_s185 = h_s187;
                                    }
                                    else
                                    {
                                      int h_s189 = 0;
                                      LinkedList@meta(h_s189);
                                      int _pac_sc_s190 = 0;
                                      if((key.__cid) == h_s189)/*HashMap.sk:96*/
                                      {
                                        int h_s192 = 0;
                                        hashCode@Object(key, h_s192);
                                        _pac_sc_s190 = h_s192;
                                      }
                                      else
                                      {
                                        int h_s194 = 0;
                                        BufferedReader@meta(h_s194);
                                        int _pac_sc_s195 = 0;
                                        if((key.__cid) == h_s194)/*HashMap.sk:96*/
                                        {
                                          int h_s197 = 0;
                                          hashCode@Object(key, h_s197);
                                          _pac_sc_s195 = h_s197;
                                        }
                                        else
                                        {
                                          int h_s199 = 0;
                                          Mac@meta(h_s199);
                                          int _pac_sc_s200 = 0;
                                          if((key.__cid) == h_s199)/*HashMap.sk:96*/
                                          {
                                            int h_s202 = 0;
                                            hashCode@Object(key, h_s202);
                                            _pac_sc_s200 = h_s202;
                                          }
                                          else
                                          {
                                            int h_s204 = 0;
                                            KeyStore@meta(h_s204);
                                            int _pac_sc_s205 = 0;
                                            if((key.__cid) == h_s204)/*HashMap.sk:96*/
                                            {
                                              int h_s207 = 0;
                                              hashCode@Object(key, h_s207);
                                              _pac_sc_s205 = h_s207;
                                            }
                                            else
                                            {
                                              int h_s209 = 0;
                                              StringBuilder@meta(h_s209);
                                              int _pac_sc_s210 = 0;
                                              if((key.__cid) == h_s209)/*HashMap.sk:96*/
                                              {
                                                int h_s212 = 0;
                                                hashCode@Object(key, h_s212);
                                                _pac_sc_s210 = h_s212;
                                              }
                                              else
                                              {
                                                int h_s214 = 0;
                                                HashMap_Node@meta(h_s214);
                                                int _pac_sc_s215 = 0;
                                                if((key.__cid) == h_s214)/*HashMap.sk:96*/
                                                {
                                                  int h_s217 = 0;
                                                  hashCode@Object(key, h_s217);
                                                  _pac_sc_s215 = h_s217;
                                                }
                                                else
                                                {
                                                  int h_s219 = 0;
                                                  KerberosKey@meta(h_s219);
                                                  int _pac_sc_s220 = 0;
                                                  if((key.__cid) == h_s219)/*HashMap.sk:96*/
                                                  {
                                                    int h_s222 = 0;
                                                    hashCode@Object(key, h_s222);
                                                    _pac_sc_s220 = h_s222;
                                                  }
                                                  else
                                                  {
                                                    int h_s224 = 0;
                                                    JCECipher@meta(h_s224);
                                                    int _pac_sc_s225 = 0;
                                                    if((key.__cid) == h_s224)/*HashMap.sk:96*/
                                                    {
                                                      int h_s227 = 0;
                                                      hashCode@Object(key, h_s227);
                                                      _pac_sc_s225 = h_s227;
                                                    }
                                                    else
                                                    {
                                                      int h_s229 = 0;
                                                      FileReaderr@meta(h_s229);
                                                      int _pac_sc_s230 = 0;
                                                      if((key.__cid) == h_s229)/*HashMap.sk:96*/
                                                      {
                                                        int h_s232 = 0;
                                                        hashCode@Object(key, h_s232);
                                                        _pac_sc_s230 = h_s232;
                                                      }
                                                      else
                                                      {
                                                        int h_s234 = 0;
                                                        PrintStream@meta(h_s234);
                                                        int _pac_sc_s235 = 0;
                                                        if((key.__cid) == h_s234)/*HashMap.sk:96*/
                                                        {
                                                          int h_s237 = 0;
                                                          hashCode@Object(key, h_s237);
                                                          _pac_sc_s235 = h_s237;
                                                        }
                                                        else
                                                        {
                                                          int h_s239 = 0;
                                                          Cipher@meta(h_s239);
                                                          int _pac_sc_s240 = 0;
                                                          if((key.__cid) == h_s239)/*HashMap.sk:96*/
                                                          {
                                                            int h_s242 = 0;
                                                            hashCode@Object(key, h_s242);
                                                            _pac_sc_s240 = h_s242;
                                                          }
                                                          else
                                                          {
                                                            int h_s244 = 0;
                                                            Boolean@meta(h_s244);
                                                            int _pac_sc_s245 = 0;
                                                            if((key.__cid) == h_s244)/*HashMap.sk:96*/
                                                            {
                                                              int h_s247 = 0;
                                                              hashCode@Object(key, h_s247);
                                                              _pac_sc_s245 = h_s247;
                                                            }
                                                            else
                                                            {
                                                              int h_s249 = 0;
                                                              Collections@meta(h_s249);
                                                              int _pac_sc_s250 = 0;
                                                              if((key.__cid) == h_s249)/*HashMap.sk:96*/
                                                              {
                                                                int h_s252 = 0;
                                                                hashCode@Object(key, h_s252);
                                                                _pac_sc_s250 = h_s252;
                                                              }
                                                              else
                                                              {
                                                                int h_s254 = 0;
                                                                Float@meta(h_s254);
                                                                int _pac_sc_s255 = 0;
                                                                if((key.__cid) == h_s254)/*HashMap.sk:96*/
                                                                {
                                                                  int h_s257 = 0;
                                                                  hashCode@Object(key, h_s257);
                                                                  _pac_sc_s255 = h_s257;
                                                                }
                                                                else
                                                                {
                                                                  int h_s259 = 0;
                                                                  Number@meta(h_s259);
                                                                  int _pac_sc_s260 = 0;
                                                                  if((key.__cid) == h_s259)/*HashMap.sk:96*/
                                                                  {
                                                                    int h_s262 = 0;
                                                                    hashCode@Object(key, h_s262);
                                                                    _pac_sc_s260 = h_s262;
                                                                  }
                                                                  else
                                                                  {
                                                                    int h_s264 = 0;
                                                                    Scanner@meta(h_s264);
                                                                    int _pac_sc_s265 = 0;
                                                                    if((key.__cid) == h_s264)/*HashMap.sk:96*/
                                                                    {
                                                                      int h_s267 = 0;
                                                                      hashCode@Object(key, h_s267);
                                                                      _pac_sc_s265 = h_s267;
                                                                    }
                                                                    else
                                                                    {
                                                                      int h_s269 = 0;
                                                                      StringBuffer@meta(h_s269);
                                                                      int _pac_sc_s270 = 0;
                                                                      if((key.__cid) == h_s269)/*HashMap.sk:96*/
                                                                      {
                                                                        int h_s272 = 0;
                                                                        hashCode@Object(key, h_s272);
                                                                        _pac_sc_s270 = h_s272;
                                                                      }
                                                                      else
                                                                      {
                                                                        int h_s274 = 0;
                                                                        Utils@meta(h_s274);
                                                                        int _pac_sc_s275 = 0;
                                                                        if((key.__cid) == h_s274)/*HashMap.sk:96*/
                                                                        {
                                                                          int h_s277 = 0;
                                                                          hashCode@Object(key, h_s277);
                                                                          _pac_sc_s275 = h_s277;
                                                                        }
                                                                        else
                                                                        {
                                                                          int h_s279 = 0;
                                                                          Integer@meta(h_s279);
                                                                          int _pac_sc_s280 = 0;
                                                                          if((key.__cid) == h_s279)/*HashMap.sk:96*/
                                                                          {
                                                                            int h_s282 = 0;
                                                                            hashCode@Integer(key, h_s282);
                                                                            _pac_sc_s280 = h_s282;
                                                                          }
                                                                          else
                                                                          {
                                                                            int h_s284 = 0;
                                                                            TreeSet@meta(h_s284);
                                                                            int _pac_sc_s285 = 0;
                                                                            if((key.__cid) == h_s284)/*HashMap.sk:96*/
                                                                            {
                                                                              int h_s287 = 0;
                                                                              hashCode@Object(key, h_s287);
                                                                              _pac_sc_s285 = h_s287;
                                                                            }
                                                                            else
                                                                            {
                                                                              int h_s289 = 0;
                                                                              KeyGenerator@meta(h_s289);
                                                                              int _pac_sc_s290 = 0;
                                                                              if((key.__cid) == h_s289)/*HashMap.sk:96*/
                                                                              {
                                                                                int h_s292 = 0;
                                                                                hashCode@Object(key, h_s292);
                                                                                _pac_sc_s290 = h_s292;
                                                                              }
                                                                              else
                                                                              {
                                                                                int h_s294 = 0;
                                                                                OpenSSLCipher@meta(h_s294);
                                                                                int _pac_sc_s295 = 0;
                                                                                if((key.__cid) == h_s294)/*HashMap.sk:96*/
                                                                                {
                                                                                  int h_s297 = 0;
                                                                                  hashCode@Object(key, h_s297);
                                                                                  _pac_sc_s295 = h_s297;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int h_s299 = 0;
                                                                                  String@meta(h_s299);
                                                                                  int _pac_sc_s300 = 0;
                                                                                  if((key.__cid) == h_s299)/*HashMap.sk:96*/
                                                                                  {
                                                                                    int h_s302 = 0;
                                                                                    hashCode@String(key, h_s302);
                                                                                    _pac_sc_s300 = h_s302;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int h_s304 = 0;
                                                                                    Properties@meta(h_s304);
                                                                                    int _pac_sc_s305 = 0;
                                                                                    if((key.__cid) == h_s304)/*HashMap.sk:96*/
                                                                                    {
                                                                                      int h_s307 = 0;
                                                                                      hashCode@Object(key, h_s307);
                                                                                      _pac_sc_s305 = h_s307;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int h_s309 = 0;
                                                                                      File@meta(h_s309);
                                                                                      int _pac_sc_s310 = 0;
                                                                                      if((key.__cid) == h_s309)/*HashMap.sk:96*/
                                                                                      {
                                                                                        int h_s312 = 0;
                                                                                        hashCode@Object(key, h_s312);
                                                                                        _pac_sc_s310 = h_s312;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int h_s314 = 0;
                                                                                        CryptoCipherFactory_CipherProvider@meta(h_s314);
                                                                                        int _pac_sc_s315 = 0;
                                                                                        if((key.__cid) == h_s314)/*HashMap.sk:96*/
                                                                                        {
                                                                                          int h_s317 = 0;
                                                                                          hashCode@Object(key, h_s317);
                                                                                          _pac_sc_s315 = h_s317;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int h_s319 = 0;
                                                                                          HashSet@meta(h_s319);
                                                                                          int _pac_sc_s320 = 0;
                                                                                          if((key.__cid) == h_s319)/*HashMap.sk:96*/
                                                                                          {
                                                                                            int h_s322 = 0;
                                                                                            hashCode@Object(key, h_s322);
                                                                                            _pac_sc_s320 = h_s322;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int h_s324 = 0;
                                                                                            FileOutputStream@meta(h_s324);
                                                                                            int _pac_sc_s325 = 0;
                                                                                            if((key.__cid) == h_s324)/*HashMap.sk:96*/
                                                                                            {
                                                                                              int h_s327 = 0;
                                                                                              hashCode@Object(key, h_s327);
                                                                                              _pac_sc_s325 = h_s327;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int h_s329 = 0;
                                                                                              Arrays@meta(h_s329);
                                                                                              int _pac_sc_s330 = 0;
                                                                                              if((key.__cid) == h_s329)/*HashMap.sk:96*/
                                                                                              {
                                                                                                int h_s332 = 0;
                                                                                                hashCode@Object(key, h_s332);
                                                                                                _pac_sc_s330 = h_s332;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int h_s334 = 0;
                                                                                                Object@meta(h_s334);
                                                                                                int _pac_sc_s335 = 0;
                                                                                                if((key.__cid) == h_s334)/*HashMap.sk:96*/
                                                                                                {
                                                                                                  int h_s337 = 0;
                                                                                                  hashCode@Object(key, h_s337);
                                                                                                  _pac_sc_s335 = h_s337;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  _pac_sc_s335 = 0;
                                                                                                }
                                                                                                _pac_sc_s330 = _pac_sc_s335;
                                                                                              }
                                                                                              _pac_sc_s325 = _pac_sc_s330;
                                                                                            }
                                                                                            _pac_sc_s320 = _pac_sc_s325;
                                                                                          }
                                                                                          _pac_sc_s315 = _pac_sc_s320;
                                                                                        }
                                                                                        _pac_sc_s310 = _pac_sc_s315;
                                                                                      }
                                                                                      _pac_sc_s305 = _pac_sc_s310;
                                                                                    }
                                                                                    _pac_sc_s300 = _pac_sc_s305;
                                                                                  }
                                                                                  _pac_sc_s295 = _pac_sc_s300;
                                                                                }
                                                                                _pac_sc_s290 = _pac_sc_s295;
                                                                              }
                                                                              _pac_sc_s285 = _pac_sc_s290;
                                                                            }
                                                                            _pac_sc_s280 = _pac_sc_s285;
                                                                          }
                                                                          _pac_sc_s275 = _pac_sc_s280;
                                                                        }
                                                                        _pac_sc_s270 = _pac_sc_s275;
                                                                      }
                                                                      _pac_sc_s265 = _pac_sc_s270;
                                                                    }
                                                                    _pac_sc_s260 = _pac_sc_s265;
                                                                  }
                                                                  _pac_sc_s255 = _pac_sc_s260;
                                                                }
                                                                _pac_sc_s250 = _pac_sc_s255;
                                                              }
                                                              _pac_sc_s245 = _pac_sc_s250;
                                                            }
                                                            _pac_sc_s240 = _pac_sc_s245;
                                                          }
                                                          _pac_sc_s235 = _pac_sc_s240;
                                                        }
                                                        _pac_sc_s230 = _pac_sc_s235;
                                                      }
                                                      _pac_sc_s225 = _pac_sc_s230;
                                                    }
                                                    _pac_sc_s220 = _pac_sc_s225;
                                                  }
                                                  _pac_sc_s215 = _pac_sc_s220;
                                                }
                                                _pac_sc_s210 = _pac_sc_s215;
                                              }
                                              _pac_sc_s205 = _pac_sc_s210;
                                            }
                                            _pac_sc_s200 = _pac_sc_s205;
                                          }
                                          _pac_sc_s195 = _pac_sc_s200;
                                        }
                                        _pac_sc_s190 = _pac_sc_s195;
                                      }
                                      _pac_sc_s185 = _pac_sc_s190;
                                    }
                                    _pac_sc_s180 = _pac_sc_s185;
                                  }
                                  _pac_sc_s175 = _pac_sc_s180;
                                }
                                _pac_sc_s170 = _pac_sc_s175;
                              }
                              _pac_sc_s165 = _pac_sc_s170;
                            }
                            _pac_sc_s160 = _pac_sc_s165;
                          }
                          _pac_sc_s155 = _pac_sc_s160;
                        }
                        _pac_sc_s150 = _pac_sc_s155;
                      }
                      _pac_sc_s145 = _pac_sc_s150;
                    }
                    _pac_sc_s140 = _pac_sc_s145;
                  }
                  _pac_sc_s135 = _pac_sc_s140;
                }
                _pac_sc_s130 = _pac_sc_s135;
              }
              _pac_sc_s125 = _pac_sc_s130;
            }
            _pac_sc_s120 = _pac_sc_s125;
          }
          _pac_sc_s115 = _pac_sc_s120;
        }
        _pac_sc_s110 = _pac_sc_s115;
      }
      _pac_sc_s105 = _pac_sc_s110;
    }
    Object@Object _out_s339 = null;
    putVal_int_K_V@HashMap(self, _pac_sc_s105, key, value, _out_s339, self0__HashMap_Node_s5433);
    _out = _out_s339;
    return;
  }
  /*HashMap.sk:22*/
  
void resize_int (Object self, int newSize, ref global Object@Object self0__HashMap_Node_s5429)/*HashMap.sk:22*/
  {
    int i = 0;
    int h = 0;
    int hashMod = 0;
    Array_Object@array oldElementData = self.elementData_HashMap;
    Array_Object@array newElementData = new Array_Object@array(length=newSize);
    i = 0;
    bit __sa0 = 0 < (self.capacity_HashMap);
    Object@Object k = null;
    Object@Object v = null;
    while(__sa0)
    {
      if((oldElementData.A[i]) != (null))/*HashMap.sk:30*/
      {
        h = oldElementData.A[i].hash_HashMap_Node;
        k = oldElementData.A[i].key_HashMap_Node;
        v = oldElementData.A[i].value_HashMap_Node;
        hashMod = h % newSize;
        if(hashMod < 0)/*HashMap.sk:35*/
        {
          hashMod = hashMod + newSize;
        }
        int _out_s585 = 0;
        HashMap_Node@meta(_out_s585);
        Object@Object _out_s587 = null;
        HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s585), self, k, v, h, _out_s587, self0__HashMap_Node_s5429)//{};
        newElementData.A[hashMod] = _out_s587;
      }
      i = i + 1;
      __sa0 = i < (self.capacity_HashMap);
    }
    self.elementData_HashMap = newElementData;
    self.capacity_HashMap = newSize;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s5490 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s5489)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s5489 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s5512 (ref int MAX_ARRAY_SIZE__ArrayList_s5511)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s5511 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:43*/
  {
    if((0 <= index) && (index < (self._count_String)))/*String.sk:44*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:154*/
  {
    _out = 0;
    int _out_s2579 = 0;
    String@meta(_out_s2579);
    if((obj.__cid) == _out_s2579)/*String.sk:156*/
    {
      _out = 1;
      int sLen_s2581 = 0;
      String@meta(sLen_s2581);
      int _pac_sc_s2582 = 0;
      if((obj.__cid) == sLen_s2581)/*String.sk:159*/
      {
        int sLen_s2584 = 0;
        length@String(obj, sLen_s2584);
        _pac_sc_s2582 = sLen_s2584;
      }
      else
      {
        _pac_sc_s2582 = 0;
      }
      int tLen_s2586 = 0;
      String@meta(tLen_s2586);
      int _pac_sc_s2587 = 0;
      if((self.__cid) == tLen_s2586)/*String.sk:160*/
      {
        int tLen_s2589 = 0;
        length@String(self, tLen_s2589);
        _pac_sc_s2587 = tLen_s2589;
      }
      else
      {
        _pac_sc_s2587 = 0;
      }
      if(_pac_sc_s2582 != _pac_sc_s2587)/*String.sk:161*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2582) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:163*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:214*/
  
void getBytes (Object self, ref Array_char _out)/*String.sk:214*/
  {
    int _out_s2562 = 0;
    String@meta(_out_s2562);
    Object@Object _pac_sc_s2563 = null;
    if((self.__cid) == _out_s2562)/*String.sk:215*/
    {
      Object@Object _out_s2565 = null;
      toString@String(self, _out_s2565);
      _pac_sc_s2563 = _out_s2565;
    }
    else
    {
      _pac_sc_s2563 = null;
    }
    Array_char@array _out_s2567 = null;
    getBytes_String(_pac_sc_s2563, _out_s2567)//{};
    _out = _out_s2567;
    return;
  }
  /*String.sk:218*/
  
void getBytes_String (Object str, ref Array_char _out)/*String.sk:218*/
  {
    int len_s2569 = 0;
    String@meta(len_s2569);
    int _pac_sc_s2570 = 0;
    if((str.__cid) == len_s2569)/*String.sk:219*/
    {
      int len_s2572 = 0;
      length@String(str, len_s2572);
      _pac_sc_s2570 = len_s2572;
    }
    else
    {
      _pac_sc_s2570 = 0;
    }
    _out = new Array_char@array(length=_pac_sc_s2570);
    for(int i = 0; i < _pac_sc_s2570; i = i + 1)/*Canonical*/
    {
      int _out_s2574 = 0;
      String@meta(_out_s2574);
      char _pac_sc_s2575 = '\0';
      if((str.__cid) == _out_s2574)/*String.sk:222*/
      {
        char _out_s2577 = '\0';
        charAt_int@String(str, i, _out_s2577);
        _pac_sc_s2575 = _out_s2577;
      }
      else
      {
        _pac_sc_s2575 = '\0';
      }
      _out.A[i] = _pac_sc_s2575;
    }
    return;
  }
  /*String.sk:171*/
  
void hashCode (Object self, ref int _out)/*String.sk:171*/
  {
    int n;
    int hash;
    int temp;
    n = self._count_String;
    hash = 0;
    if(n == 0)/*String.sk:173*/
    {
      _out = 0;
      return;
    }
    for(int i = 0; i < n; i = i + 1)/*Canonical*/
    {
      int temp_s2591 = 0;
      String@meta(temp_s2591);
      char _pac_sc_s2592 = '\0';
      if((self.__cid) == temp_s2591)/*String.sk:177*/
      {
        char temp_s2594 = '\0';
        charAt_int@String(self, i, temp_s2594);
        _pac_sc_s2592 = temp_s2594;
      }
      else
      {
        _pac_sc_s2592 = '\0';
      }
      temp = _pac_sc_s2592;
      for(int j = 0; j < ((n - 1) - i); j = j + 1)/*Canonical*/
      {
        temp = temp * 31;
      }
      hash = hash + temp;
    }
    _out = hash;
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref int _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /*String.sk:52*/
  
void toString (Object self, ref Object _out)/*String.sk:52*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s5502 (ref int INITIAL_CAPACITY__TreeSet_s5501)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s5501 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s5538 (ref int RESIZE_FACTOR__TreeSet_s5537)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s5537 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Collections*/
package Collections{
  /* END PACKAGE Collections*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s5500 (ref int INITIAL_CAPACITY__HashSet_s5499)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s5499 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s5536 (ref int RESIZE_FACTOR__HashSet_s5535)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s5535 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE OpenSSLCipher*/
package OpenSSLCipher{
  /*OpenSSLCipher.sk:7*/
  
void OpenSSLCipher_OpenSSLCipher_String_String (Object self, Object algorithm, Object transformation, ref Object _out)/*OpenSSLCipher.sk:7*/
  {
    self.algorithm_OpenSSLCipher = algorithm;
    self.transformation_OpenSSLCipher = transformation;
    _out = self;
    return;
  }
  /*OpenSSLCipher.sk:38*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5421, ref global Object@Object self0__HashMap_Node_s5409)/*OpenSSLCipher.sk:38*/
  {
    Array_char@array _out_s3742 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 0, data, key, IV, _out_s3742, DEFAULT_INITIAL_CAPACITY__HashMap_s5421, self0__HashMap_Node_s5409);
    _out = _out_s3742;
    return;
  }
  /*OpenSSLCipher.sk:32*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5415, ref global Object@Object self0__HashMap_Node_s5424)/*OpenSSLCipher.sk:32*/
  {
    Array_char@array cipherText_s3798 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 1, data, key, IV, cipherText_s3798, DEFAULT_INITIAL_CAPACITY__HashMap_s5415, self0__HashMap_Node_s5424);
    _out = cipherText_s3798;
    bit _out_s3800 = 0;
    arraysEquals_byte_byte@Arrays(cipherText_s3798, data, _out_s3800);
    assert (!(_out_s3800)); //Assert at OpenSSLCipher.sk:34 (0)
    return;
  }
  /*OpenSSLCipher.sk:13*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5416, ref global Object@Object self0__HashMap_Node_s5417)/*OpenSSLCipher.sk:13*/
  {
    int properties_s3762 = 0;
    Properties@meta(properties_s3762);
    Object@Object properties_s3764 = null;
    Properties_Properties@Properties(new Object@Object(__cid=properties_s3762), properties_s3764, DEFAULT_INITIAL_CAPACITY__HashMap_s5416)//{};
    int _out_s3766 = 0;
    Properties@meta(_out_s3766);
    if((properties_s3764.__cid) == _out_s3766)/*OpenSSLCipher.sk:15*/
    {
      int _out_s3768 = 0;
      String@meta(_out_s3768);
      Object@Object _out_s3770 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3768), new Array_char@array(length=12, A={'C','L','A','S','S','E','S','_','K','E','Y','\0'}), 0, 11, _out_s3770)//{};
      Object@Object _out_s3772 = null;
      getClassName@CryptoCipherFactory_CipherProvider(_out_s3772);
      setProperty_String_String@Properties(properties_s3764, _out_s3770, _out_s3772, self0__HashMap_Node_s5417)//{};
    }
    Object@Object cipher_s3774 = null;
    getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties_s3764, cipher_s3774);
    _out = cipher_s3774;
    int keyValue_s3776 = 0;
    SecretKeySpec@meta(keyValue_s3776);
    int keyValue_s3778 = 0;
    KerberosKey@meta(keyValue_s3778);
    Array_char@array _pac_sc_s3779 = null;
    if((key.__cid) == keyValue_s3778)/*OpenSSLCipher.sk:19*/
    {
      Array_char@array keyValue_s3781 = null;
      getEncoded@KerberosKey(key, keyValue_s3781);
      _pac_sc_s3779 = keyValue_s3781;
    }
    else
    {
      int keyValue_s3783 = 0;
      SecretKeySpec@meta(keyValue_s3783);
      Array_char@array _pac_sc_s3784 = null;
      if((key.__cid) == keyValue_s3783)/*OpenSSLCipher.sk:19*/
      {
        Array_char@array keyValue_s3786 = null;
        getEncoded@SecretKeySpec(key, keyValue_s3786);
        _pac_sc_s3784 = keyValue_s3786;
      }
      else
      {
        _pac_sc_s3784 = null;
      }
      _pac_sc_s3779 = _pac_sc_s3784;
    }
    Object@Object keyValue_s3788 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s3776), _pac_sc_s3779, self.algorithm_OpenSSLCipher, keyValue_s3788)//{};
    int IVspec_s3790 = 0;
    IvParameterSpec@meta(IVspec_s3790);
    Object@Object IVspec_s3792 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s3790), IV, IVspec_s3792)//{};
    if(isEncryption)/*OpenSSLCipher.sk:21*/
    {
      int _out_s3794 = 0;
      Cipher@meta(_out_s3794);
      if((cipher_s3774.__cid) == _out_s3794)/*OpenSSLCipher.sk:22*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3774, 2, keyValue_s3788, IVspec_s3792);
      }
    }
    else
    {
      int _out_s3796 = 0;
      Cipher@meta(_out_s3796);
      if((cipher_s3774.__cid) == _out_s3796)/*OpenSSLCipher.sk:26*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3774, 1, keyValue_s3788, IVspec_s3792);
      }
    }
    return;
  }
  /*OpenSSLCipher.sk:68*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5418, ref global Object@Object self0__HashMap_Node_s5408)/*OpenSSLCipher.sk:68*/
  {
    Array_char@array _out_s3744 = new Array_char@array(length=2 * (data.length));
    Object@Object cipher_s3746 = null;
    getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV, cipher_s3746, DEFAULT_INITIAL_CAPACITY__HashMap_s5418, self0__HashMap_Node_s5408);
    int updateBytes_s3748 = 0;
    Cipher@meta(updateBytes_s3748);
    int _pac_sc_s3749 = 0;
    if((cipher_s3746.__cid) == updateBytes_s3748)/*OpenSSLCipher.sk:54*/
    {
      int updateBytes_s3751 = 0;
      update_byte_int_int_byte_int@Cipher(cipher_s3746, data, 5, data.length, _out_s3744, 0, updateBytes_s3751);
      _pac_sc_s3749 = updateBytes_s3751;
    }
    else
    {
      _pac_sc_s3749 = 0;
    }
    int finalBytes_s3753 = 0;
    Cipher@meta(finalBytes_s3753);
    int _pac_sc_s3754 = 0;
    if((cipher_s3746.__cid) == finalBytes_s3753)/*OpenSSLCipher.sk:57*/
    {
      int finalBytes_s3756 = 0;
      doFinal_byte_int_int_byte_int@Cipher(cipher_s3746, data, 0, 13, _out_s3744, _pac_sc_s3749, finalBytes_s3756);
      _pac_sc_s3754 = finalBytes_s3756;
    }
    else
    {
      _pac_sc_s3754 = 0;
    }
    Array_char@array cipherText_s3758 = null;
    copyOf_byte_int@Arrays(_out_s3744, _pac_sc_s3749 + _pac_sc_s3754, cipherText_s3758);
    _out = cipherText_s3758;
    return;
  }
  /* END PACKAGE OpenSSLCipher*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:216*/
  
void charValue (Object self, ref char _out)/*Character.sk:216*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:220*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Character.sk:220*/
  {
    int _out_s3802 = 0;
    Character@meta(_out_s3802);
    if((obj.__cid) == _out_s3802)/*Character.sk:221*/
    {
      int _out_s3804 = 0;
      Character@meta(_out_s3804);
      char _pac_sc_s3805 = '\0';
      if((obj.__cid) == _out_s3804)/*Character.sk:222*/
      {
        char _out_s3807 = '\0';
        charValue@Character(obj, _out_s3807);
        _pac_sc_s3805 = _out_s3807;
      }
      else
      {
        _pac_sc_s3805 = '\0';
      }
      _out = (self.value_Character) == _pac_sc_s3805;
      return;
    }
    _out = 0;
    return;
  }
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s5436 (ref char COMBINING_SPACING_MARK__Character_s5435)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s5435 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s5438 (ref char CONNECTOR_PUNCTUATION__Character_s5437)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s5437 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s5440 (ref char CONTROL__Character_s5439)/*Character.sk:71*/
  {
    CONTROL__Character_s5439 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s5442 (ref char CURRENCY_SYMBOL__Character_s5441)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s5441 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s5444 (ref char DASH_PUNCTUATION__Character_s5443)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s5443 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s5446 (ref char DECIMAL_DIGIT_NUMBER__Character_s5445)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s5445 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s5450 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s5449)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s5449 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5452 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5451)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s5451 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5454 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5453)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s5453 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5456 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5455)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s5455 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5458 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5457)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s5457 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5460 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5459)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s5459 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5462 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5461)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s5461 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5464 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5463)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s5463 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5466 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5465)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s5465 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s5468 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s5467)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s5467 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s5470 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s5469)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s5469 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5472 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5471)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s5471 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5474 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5473)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s5473 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5476 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5475)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s5475 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5478 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5477)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s5477 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5480 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5479)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s5479 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5482 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5481)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s5481 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5484 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5483)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s5483 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s5486 (ref char DIRECTIONALITY_UNDEFINED__Character_s5485)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s5485 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s5488 (ref char DIRECTIONALITY_WHITESPACE__Character_s5487)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s5487 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s5492 (ref char ENCLOSING_MARK__Character_s5491)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s5491 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s5494 (ref char END_PUNCTUATION__Character_s5493)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s5493 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s5496 (ref char FINAL_QUOTE_PUNCTUATION__Character_s5495)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s5495 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s5498 (ref char FORMAT__Character_s5497)/*Character.sk:75*/
  {
    FORMAT__Character_s5497 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s5504 (ref char LETTER_NUMBER__Character_s5503)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s5503 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s5506 (ref char LINE_SEPARATOR__Character_s5505)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s5505 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s5508 (ref char LOWERCASE_LETTER__Character_s5507)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s5507 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s5510 (ref char MATH_SYMBOL__Character_s5509)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s5509 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s5514 (ref int MAX_RADIX__Character_s5513)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s5513 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s5516 (ref int MIN_RADIX__Character_s5515)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s5515 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s5518 (ref char MODIFIER_LETTER__Character_s5517)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s5517 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s5520 (ref char MODIFIER_SYMBOL__Character_s5519)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s5519 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s5522 (ref char NON_SPACING_MARK__Character_s5521)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s5521 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s5524 (ref char OTHER_LETTER__Character_s5523)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s5523 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s5526 (ref char OTHER_NUMBER__Character_s5525)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s5525 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s5528 (ref char OTHER_PUNCTUATION__Character_s5527)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s5527 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s5530 (ref char OTHER_SYMBOL__Character_s5529)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s5529 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s5532 (ref char PARAGRAPH_SEPARATOR__Character_s5531)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s5531 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s5534 (ref char PRIVATE_USE__Character_s5533)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s5533 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s5540 (ref char SPACE_SEPARATOR__Character_s5539)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s5539 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s5542 (ref char START_PUNCTUATION__Character_s5541)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s5541 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s5544 (ref char SURROGATE__Character_s5543)/*Character.sk:83*/
  {
    SURROGATE__Character_s5543 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s5546 (ref char TITLECASE_LETTER__Character_s5545)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s5545 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s5548 (ref char UNASSIGNED__Character_s5547)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s5547 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s5550 (ref char UPPERCASE_LETTER__Character_s5549)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s5549 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE CipherFactory*/
package CipherFactory{
  /* END PACKAGE CipherFactory*/
}
/* BEGIN PACKAGE CryptoCipherFactory*/
package CryptoCipherFactory{
  /* END PACKAGE CryptoCipherFactory*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /*HashMap_Node.sk:10*/
  
void HashMap_Node_HashMap_Node_HashMap_K_V_int (Object self, Object self_0, Object key, Object value, int hash, ref Object _out, ref global Object@Object self0__HashMap_Node_s5376)/*HashMap_Node.sk:10*/
  {
    self0__HashMap_Node_s5376 = self_0;
    self.key_HashMap_Node = key;
    self.value_HashMap_Node = value;
    self.hash_HashMap_Node = hash;
    _out = self;
    return;
  }
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /*Float.sk:29*/
  
void equals_Object (Object self, Object anotherFloat, ref bit _out)/*Float.sk:29*/
  {
    int _out_s4097 = 0;
    Float@meta(_out_s4097);
    if((anotherFloat.__cid) == _out_s4097)/*Float.sk:30*/
    {
      if((anotherFloat.value_Float) == (self.value_Float))/*Float.sk:32*/
      {
        _out = 1;
        return;
      }
    }
    _out = 0;
    return;
  }
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:4*/
  
void AbstractQueue (ref int _out)/*meta.sk:4*/
  {
    _out = 52;
    return;
  }
  /*meta.sk:6*/
  
void ArrayDeque (ref int _out)/*meta.sk:6*/
  {
    _out = 54;
    return;
  }
  /*meta.sk:7*/
  
void ArrayDeque_DequeNode (ref int _out)/*meta.sk:7*/
  {
    _out = 55;
    return;
  }
  /*meta.sk:8*/
  
void ArrayList (ref int _out)/*meta.sk:8*/
  {
    _out = 42;
    return;
  }
  /*meta.sk:9*/
  
void Arrays (ref int _out)/*meta.sk:9*/
  {
    _out = 47;
    return;
  }
  /*meta.sk:10*/
  
void Assert (ref int _out)/*meta.sk:10*/
  {
    _out = 39;
    return;
  }
  /*meta.sk:11*/
  
void Boolean (ref int _out)/*meta.sk:11*/
  {
    _out = 34;
    return;
  }
  /*meta.sk:12*/
  
void BufferedReader (ref int _out)/*meta.sk:12*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:13*/
  
void BufferedWriter (ref int _out)/*meta.sk:13*/
  {
    _out = 26;
    return;
  }
  /*meta.sk:15*/
  
void Character (ref int _out)/*meta.sk:15*/
  {
    _out = 22;
    return;
  }
  /*meta.sk:16*/
  
void Cipher (ref int _out)/*meta.sk:16*/
  {
    _out = 44;
    return;
  }
  /*meta.sk:17*/
  
void CipherFactory (ref int _out)/*meta.sk:17*/
  {
    _out = 5;
    return;
  }
  /*meta.sk:18*/
  
void Collections (ref int _out)/*meta.sk:18*/
  {
    _out = 15;
    return;
  }
  /*meta.sk:20*/
  
void CryptoCipherFactory (ref int _out)/*meta.sk:20*/
  {
    _out = 56;
    return;
  }
  /*meta.sk:21*/
  
void CryptoCipherFactory_CipherProvider (ref int _out)/*meta.sk:21*/
  {
    _out = 57;
    return;
  }
  /*meta.sk:23*/
  
void File (ref int _out)/*meta.sk:23*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:24*/
  
void FileOutputStream (ref int _out)/*meta.sk:24*/
  {
    _out = 43;
    return;
  }
  /*meta.sk:25*/
  
void FileReaderr (ref int _out)/*meta.sk:25*/
  {
    _out = 33;
    return;
  }
  /*meta.sk:26*/
  
void FileWriterr (ref int _out)/*meta.sk:26*/
  {
    _out = 20;
    return;
  }
  /*meta.sk:27*/
  
void Float (ref int _out)/*meta.sk:27*/
  {
    _out = 24;
    return;
  }
  /*meta.sk:28*/
  
void HashMap (ref int _out)/*meta.sk:28*/
  {
    _out = 49;
    return;
  }
  /*meta.sk:29*/
  
void HashMap_Node (ref int _out)/*meta.sk:29*/
  {
    _out = 50;
    return;
  }
  /*meta.sk:30*/
  
void HashSet (ref int _out)/*meta.sk:30*/
  {
    _out = 13;
    return;
  }
  /*meta.sk:32*/
  
void Integer (ref int _out)/*meta.sk:32*/
  {
    _out = 35;
    return;
  }
  /*meta.sk:33*/
  
void IvParameterSpec (ref int _out)/*meta.sk:33*/
  {
    _out = 29;
    return;
  }
  /*meta.sk:34*/
  
void JCECipher (ref int _out)/*meta.sk:34*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:35*/
  
void KerberosKey (ref int _out)/*meta.sk:35*/
  {
    _out = 40;
    return;
  }
  /*meta.sk:37*/
  
void KeyGenerator (ref int _out)/*meta.sk:37*/
  {
    _out = 25;
    return;
  }
  /*meta.sk:38*/
  
void KeyStore (ref int _out)/*meta.sk:38*/
  {
    _out = 53;
    return;
  }
  /*meta.sk:39*/
  
void LinkedList (ref int _out)/*meta.sk:39*/
  {
    _out = 17;
    return;
  }
  /*meta.sk:41*/
  
void Mac (ref int _out)/*meta.sk:41*/
  {
    _out = 59;
    return;
  }
  /*meta.sk:44*/
  
void Number (ref int _out)/*meta.sk:44*/
  {
    _out = 36;
    return;
  }
  /*meta.sk:45*/
  
void Object (ref int _out)/*meta.sk:45*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:46*/
  
void OpenSSLCipher (ref int _out)/*meta.sk:46*/
  {
    _out = 6;
    return;
  }
  /*meta.sk:47*/
  
void PrintStream (ref int _out)/*meta.sk:47*/
  {
    _out = 19;
    return;
  }
  /*meta.sk:49*/
  
void Properties (ref int _out)/*meta.sk:49*/
  {
    _out = 16;
    return;
  }
  /*meta.sk:51*/
  
void Scanner (ref int _out)/*meta.sk:51*/
  {
    _out = 51;
    return;
  }
  /*meta.sk:53*/
  
void SecretKeySpec (ref int _out)/*meta.sk:53*/
  {
    _out = 28;
    return;
  }
  /*meta.sk:54*/
  
void SecureRandom (ref int _out)/*meta.sk:54*/
  {
    _out = 48;
    return;
  }
  /*meta.sk:56*/
  
void Stack (ref int _out)/*meta.sk:56*/
  {
    _out = 23;
    return;
  }
  /*meta.sk:57*/
  
void String (ref int _out)/*meta.sk:57*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:58*/
  
void StringBuffer (ref int _out)/*meta.sk:58*/
  {
    _out = 14;
    return;
  }
  /*meta.sk:59*/
  
void StringBuilder (ref int _out)/*meta.sk:59*/
  {
    _out = 45;
    return;
  }
  /*meta.sk:60*/
  
void System (ref int _out)/*meta.sk:60*/
  {
    _out = 46;
    return;
  }
  /*meta.sk:61*/
  
void Tester (ref int _out)/*meta.sk:61*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:62*/
  
void TreeMap (ref int _out)/*meta.sk:62*/
  {
    _out = 38;
    return;
  }
  /*meta.sk:63*/
  
void TreeSet (ref int _out)/*meta.sk:63*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:64*/
  
void Utils (ref int _out)/*meta.sk:64*/
  {
    _out = 41;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE FileOutputStream*/
package FileOutputStream{
  /* END PACKAGE FileOutputStream*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object path_FileOutputStream;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      Object fname_File;
      int size_File;
      Object map_Properties;
      Array_char _value_String;
      int _count_String;
      Object transformation_OpenSSLCipher;
      Object algorithm_OpenSSLCipher;
      Object mode_KeyGenerator;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      int value_Integer;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Object file_Scanner;
      float value_Float;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      bit bool_Boolean;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      Array_bit updated_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      Object out_PrintStream;
      Object path_FileReaderr;
      Object data_FileReaderr;
      int position_FileReaderr;
      Object transformation_JCECipher;
      Object algorithm_JCECipher;
      Object provider_JCECipher;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      Object instance_KeyStore;
      Object reader_BufferedReader;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Object writer_BufferedWriter;
      Array_char key_SecretKeySpec;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      char value_Character;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Object CLASSES_KEY_CryptoCipherFactory;
      Object fname_FileWriterr;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = self;
    return;
  }
  /*Object.sk:29*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Object.sk:29*/
  {
    _out = self == obj;
    return;
  }
  /*Object.sk:33*/
  
void hashCode (Object self, ref int _out)/*Object.sk:33*/
  {
    _out = 0;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Arrays*/
package Arrays{
  /*Arrays.sk:20*/
  
void arraysEquals_byte_byte (Array_char b1, Array_char b2, ref bit _out)/*Arrays.sk:20*/
  {
    if((b1.length) == (b2.length))/*Arrays.sk:21*/
    {
      bit __sa23 = 0 < (b1.length);
      int i = 0;
      while(__sa23)
      {
        if((b1.A[i]) != (b2.A[i]))/*Arrays.sk:23*/
        {
          _out = 0;
          return;
        }
        i = i + 1;
        __sa23 = i < (b1.length);
      }
    }
    else
    {
      _out = 0;
      return;
    }
    _out = 1;
    return;
  }
  /*Arrays.sk:7*/
  
void copyOf_byte_int (Array_char in, int len, ref Array_char _out)/*Arrays.sk:7*/
  {
    _out = new Array_char@array(length=len);
    for(int i = 0; i < len; i = i + 1)/*Canonical*/
    {
      if(i >= (in.length))/*Arrays.sk:10*/
      {
        _out.A[i] = 0;
      }
      else
      {
        _out.A[i] = in.A[i];
      }
    }
    return;
  }
  /* END PACKAGE Arrays*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE AlgorithmParameterSpec*/
package AlgorithmParameterSpec{
  /* END PACKAGE AlgorithmParameterSpec*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE JCECipher*/
package JCECipher{
  /*JCECipher.sk:7*/
  
void JCECipher_JCECipher_String_String_String (Object self, Object provider, Object algorithm, Object transformation, ref Object _out)/*JCECipher.sk:7*/
  {
    self.provider_JCECipher = provider;
    self.algorithm_JCECipher = algorithm;
    self.transformation_JCECipher = transformation;
    _out = self;
    return;
  }
  /*JCECipher.sk:36*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:36*/
  {
    Array_char@array _out_s4829 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 0, data, key, IV, _out_s4829);
    _out = _out_s4829;
    return;
  }
  /*JCECipher.sk:30*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:30*/
  {
    Array_char@array cipherText_s4878 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 1, data, key, IV, cipherText_s4878);
    _out = cipherText_s4878;
    bit _out_s4880 = 0;
    arraysEquals_byte_byte@Arrays(cipherText_s4878, data, _out_s4880);
    assert (!(_out_s4880)); //Assert at JCECipher.sk:32 (0)
    return;
  }
  /*JCECipher.sk:14*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out)/*JCECipher.sk:14*/
  {
    Object@Object cipher_s4854 = null;
    getInstance_String_String@Cipher(self.transformation_JCECipher, self.provider_JCECipher, cipher_s4854);
    _out = cipher_s4854;
    int keyValue_s4856 = 0;
    SecretKeySpec@meta(keyValue_s4856);
    int keyValue_s4858 = 0;
    KerberosKey@meta(keyValue_s4858);
    Array_char@array _pac_sc_s4859 = null;
    if((key.__cid) == keyValue_s4858)/*JCECipher.sk:17*/
    {
      Array_char@array keyValue_s4861 = null;
      getEncoded@KerberosKey(key, keyValue_s4861);
      _pac_sc_s4859 = keyValue_s4861;
    }
    else
    {
      int keyValue_s4863 = 0;
      SecretKeySpec@meta(keyValue_s4863);
      Array_char@array _pac_sc_s4864 = null;
      if((key.__cid) == keyValue_s4863)/*JCECipher.sk:17*/
      {
        Array_char@array keyValue_s4866 = null;
        getEncoded@SecretKeySpec(key, keyValue_s4866);
        _pac_sc_s4864 = keyValue_s4866;
      }
      else
      {
        _pac_sc_s4864 = null;
      }
      _pac_sc_s4859 = _pac_sc_s4864;
    }
    Object@Object keyValue_s4868 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s4856), _pac_sc_s4859, self.algorithm_JCECipher, keyValue_s4868)//{};
    int IVspec_s4870 = 0;
    IvParameterSpec@meta(IVspec_s4870);
    Object@Object IVspec_s4872 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s4870), IV, IVspec_s4872)//{};
    if(isEncryption)/*JCECipher.sk:19*/
    {
      int _out_s4874 = 0;
      Cipher@meta(_out_s4874);
      if((cipher_s4854.__cid) == _out_s4874)/*JCECipher.sk:20*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4854, 2, keyValue_s4868, IVspec_s4872);
      }
    }
    else
    {
      int _out_s4876 = 0;
      Cipher@meta(_out_s4876);
      if((cipher_s4854.__cid) == _out_s4876)/*JCECipher.sk:24*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4854, 1, keyValue_s4868, IVspec_s4872);
      }
    }
    return;
  }
  /*JCECipher.sk:68*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:68*/
  {
    Object@Object cipher_s4833 = null;
    getCipher_boolean_Key_byte@JCECipher(self, isEncryption, key, IV, cipher_s4833);
    int cipherText_s4835 = 0;
    Cipher@meta(cipherText_s4835);
    int _pac_sc_s4836 = 0;
    if((cipher_s4833.__cid) == cipherText_s4835)/*JCECipher.sk:49*/
    {
      int cipherText_s4838 = 0;
      getOutputSize_int@Cipher(cipher_s4833, data.length, cipherText_s4838);
      _pac_sc_s4836 = cipherText_s4838;
    }
    else
    {
      _pac_sc_s4836 = 0;
    }
    Array_char@array _out_s4831 = new Array_char@array(length=_pac_sc_s4836);
    int updateBytes_s4840 = 0;
    Cipher@meta(updateBytes_s4840);
    int _pac_sc_s4841 = 0;
    if((cipher_s4833.__cid) == updateBytes_s4840)/*JCECipher.sk:52*/
    {
      int updateBytes_s4843 = 0;
      update_byte_int_int_byte_int@Cipher(cipher_s4833, data, 0, _out_s4831.length, _out_s4831, 0, updateBytes_s4843);
      _pac_sc_s4841 = updateBytes_s4843;
    }
    else
    {
      _pac_sc_s4841 = 0;
    }
    int finalBytes_s4845 = 0;
    Cipher@meta(finalBytes_s4845);
    if((cipher_s4833.__cid) == finalBytes_s4845)/*JCECipher.sk:55*/
    {
      int finalBytes_s4848 = 0;
      doFinal_byte_int_int_byte_int@Cipher(cipher_s4833, data, 1, 1, _out_s4831, _pac_sc_s4841, finalBytes_s4848);
    }
    Object@Object cipher_s4833_0 = null;
    getCipher_boolean_Key_byte@JCECipher(self, isEncryption, key, IV, cipher_s4833_0);
    int cipherText_s4835_0 = 0;
    Cipher@meta(cipherText_s4835_0);
    int _pac_sc_s4836_0 = 0;
    if((cipher_s4833_0.__cid) == cipherText_s4835_0)/*JCECipher.sk:49*/
    {
      int cipherText_s4838_0 = 0;
      getOutputSize_int@Cipher(cipher_s4833_0, _out_s4831.length, cipherText_s4838_0);
      _pac_sc_s4836_0 = cipherText_s4838_0;
    }
    else
    {
      _pac_sc_s4836_0 = 0;
    }
    Array_char@array cipherText_s4852 = new Array_char@array(length=_pac_sc_s4836_0);
    int updateBytes_s4840_0 = 0;
    Cipher@meta(updateBytes_s4840_0);
    int _pac_sc_s4841_0 = 0;
    if((cipher_s4833_0.__cid) == updateBytes_s4840_0)/*JCECipher.sk:52*/
    {
      int updateBytes_s4843_0 = 0;
      update_byte_int_int_byte_int@Cipher(cipher_s4833_0, _out_s4831, 8, cipherText_s4852.length, cipherText_s4852, 0, updateBytes_s4843_0);
      _pac_sc_s4841_0 = updateBytes_s4843_0;
    }
    else
    {
      _pac_sc_s4841_0 = 0;
    }
    int finalBytes_s4845_0 = 0;
    Cipher@meta(finalBytes_s4845_0);
    int _pac_sc_s4846 = 0;
    if((cipher_s4833_0.__cid) == finalBytes_s4845_0)/*JCECipher.sk:55*/
    {
      int finalBytes_s4848_0 = 0;
      doFinal_byte_int_int_byte_int@Cipher(cipher_s4833_0, _out_s4831, 0, 6, cipherText_s4852, _pac_sc_s4841_0, finalBytes_s4848_0);
      _pac_sc_s4846 = finalBytes_s4848_0;
    }
    else
    {
      _pac_sc_s4846 = 0;
    }
    if((_pac_sc_s4841_0 + _pac_sc_s4846) < (cipherText_s4852.length))/*JCECipher.sk:58*/
    {
      Array_char@array cipherText_s4850 = null;
      copyOf_byte_int@Arrays(cipherText_s4852, _pac_sc_s4841_0 + _pac_sc_s4846, cipherText_s4850);
      cipherText_s4852 = cipherText_s4850;
    }
    _out = cipherText_s4852;
    return;
  }
  /* END PACKAGE JCECipher*/
}
/* BEGIN PACKAGE Tester*/
package Tester{
  /*Tester.sk:7*/
  
void _main (ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5403, ref global Object@Object self0__HashMap_Node_s5420)/*Tester.sk:7*/
  {
    int self_s4882 = 0;
    Object@meta(self_s4882);
    Object@Object self_s4884 = null;
    Object_Object@Object(new Object@Object(__cid=self_s4882), self_s4884)//{};
    testOpenSSL@Tester(self_s4884, DEFAULT_INITIAL_CAPACITY__HashMap_s5403, self0__HashMap_Node_s5420);
    testJCECipher@Tester(self_s4884);
  }
  /*Tester.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*Tester.sk:7*/
  {
    global int DEFAULT_INITIAL_CAPACITY__HashMap_s5406 = 0;
    glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s5448@HashMap(DEFAULT_INITIAL_CAPACITY__HashMap_s5406);
    global Object@Object self0__HashMap_Node_s5404 = null;
    _main(DEFAULT_INITIAL_CAPACITY__HashMap_s5406, self0__HashMap_Node_s5404);
  }
  /*Tester.sk:7*/
  
void main__WrapperNospec ()/*Tester.sk:7*/
  { }
  /*Tester.sk:29*/
  
void testJCECipher (Object self)/*Tester.sk:29*/
  {
    int oc_s4886 = 0;
    JCECipher@meta(oc_s4886);
    int oc_s4888 = 0;
    String@meta(oc_s4888);
    Object@Object oc_s4890 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4888), new Array_char@array(length=9, A={'P','R','O','V','I','D','E','R','\0'}), 0, 8, oc_s4890)//{};
    int oc_s4892 = 0;
    String@meta(oc_s4892);
    Object@Object oc_s4894 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4892), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4894)//{};
    int oc_s4896 = 0;
    String@meta(oc_s4896);
    Object@Object oc_s4898 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4896), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4898)//{};
    Object@Object oc_s4900 = null;
    JCECipher_JCECipher_String_String_String@JCECipher(new Object@Object(__cid=oc_s4886), oc_s4890, oc_s4894, oc_s4898, oc_s4900)//{};
    for(int x = 666666; x < 666667; x = x + 111111)
    {
      Object@Object p1_s4902 = null;
      toString_int@Integer(x, p1_s4902);
      Object@Object p2_s4904 = null;
      toString_int@Integer(x + 1, p2_s4904);
      Object@Object p3_s4906 = null;
      toString_int@Integer(x + 2, p3_s4906);
      int plaintext_s4908 = 0;
      String@meta(plaintext_s4908);
      Array_char@array _pac_sc_s4909 = null;
      if((p1_s4902.__cid) == plaintext_s4908)/*Tester.sk:35*/
      {
        Array_char@array plaintext_s4911 = null;
        getBytes@String(p1_s4902, plaintext_s4911);
        _pac_sc_s4909 = plaintext_s4911;
      }
      else
      {
        _pac_sc_s4909 = null;
      }
      int IV_s4913 = 0;
      String@meta(IV_s4913);
      Array_char@array _pac_sc_s4914 = null;
      if((p2_s4904.__cid) == IV_s4913)/*Tester.sk:36*/
      {
        Array_char@array IV_s4916 = null;
        getBytes@String(p2_s4904, IV_s4916);
        _pac_sc_s4914 = IV_s4916;
      }
      else
      {
        _pac_sc_s4914 = null;
      }
      int key_s4918 = 0;
      String@meta(key_s4918);
      Array_char@array _pac_sc_s4919 = null;
      if((p3_s4906.__cid) == key_s4918)/*Tester.sk:37*/
      {
        Array_char@array key_s4921 = null;
        getBytes@String(p3_s4906, key_s4921);
        _pac_sc_s4919 = key_s4921;
      }
      else
      {
        _pac_sc_s4919 = null;
      }
      int sk_s4923 = 0;
      SecretKeySpec@meta(sk_s4923);
      int sk_s4925 = 0;
      String@meta(sk_s4925);
      Object@Object sk_s4927 = null;
      String_String_char_int_int@String(new Object@Object(__cid=sk_s4925), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4927)//{};
      Object@Object sk_s4929 = null;
      SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4923), _pac_sc_s4919, sk_s4927, sk_s4929)//{};
      int cipherText_s4931 = 0;
      JCECipher@meta(cipherText_s4931);
      Array_char@array _pac_sc_s4932 = null;
      if((oc_s4900.__cid) == cipherText_s4931)/*Tester.sk:39*/
      {
        Array_char@array cipherText_s4934 = null;
        encrypt_byte_Key_byte@JCECipher(oc_s4900, _pac_sc_s4909, sk_s4929, _pac_sc_s4914, cipherText_s4934);
        _pac_sc_s4932 = cipherText_s4934;
      }
      else
      {
        _pac_sc_s4932 = null;
      }
      int plaintext2_s4936 = 0;
      JCECipher@meta(plaintext2_s4936);
      Array_char@array _pac_sc_s4937 = null;
      if((oc_s4900.__cid) == plaintext2_s4936)/*Tester.sk:40*/
      {
        Array_char@array plaintext2_s4939 = null;
        decrypt_byte_Key_byte@JCECipher(oc_s4900, _pac_sc_s4932, sk_s4929, _pac_sc_s4914, plaintext2_s4939);
        _pac_sc_s4937 = plaintext2_s4939;
      }
      else
      {
        _pac_sc_s4937 = null;
      }
      bit _out_s4941 = 0;
      arraysEquals_byte_byte@Arrays(_pac_sc_s4909, _pac_sc_s4937, _out_s4941);
      assert (_out_s4941); //Assert at Tester.sk:41 (0)
    }
  }
  /*Tester.sk:13*/
  
void testOpenSSL (Object self, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5426, ref global Object@Object self0__HashMap_Node_s5405)/*Tester.sk:13*/
  {
    int oc_s4943 = 0;
    OpenSSLCipher@meta(oc_s4943);
    int oc_s4945 = 0;
    String@meta(oc_s4945);
    Object@Object oc_s4947 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4945), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4947)//{};
    int oc_s4949 = 0;
    String@meta(oc_s4949);
    Object@Object oc_s4951 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4949), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4951)//{};
    Object@Object oc_s4953 = null;
    OpenSSLCipher_OpenSSLCipher_String_String@OpenSSLCipher(new Object@Object(__cid=oc_s4943), oc_s4947, oc_s4951, oc_s4953)//{};
    for(int x = 666666; x < 666667; x = x + 111111)
    {
      Object@Object p1_s4955 = null;
      toString_int@Integer(x, p1_s4955);
      Object@Object p2_s4957 = null;
      toString_int@Integer(x + 1, p2_s4957);
      Object@Object p3_s4959 = null;
      toString_int@Integer(x + 2, p3_s4959);
      int plaintext_s4961 = 0;
      String@meta(plaintext_s4961);
      Array_char@array _pac_sc_s4962 = null;
      if((p1_s4955.__cid) == plaintext_s4961)/*Tester.sk:19*/
      {
        Array_char@array plaintext_s4964 = null;
        getBytes@String(p1_s4955, plaintext_s4964);
        _pac_sc_s4962 = plaintext_s4964;
      }
      else
      {
        _pac_sc_s4962 = null;
      }
      int IV_s4966 = 0;
      String@meta(IV_s4966);
      Array_char@array _pac_sc_s4967 = null;
      if((p2_s4957.__cid) == IV_s4966)/*Tester.sk:20*/
      {
        Array_char@array IV_s4969 = null;
        getBytes@String(p2_s4957, IV_s4969);
        _pac_sc_s4967 = IV_s4969;
      }
      else
      {
        _pac_sc_s4967 = null;
      }
      int key_s4971 = 0;
      String@meta(key_s4971);
      Array_char@array _pac_sc_s4972 = null;
      if((p3_s4959.__cid) == key_s4971)/*Tester.sk:21*/
      {
        Array_char@array key_s4974 = null;
        getBytes@String(p3_s4959, key_s4974);
        _pac_sc_s4972 = key_s4974;
      }
      else
      {
        _pac_sc_s4972 = null;
      }
      int sk_s4976 = 0;
      SecretKeySpec@meta(sk_s4976);
      int sk_s4978 = 0;
      String@meta(sk_s4978);
      Object@Object sk_s4980 = null;
      String_String_char_int_int@String(new Object@Object(__cid=sk_s4978), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4980)//{};
      Object@Object sk_s4982 = null;
      SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4976), _pac_sc_s4972, sk_s4980, sk_s4982)//{};
      int cipherText_s4984 = 0;
      OpenSSLCipher@meta(cipherText_s4984);
      Array_char@array _pac_sc_s4985 = null;
      if((oc_s4953.__cid) == cipherText_s4984)/*Tester.sk:23*/
      {
        Array_char@array cipherText_s4987 = null;
        encrypt_byte_Key_byte@OpenSSLCipher(oc_s4953, _pac_sc_s4962, sk_s4982, _pac_sc_s4967, cipherText_s4987, DEFAULT_INITIAL_CAPACITY__HashMap_s5426, self0__HashMap_Node_s5405);
        _pac_sc_s4985 = cipherText_s4987;
      }
      else
      {
        _pac_sc_s4985 = null;
      }
      int plaintext2_s4989 = 0;
      OpenSSLCipher@meta(plaintext2_s4989);
      Array_char@array _pac_sc_s4990 = null;
      if((oc_s4953.__cid) == plaintext2_s4989)/*Tester.sk:24*/
      {
        Array_char@array plaintext2_s4992 = null;
        decrypt_byte_Key_byte@OpenSSLCipher(oc_s4953, _pac_sc_s4985, sk_s4982, _pac_sc_s4967, plaintext2_s4992, DEFAULT_INITIAL_CAPACITY__HashMap_s5426, self0__HashMap_Node_s5405);
        _pac_sc_s4990 = plaintext2_s4992;
      }
      else
      {
        _pac_sc_s4990 = null;
      }
      bit _out_s4994 = 0;
      arraysEquals_byte_byte@Arrays(_pac_sc_s4962, _pac_sc_s4990, _out_s4994);
      assert (_out_s4994); //Assert at Tester.sk:25 (0)
    }
  }
  /* END PACKAGE Tester*/
}
/* BEGIN PACKAGE ICipher*/
package ICipher{
  /* END PACKAGE ICipher*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE CryptoCipherFactory_CipherProvider*/
package CryptoCipherFactory_CipherProvider{
  /*CryptoC..ovider.sk:10*/
  
void getClassName (ref Object _out)/*CryptoC..ovider.sk:10*/
  {
    int _out_s5015 = 0;
    String@meta(_out_s5015);
    Object@Object _out_s5017 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s5015), new Array_char@array(length=8, A={'O','P','E','N','S','S','L','\0'}), 0, 7, _out_s5017)//{};
    _out = _out_s5017;
    return;
  }
  /* END PACKAGE CryptoCipherFactory_CipherProvider*/
}
/* BEGIN PACKAGE Properties*/
package Properties{
  /*Properties.sk:3*/
  
void Properties_Properties (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s5411)/*Properties.sk:3*/
  {
    int _out_s5024 = 0;
    HashMap@meta(_out_s5024);
    Object@Object _out_s5026 = null;
    HashMap_HashMap@HashMap(new Object@Object(__cid=_out_s5024), _out_s5026, DEFAULT_INITIAL_CAPACITY__HashMap_s5411)//{};
    self.map_Properties = _out_s5026;
    _out = self;
    return;
  }
  /*Properties.sk:8*/
  
void setProperty_String_String (Object self, Object key, Object value, ref global Object@Object self0__HashMap_Node_s5419)/*Properties.sk:8*/
  {
    int _out_s5019 = 0;
    HashMap@meta(_out_s5019);
    if((self.map_Properties.__cid) == _out_s5019)/*Properties.sk:9*/
    {
      Object@Object _out_s5022 = null;
      put_K_V@HashMap(self.map_Properties, key, value, _out_s5022, self0__HashMap_Node_s5419);
    }
  }
  /* END PACKAGE Properties*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE PrintStream*/
package PrintStream{
  /* END PACKAGE PrintStream*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE KeyStore*/
package KeyStore{
  /* END PACKAGE KeyStore*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:32*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Integer.sk:32*/
  {
    int _out_s5153 = 0;
    Integer@meta(_out_s5153);
    if((obj.__cid) == _out_s5153)/*Integer.sk:33*/
    {
      int _out_s5155 = 0;
      Integer@meta(_out_s5155);
      int _pac_sc_s5156 = 0;
      if((obj.__cid) == _out_s5155)/*Integer.sk:34*/
      {
        int _out_s5158 = 0;
        intValue@Integer(obj, _out_s5158);
        _pac_sc_s5156 = _out_s5158;
      }
      else
      {
        _pac_sc_s5156 = 0;
      }
      _out = (self.value_Integer) == _pac_sc_s5156;
      return;
    }
    _out = 0;
    return;
  }
  /*Integer.sk:71*/
  
void hashCode (Object self, ref int _out)/*Integer.sk:71*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:20*/
  
void intValue (Object self, ref int _out)/*Integer.sk:20*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:43*/
  
void toString_int (int i, ref Object _out)/*Integer.sk:43*/
  {
    if(i == 0)/*Integer.sk:44*/
    {
      int _out_s5145 = 0;
      String@meta(_out_s5145);
      Object@Object _out_s5147 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s5145), new Array_char@array(length=2, A={'0','\0'}), 0, 1, _out_s5147)//{};
      _out = _out_s5147;
      return;
    }
    int index = 0;
    int temp = i;
    int j;
    Array_char@array ret = new Array_char@array(length=32);
    Array_char@array ret2 = new Array_char@array(length=32);
    Array_char@array nums = new Array_char@array(length=10, A={'0','1','2','3','4','5','6','7','8','9'});
    if(i < 0)/*Integer.sk:51*/
    {
      temp = i * -1;
    }
    while(temp > 0)
    {
      ret.A[index] = nums.A[temp % 10];
      temp = temp / 10;
      index = index + 1;
    }
    if(i < 0)/*Integer.sk:59*/
    {
      ret.A[index] = '-';
      index = index + 1;
    }
    int size = index;
    for(j = 0; j < size; j = j + 1)
    {
      ret2.A[j] = ret.A[index - 1];
      index = index - 1;
    }
    int _out_s5149 = 0;
    String@meta(_out_s5149);
    Object@Object _out_s5151 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s5149), ret2, 0, size, _out_s5151)//{};
    _out = _out_s5151;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE Utils*/
package Utils{
  /*Utils.sk:7*/
  
void getCipherInstance_String_Properties (Object trans, Object props, ref Object _out)/*Utils.sk:7*/
  {
    int _out_s5188 = 0;
    Cipher@meta(_out_s5188);
    Object@Object _out_s5190 = null;
    Cipher_Cipher_String@Cipher(new Object@Object(__cid=_out_s5188), trans, _out_s5190)//{};
    _out = _out_s5190;
    return;
  }
  /* END PACKAGE Utils*/
}
/* BEGIN PACKAGE BufferedReader*/
package BufferedReader{
  /* END PACKAGE BufferedReader*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Array_char val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    self.updated_Cipher = null;
    _out = self;
    return;
  }
  /*Cipher.sk:71*/
  
void doFinal_byte_int_int_byte_int (Object self, Array_char text, int i, int l, Array_char out, int j, ref int _out)/*Cipher.sk:71*/
  {
    int k_s5234 = 0;
    KerberosKey@meta(k_s5234);
    Array_char@array _pac_sc_s5235 = null;
    if((self.key_Cipher.__cid) == k_s5234)/*Cipher.sk:72*/
    {
      Array_char@array k_s5237 = null;
      getEncoded@KerberosKey(self.key_Cipher, k_s5237);
      _pac_sc_s5235 = k_s5237;
    }
    else
    {
      int k_s5239 = 0;
      SecretKeySpec@meta(k_s5239);
      Array_char@array _pac_sc_s5240 = null;
      if((self.key_Cipher.__cid) == k_s5239)/*Cipher.sk:72*/
      {
        Array_char@array k_s5242 = null;
        getEncoded@SecretKeySpec(self.key_Cipher, k_s5242);
        _pac_sc_s5240 = k_s5242;
      }
      else
      {
        _pac_sc_s5240 = null;
      }
      _pac_sc_s5235 = _pac_sc_s5240;
    }
    if((_pac_sc_s5235.length) == 0)/*Cipher.sk:74*/
    {
      _out = 0;
      return;
    }
    int crypted = 0;
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:77*/
    {
      bit __sa31 = 0 < (text.length);
      int w = 0;
      while(__sa31)
      {
        if((self.updated_Cipher.A[w]) || ((w >= i) && (w < l)))/*Cipher.sk:79*/
        {
          if(!(self.updated_Cipher.A[w]))/*Cipher.sk:80*/
          {
            crypted = crypted + 1;
          }
          out.A[w] = (text.A[w]) + (_pac_sc_s5235.A[w % (_pac_sc_s5235.length)]);
        }
        w = w + 1;
        __sa31 = w < (text.length);
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:87*/
      {
        bit __sa32 = 0 < (text.length);
        int w_0 = 0;
        while(__sa32)
        {
          if((self.updated_Cipher.A[w_0]) || ((w_0 >= i) && (w_0 < l)))/*Cipher.sk:89*/
          {
            if(!(self.updated_Cipher.A[w_0]))/*Cipher.sk:90*/
            {
              crypted = crypted + 1;
            }
            out.A[w_0] = (text.A[w_0]) - (_pac_sc_s5235.A[w_0 % (_pac_sc_s5235.length)]);
          }
          w_0 = w_0 + 1;
          __sa32 = w_0 < (text.length);
        }
      }
    }
    _out = crypted;
    return;
  }
  /*Cipher.sk:19*/
  
void getInstance_String_String (Object type, Object extra, ref Object _out)/*Cipher.sk:19*/
  {
    int _out_s5246 = 0;
    Cipher@meta(_out_s5246);
    Object@Object _out_s5248 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s5246), type, _out_s5248)//{};
    _out = _out_s5248;
    return;
  }
  /*Cipher.sk:57*/
  
void getOutputSize_int (Object self, int length, ref int _out)/*Cipher.sk:57*/
  {
    _out = length + 1;
    return;
  }
  /*Cipher.sk:33*/
  
void init_int_SecretKey_AlgorithmParameterSpec (Object self, int opmode, Object key, Object i)/*Cipher.sk:33*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /*Cipher.sk:61*/
  
void update_byte_int_int_byte_int (Object self, Array_char data, int i, int l, Array_char out, int j, ref int _out)/*Cipher.sk:61*/
  {
    if((self.updated_Cipher) == (null))/*Cipher.sk:62*/
    {
      int _out_s5244 = 0;
      getOutputSize_int@Cipher(self, data.length, _out_s5244);
      self.updated_Cipher = new Array_bit@array(length=_out_s5244);
    }
    for(int k = i; k < l; k = k + 1)/*Canonical*/
    {
      self.updated_Cipher.A[k] = 1;
    }
    _out = l - i;
    return;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 37168
