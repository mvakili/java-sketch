package HashTableTest;

int INITIAL_SIZE = 8;
int INITIAL_SIZE_g() { return INITIAL_SIZE; }
void INITIAL_SIZE_s(int INITIAL_SIZE_s) { INITIAL_SIZE = INITIAL_SIZE_s; }

Object HashTableTest_HashTableTest(Object self) {
    return self;
}

harness void mn_int_int_int(int x, int y, int z) {
  Object self = Object_Object(new Object(__cid=Object()));
  assume x != y && x != z && y != z;
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), x);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), y);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), z);
  setUp@HashTableTest(self);
  testClear_Integer_Integer@HashTableTest(self, xx, yy);
  testPutAndGet_Integer_Integer_Integer@HashTableTest(self, xx, yy, zz);
  testGetEmpty@HashTableTest(self);
  testReplacing_Integer_Integer_Integer@HashTableTest(self, xx, yy, zz);
  testKeys_Integer_Integer@HashTableTest(self, xx, yy);
  testValues_Integer_Integer@HashTableTest(self, xx, yy);
  testContainsValue_Integer_Integer@HashTableTest(self, xx, yy);
  testContainsKey_Integer_Integer@HashTableTest(self, xx, yy);
  testRemoveNonExistent_Integer_Integer@HashTableTest(self, xx, yy);
  testRemove_Integer_Integer@HashTableTest(self, xx, yy);
}

Array_Object makeInts_Integer(Object self, Object i1) {
  Array_Object i = new Array_Object(length=1, A={Integer_Integer_int(new Object(__cid=Integer()), (i1.__cid == Integer() ? intValue@Integer(i1) : 0))});
  return i;
}

Array_Object makeInts_Integer_Integer(Object self, Object i1, Object i2) {
  Array_Object i = new Array_Object(length=2, A={Integer_Integer_int(new Object(__cid=Integer()), (i1.__cid == Integer() ? intValue@Integer(i1) : 0)), Integer_Integer_int(new Object(__cid=Integer()), (i2.__cid == Integer() ? intValue@Integer(i2) : 0))});
  return i;
}

Array_Object makeInts_Integer_Integer_Integer(Object self, Object i1, Object i2, Object i3) {
  Array_Object i = new Array_Object(length=3, A={Integer_Integer_int(new Object(__cid=Integer()), (i1.__cid == Integer() ? intValue@Integer(i1) : 0)), Integer_Integer_int(new Object(__cid=Integer()), (i2.__cid == Integer() ? intValue@Integer(i2) : 0)), Integer_Integer_int(new Object(__cid=Integer()), (i3.__cid == Integer() ? intValue@Integer(i3) : 0))});
  return i;
}

void setUp(Object self) {
  self.classUnderTest_HashTableTest = HashTable_HashTable_int(new Object(__cid=HashTable()), INITIAL_SIZE);
}

void testGetEmpty(Object self) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  assertNull_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, null) : null));
}

void testPutAndGet_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  Array_Object is = makeInts_Integer_Integer_Integer@HashTableTest(self, x, y, z);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, y, x); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, z, x); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : null), is.A[1]);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[1]) : null), is.A[0]);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[2]) : null), is.A[0]);
  Object i = Integer_Integer_int(new Object(__cid=Integer()), (x.__cid == Integer() ? intValue@Integer(x) : 0) + INITIAL_SIZE);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, i, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, i) : null), y);
}

void testReplacing_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  Array_Object is = makeInts_Integer_Integer_Integer@HashTableTest(self, x, y, z);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  Object i0 = Integer_Integer_int(new Object(__cid=Integer()), (x.__cid == Integer() ? intValue@Integer(x) : 0) + INITIAL_SIZE);
  Object i1 = Integer_Integer_int(new Object(__cid=Integer()), (x.__cid == Integer() ? intValue@Integer(x) : 0) + INITIAL_SIZE);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, i0, z); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, i1) : null), is.A[2]);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : null), is.A[1]);
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, z); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : null), is.A[2]);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, i0, z); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, i1) : null), is.A[2]);
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size);
}

void testKeys_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  Object k = (self.classUnderTest_HashTableTest.__cid == HashTable() ? keys@HashTable(self.classUnderTest_HashTableTest) : null).A[0];
  assertEquals_Object_Object@Assert(k, is.A[0]);
}

void testValues_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  Object v = (self.classUnderTest_HashTableTest.__cid == HashTable() ? values@HashTable(self.classUnderTest_HashTableTest) : null).A[0];
  assertEquals_Object_Object@Assert(v, is.A[1]);
}

void testContainsValue_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsValue_V@HashTable(self.classUnderTest_HashTableTest, is.A[1]) : 0));
}

void testContainsKey_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  assertFalse_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsKey_K@HashTable(self.classUnderTest_HashTableTest, x) : 0));
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsKey_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : 0));
}

void testSize_int_int(Object self, int x, int y) {
  assume x >= INITIAL_SIZE && x < 0;
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  for (int i = 0; i < INITIAL_SIZE; i++) {
    if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, Integer_Integer_int(new Object(__cid=Integer()), i), null); }
    else { 0; };
  }
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), INITIAL_SIZE);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, Integer_Integer_int(new Object(__cid=Integer()), x), Integer_Integer_int(new Object(__cid=Integer()), y)); }
  else { 0; };
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), INITIAL_SIZE + 1);
}

void testRemoveNonExistent_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { remove_K@HashTable(self.classUnderTest_HashTableTest, is.A[1]); }
  else { 0; };
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size);
}

void testRemove_Integer_Integer(Object self, Object x, Object y) {
  Array_Object is = makeInts_Integer_Integer@HashTableTest(self, x, y);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : null), is.A[1]);
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size + 1);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { remove_K@HashTable(self.classUnderTest_HashTableTest, x); }
  else { 0; };
  assertNull_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, is.A[0]) : null));
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, y, x); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0) > 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  ;
  assertFalse_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0) > 0);
}

void testEnsureCapacity_Integer_Integer_Integer_Integer_Integer(Object self, Object v, Object w, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, v, w); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, w, x); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, y, z); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, z, v); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, v) : null), w);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, w) : null), x);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null), y);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, y) : null), z);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, z) : null), v);
}

