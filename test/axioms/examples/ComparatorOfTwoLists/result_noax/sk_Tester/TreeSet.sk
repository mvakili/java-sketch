package TreeSet;

int INITIAL_CAPACITY = 16;
int INITIAL_CAPACITY_g() { return INITIAL_CAPACITY; }
void INITIAL_CAPACITY_s(int INITIAL_CAPACITY_s) { INITIAL_CAPACITY = INITIAL_CAPACITY_s; }

int RESIZE_FACTOR = 2;
int RESIZE_FACTOR_g() { return RESIZE_FACTOR; }
void RESIZE_FACTOR_s(int RESIZE_FACTOR_s) { RESIZE_FACTOR = RESIZE_FACTOR_s; }

Object TreeSet_TreeSet(Object self) {
  self.set_TreeSet = Wrap_Array_Object(new Array_Object(length=INITIAL_CAPACITY));
  self.size_TreeSet = 0;
  self.capacity_TreeSet = INITIAL_CAPACITY;
  return self;
}

void resize(Object self) {
  int new_size = self.capacity_TreeSet * RESIZE_FACTOR;
  Object new_set = Wrap_Array_Object(new Array_Object(length=new_size));
  for (int i = 0; i < self.capacity_TreeSet; i++) {
    new_set._array_object.A[i] = self.set_TreeSet._array_object.A[i];
  }
  self.set_TreeSet = new_set;
  self.capacity_TreeSet = self.capacity_TreeSet * RESIZE_FACTOR;
}

void check_size(Object self) {
  if (self.size_TreeSet >= self.capacity_TreeSet) {
    resize@TreeSet(self);
  }
}

bit add_E(Object self, Object e) {
  if (contains_Object@TreeSet(self, e) || e == null) {
    return false;
  }
  else {
    self.set_TreeSet._array_object.A[self.size_TreeSet] = e;
    self.size_TreeSet++;
    check_size@TreeSet(self);
    return true;
  }
}

int get_Index_Object(Object self, Object o) {
  for (int i = 0; i < self.size_TreeSet; i++) {
    if ((o.__cid == FileReaderr() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == ArrayList() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == HashSet() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Float() ? equals_Object@Float(o, self.set_TreeSet._array_object.A[i]) : o.__cid == FileWriterr() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == HashMap() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Number() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == SecureRandom() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Character() ? equals_Object@Character(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Cipher() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == SecretKeySpec() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == HashMap_Node() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == TreeMap() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Integer() ? equals_Object@Integer(o, self.set_TreeSet._array_object.A[i]) : o.__cid == StringBuffer() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Boolean() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Collections() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Mac() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == KeyGenerator() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == LinkedList() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == System() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == CommunicationWithFiles() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == IvParameterSpec() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == StringBuilder() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == ArrayDeque() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Scanner() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Stack() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == BufferedWriter() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Tester() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == BufferedReader() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == File() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == TreeSet() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Assert() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == KerberosKey() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == String() ? equals_Object@String(o, self.set_TreeSet._array_object.A[i]) : o.__cid == AbstractQueue() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == ArrayDeque_DequeNode() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : o.__cid == Object() ? equals_Object@Object(o, self.set_TreeSet._array_object.A[i]) : 0)) {
      return i;
    }
  }
  return -1;
}

bit contains_Object(Object self, Object o) {
  return get_Index_Object@TreeSet(self, o) >= 0;
}

bit remove_Object(Object self, Object o) {
  int index = get_Index_Object@TreeSet(self, o);
  if (index >= 0) {
    for (int j = index; j < self.size_TreeSet - 1; j++) {
      self.set_TreeSet._array_object.A[j] = self.set_TreeSet._array_object.A[j + 1];
    }
    self.set_TreeSet._array_object.A[self.size_TreeSet - 1] = null;
    self.size_TreeSet--;
    return true;
  }
  else {
    return false;
  }
}

void clear(Object self) {
  self.set_TreeSet = Wrap_Array_Object(new Array_Object(length=INITIAL_CAPACITY));
  self.size_TreeSet = 0;
  self.capacity_TreeSet = INITIAL_CAPACITY;
}

int size(Object self) {
  return self.size_TreeSet;
}

bit isEmpty(Object self) {
  return self.size_TreeSet == 0;
}

Object last(Object self) {
  if (!isEmpty@TreeSet(self)) return self.set_TreeSet._array_object.A[self.size_TreeSet - 1];
  else
    return null;
}

