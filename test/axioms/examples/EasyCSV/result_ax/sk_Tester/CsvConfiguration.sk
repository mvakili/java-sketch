package CsvConfiguration;

Object CsvConfiguration_CsvConfiguration(Object self) {
  self.skipHeader_CsvConfiguration = (new Object(__cid=-4, _bit=false));
  self.columnIndexesToParse_CsvConfiguration = ArrayList_ArrayList();
  return self;
}

Object skipHeader(Object self) {
  return self.skipHeader_CsvConfiguration;
}

void setSkipHeader_boolean(Object self, Object skipHeader) {
  self.skipHeader_CsvConfiguration = skipHeader;
}

Object getColumnIndexesToParse(Object self) {
  return self.columnIndexesToParse_CsvConfiguration;
}

void setColumnIndexesToParse_ArrayList(Object self, Object columnIndexesToParse) {
  self.columnIndexesToParse_CsvConfiguration = columnIndexesToParse;
}

void setColumnIndexesToParse_int(Object self, Object columnIndexesToParse) {
  Object size = columnIndexesToParse._array_int.length;
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < size._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    Object columnIndex = (new Object(__cid=-2, _int=columnIndexesToParse._array_int.A[i._int]));
    (self.columnIndexesToParse_CsvConfiguration.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? add_Object_Object@ArrayList(self.columnIndexesToParse_CsvConfiguration, Integer_Integer_int(new Object(__cid=Integer()), columnIndex)) : null); self.columnIndexesToParse_CsvConfiguration = (self.columnIndexesToParse_CsvConfiguration.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? addb_Object_Object@ArrayList(self.columnIndexesToParse_CsvConfiguration, Integer_Integer_int(new Object(__cid=Integer()), columnIndex)) : null);
  }
}

Object parseAllColumns(Object self) {
  return (new Object(__cid=-4, _bit=(self.columnIndexesToParse_CsvConfiguration.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? size_Object@ArrayList(self.columnIndexesToParse_CsvConfiguration) : null)._int == (new Object(__cid=-2, _int=0))._int));
}

