package Tester;

Object Tester_Tester(Object self) {
    return self;
}

harness void mn() {
  Object self = Object_Object(new Object(__cid=Object()));
  Object f = File_File_String(new Object(__cid=File()), String_String_char_int_int(new Object(__cid=String()), new Array_char(length=25+1, A="#A\na;b;c;d;e;f;g;h;i;j\n"), 0, 25));
  Object p = RomlistParser_RomlistParser(new Object(__cid=RomlistParser()));
  Object games = (p.__cid == RomlistParser() ? parse_File@RomlistParser(p, f) : null);
  Object g1 = (games.__cid == ArrayList() ? get_int@ArrayList(games, 0) : null);
  Object name1 = (g1.__cid == RomlistGame() ? getName@RomlistGame(g1) : null);
  Object title1 = (g1.__cid == RomlistGame() ? getTitle@RomlistGame(g1) : null);
  Object emul1 = (g1.__cid == RomlistGame() ? getEmulator@RomlistGame(g1) : null);
  Object clone1 = (g1.__cid == RomlistGame() ? getCloneOf@RomlistGame(g1) : null);
  Object year1 = (g1.__cid == RomlistGame() ? getYear@RomlistGame(g1) : null);
  Object man1 = (g1.__cid == RomlistGame() ? getManufacturer@RomlistGame(g1) : null);
  Object cat1 = (g1.__cid == RomlistGame() ? getCategory@RomlistGame(g1) : null);
  Object plays1 = (g1.__cid == RomlistGame() ? getPlayers@RomlistGame(g1) : null);
  Object rot1 = (g1.__cid == RomlistGame() ? getRotation@RomlistGame(g1) : null);
  Object cont1 = (g1.__cid == RomlistGame() ? getControl@RomlistGame(g1) : null);
  assert (name1.__cid == String() ? equals_Object@String(name1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="a"), 0, 1)) : 0);
  assert (title1.__cid == String() ? equals_Object@String(title1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="b"), 0, 1)) : 0);
  assert (emul1.__cid == String() ? equals_Object@String(emul1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="c"), 0, 1)) : 0);
  assert (clone1.__cid == String() ? equals_Object@String(clone1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="d"), 0, 1)) : 0);
  assert (year1.__cid == String() ? equals_Object@String(year1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="e"), 0, 1)) : 0);
  assert (man1.__cid == String() ? equals_Object@String(man1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="f"), 0, 1)) : 0);
  assert (cat1.__cid == String() ? equals_Object@String(cat1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="g"), 0, 1)) : 0);
  assert (plays1.__cid == String() ? equals_Object@String(plays1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="h"), 0, 1)) : 0);
  assert (rot1.__cid == String() ? equals_Object@String(rot1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="i"), 0, 1)) : 0);
  assert (cont1.__cid == String() ? equals_Object@String(cont1, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="j"), 0, 1)) : 0);
}

