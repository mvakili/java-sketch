{"name":"JSketch","tagline":"a Java front-end for Sketch synthesis tool","body":"# JSketch\r\n\r\nSketch-based synthesis, epitomized by [Sketch][sk], lets developers\r\nsynthesize software starting from a _partial program_, also called a\r\n_sketch_ or _template_.  JSketch is a tool that brings sketch-based\r\nsynthesis to Java. JSketch's input is a partial Java program that may\r\ninclude _holes_, which are unknown constants, _expression generators_,\r\nwhich range over sets of expressions, and _class generators_, which are\r\npartial classes.  JSketch then translates the synthesis problem into\r\na [Sketch][sk] problem; this translation is complex becuase [Sketch][sk]\r\nis not object-oriented.  Finally, JSketch synthesizes an executable Java\r\nprogram by interpreting the output of [Sketch][sk].\r\n\r\n\r\n## Publications\r\n\r\n* [JSketch: Sketching for Java][fse15].\r\n  Jinseong Jeon, Xiaokang Qiu, Jeffrey S. Foster, and Armando Solar-Lezama.\r\n  In _10th Joint Meeting of the European Software Engineering Conference and\r\n  the ACM SIGSOFT Symposium on the Foundations of Software Engineering\r\n  (ESEC/FSE '15)_, Sep 2015, to appear.\r\n\r\n[fse15]: http://dx.doi.org/to_be_updated\r\n\r\n\r\n## Overview\r\n\r\nThe input to JSketch is an ordinary Java program that may also contain unknowns\r\nto be synthesized. There are two kinds of unknowns: _holes_, written `??`,\r\nrepresent unknown integers and booleans, and _generators_, written `{| eâˆ— |}`,\r\nrange over a list of expressions. For example, consider the following Java sketch,\r\nsimilar to an example from the [Sketch][sk] manual:\r\n\r\n    class SimpleMath {\r\n        static int mult2(int x) {\r\n            return ?? * {| x , 0 |};\r\n        }\r\n    }\r\n\r\nHere we have provided a template for the implementation of method `mult2`: The method\r\nreturns the product of a hole and either parameter x or 0. Notice that even this very\r\nsimple sketch has 2^33 possible instantiations\r\n(32 bits of the hole and one bit for the choice of x or 0).\r\n\r\nTo specify the solution we would like to synthesize, we provide a _harness_ containing\r\nassertions about the `mult2` method:\r\n\r\n    class TestSimpleMath {\r\n        harness static void test() {\r\n            assert SimpleMath.mult2(3) == 6;\r\n        }\r\n    }\r\n\r\nNow we can run JSketch on the sketch and harness.\r\n\r\n    $ ./jsk.sh SimpleMath.java Test.java\r\n\r\nThe result is a valid Java source file in which holes and generators have been replaced\r\nwith the appropriate code.\r\n\r\n    $ cat result/java/SimpleMath.java\r\n    class SimpleMath { ...\r\n    static public int mult2 (int x) {\r\n    return 2 * x;\r\n    } }\r\n\r\nFor more complex examples, view this project on github [here][master]\r\nand see regression test suites under `test/` directory.\r\n\r\n\r\n## Limitations\r\n\r\nAs Java is a very large language, this tool currently only supports\r\na core subset of Java.  Unsupported features include:\r\npackages, access control, exceptions, and concurrency.\r\n\r\nAdditionally, JSketch assumes the input sketch is type correct,\r\nmeaning the standard parts of the program are type correct, holes\r\nare used either as integers or booleans, and expression generators\r\nare type correct.\r\n\r\n\r\n[sk]: https://bitbucket.org/gatoatigrado/sketch-frontend/\r\n[master]: https://github.com/plum-umd/java-sketch","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}